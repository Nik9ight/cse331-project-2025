
CSE331 project 2025 full.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005440  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000158c  08005550  08005550  00006550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006adc  08006adc  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006adc  08006adc  0000806c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006adc  08006adc  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006adc  08006adc  00007adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ae0  08006ae0  00007ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006ae4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000728  2000006c  08006b50  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000794  08006b50  00008794  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed1a  00000000  00000000  00008095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000203f  00000000  00000000  00016daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  00018df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c32  00000000  00000000  00019d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001842b  00000000  00000000  0001a982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123c4  00000000  00000000  00032dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d2a7  00000000  00000000  00045171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2418  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000488c  00000000  00000000  000d245c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000d6ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005538 	.word	0x08005538

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08005538 	.word	0x08005538

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_frsub>:
 80009cc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009d0:	e002      	b.n	80009d8 <__addsf3>
 80009d2:	bf00      	nop

080009d4 <__aeabi_fsub>:
 80009d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009d8 <__addsf3>:
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	bf1f      	itttt	ne
 80009dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e0:	ea92 0f03 	teqne	r2, r3
 80009e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ec:	d06a      	beq.n	8000ac4 <__addsf3+0xec>
 80009ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009f6:	bfc1      	itttt	gt
 80009f8:	18d2      	addgt	r2, r2, r3
 80009fa:	4041      	eorgt	r1, r0
 80009fc:	4048      	eorgt	r0, r1
 80009fe:	4041      	eorgt	r1, r0
 8000a00:	bfb8      	it	lt
 8000a02:	425b      	neglt	r3, r3
 8000a04:	2b19      	cmp	r3, #25
 8000a06:	bf88      	it	hi
 8000a08:	4770      	bxhi	lr
 8000a0a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a12:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a1e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a22:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4249      	negne	r1, r1
 8000a2a:	ea92 0f03 	teq	r2, r3
 8000a2e:	d03f      	beq.n	8000ab0 <__addsf3+0xd8>
 8000a30:	f1a2 0201 	sub.w	r2, r2, #1
 8000a34:	fa41 fc03 	asr.w	ip, r1, r3
 8000a38:	eb10 000c 	adds.w	r0, r0, ip
 8000a3c:	f1c3 0320 	rsb	r3, r3, #32
 8000a40:	fa01 f103 	lsl.w	r1, r1, r3
 8000a44:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a48:	d502      	bpl.n	8000a50 <__addsf3+0x78>
 8000a4a:	4249      	negs	r1, r1
 8000a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a50:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a54:	d313      	bcc.n	8000a7e <__addsf3+0xa6>
 8000a56:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a5a:	d306      	bcc.n	8000a6a <__addsf3+0x92>
 8000a5c:	0840      	lsrs	r0, r0, #1
 8000a5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a62:	f102 0201 	add.w	r2, r2, #1
 8000a66:	2afe      	cmp	r2, #254	@ 0xfe
 8000a68:	d251      	bcs.n	8000b0e <__addsf3+0x136>
 8000a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a72:	bf08      	it	eq
 8000a74:	f020 0001 	biceq.w	r0, r0, #1
 8000a78:	ea40 0003 	orr.w	r0, r0, r3
 8000a7c:	4770      	bx	lr
 8000a7e:	0049      	lsls	r1, r1, #1
 8000a80:	eb40 0000 	adc.w	r0, r0, r0
 8000a84:	3a01      	subs	r2, #1
 8000a86:	bf28      	it	cs
 8000a88:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a8c:	d2ed      	bcs.n	8000a6a <__addsf3+0x92>
 8000a8e:	fab0 fc80 	clz	ip, r0
 8000a92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a96:	ebb2 020c 	subs.w	r2, r2, ip
 8000a9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a9e:	bfaa      	itet	ge
 8000aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa4:	4252      	neglt	r2, r2
 8000aa6:	4318      	orrge	r0, r3
 8000aa8:	bfbc      	itt	lt
 8000aaa:	40d0      	lsrlt	r0, r2
 8000aac:	4318      	orrlt	r0, r3
 8000aae:	4770      	bx	lr
 8000ab0:	f092 0f00 	teq	r2, #0
 8000ab4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ab8:	bf06      	itte	eq
 8000aba:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000abe:	3201      	addeq	r2, #1
 8000ac0:	3b01      	subne	r3, #1
 8000ac2:	e7b5      	b.n	8000a30 <__addsf3+0x58>
 8000ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000acc:	bf18      	it	ne
 8000ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad2:	d021      	beq.n	8000b18 <__addsf3+0x140>
 8000ad4:	ea92 0f03 	teq	r2, r3
 8000ad8:	d004      	beq.n	8000ae4 <__addsf3+0x10c>
 8000ada:	f092 0f00 	teq	r2, #0
 8000ade:	bf08      	it	eq
 8000ae0:	4608      	moveq	r0, r1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea90 0f01 	teq	r0, r1
 8000ae8:	bf1c      	itt	ne
 8000aea:	2000      	movne	r0, #0
 8000aec:	4770      	bxne	lr
 8000aee:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000af2:	d104      	bne.n	8000afe <__addsf3+0x126>
 8000af4:	0040      	lsls	r0, r0, #1
 8000af6:	bf28      	it	cs
 8000af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000afc:	4770      	bx	lr
 8000afe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b02:	bf3c      	itt	cc
 8000b04:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b08:	4770      	bxcc	lr
 8000b0a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b1c:	bf16      	itet	ne
 8000b1e:	4608      	movne	r0, r1
 8000b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b24:	4601      	movne	r1, r0
 8000b26:	0242      	lsls	r2, r0, #9
 8000b28:	bf06      	itte	eq
 8000b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b2e:	ea90 0f01 	teqeq	r0, r1
 8000b32:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_ui2f>:
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e004      	b.n	8000b48 <__aeabi_i2f+0x8>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_i2f>:
 8000b40:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	bf48      	it	mi
 8000b46:	4240      	negmi	r0, r0
 8000b48:	ea5f 0c00 	movs.w	ip, r0
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b54:	4601      	mov	r1, r0
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	e01c      	b.n	8000b96 <__aeabi_l2f+0x2a>

08000b5c <__aeabi_ul2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e00a      	b.n	8000b80 <__aeabi_l2f+0x14>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_l2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__aeabi_l2f+0x14>
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b80:	ea5f 0c01 	movs.w	ip, r1
 8000b84:	bf02      	ittt	eq
 8000b86:	4684      	moveq	ip, r0
 8000b88:	4601      	moveq	r1, r0
 8000b8a:	2000      	moveq	r0, #0
 8000b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b90:	bf08      	it	eq
 8000b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b96:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b9a:	fabc f28c 	clz	r2, ip
 8000b9e:	3a08      	subs	r2, #8
 8000ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba4:	db10      	blt.n	8000bc8 <__aeabi_l2f+0x5c>
 8000ba6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000baa:	4463      	add	r3, ip
 8000bac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f102 0220 	add.w	r2, r2, #32
 8000bcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_fmul>:
 8000be8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bf6:	ea92 0f0c 	teqne	r2, ip
 8000bfa:	ea93 0f0c 	teqne	r3, ip
 8000bfe:	d06f      	beq.n	8000ce0 <__aeabi_fmul+0xf8>
 8000c00:	441a      	add	r2, r3
 8000c02:	ea80 0c01 	eor.w	ip, r0, r1
 8000c06:	0240      	lsls	r0, r0, #9
 8000c08:	bf18      	it	ne
 8000c0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c0e:	d01e      	beq.n	8000c4e <__aeabi_fmul+0x66>
 8000c10:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c24:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c28:	bf3e      	ittt	cc
 8000c2a:	0049      	lslcc	r1, r1, #1
 8000c2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c30:	005b      	lslcc	r3, r3, #1
 8000c32:	ea40 0001 	orr.w	r0, r0, r1
 8000c36:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c3a:	2afd      	cmp	r2, #253	@ 0xfd
 8000c3c:	d81d      	bhi.n	8000c7a <__aeabi_fmul+0x92>
 8000c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	4770      	bx	lr
 8000c4e:	f090 0f00 	teq	r0, #0
 8000c52:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c56:	bf08      	it	eq
 8000c58:	0249      	lsleq	r1, r1, #9
 8000c5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c62:	3a7f      	subs	r2, #127	@ 0x7f
 8000c64:	bfc2      	ittt	gt
 8000c66:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c6e:	4770      	bxgt	lr
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	3a01      	subs	r2, #1
 8000c7a:	dc5d      	bgt.n	8000d38 <__aeabi_fmul+0x150>
 8000c7c:	f112 0f19 	cmn.w	r2, #25
 8000c80:	bfdc      	itt	le
 8000c82:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c86:	4770      	bxle	lr
 8000c88:	f1c2 0200 	rsb	r2, r2, #0
 8000c8c:	0041      	lsls	r1, r0, #1
 8000c8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c92:	f1c2 0220 	rsb	r2, r2, #32
 8000c96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c9e:	f140 0000 	adc.w	r0, r0, #0
 8000ca2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ca6:	bf08      	it	eq
 8000ca8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cac:	4770      	bx	lr
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cb6:	bf02      	ittt	eq
 8000cb8:	0040      	lsleq	r0, r0, #1
 8000cba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cbe:	3a01      	subeq	r2, #1
 8000cc0:	d0f9      	beq.n	8000cb6 <__aeabi_fmul+0xce>
 8000cc2:	ea40 000c 	orr.w	r0, r0, ip
 8000cc6:	f093 0f00 	teq	r3, #0
 8000cca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cce:	bf02      	ittt	eq
 8000cd0:	0049      	lsleq	r1, r1, #1
 8000cd2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000cd6:	3b01      	subeq	r3, #1
 8000cd8:	d0f9      	beq.n	8000cce <__aeabi_fmul+0xe6>
 8000cda:	ea41 010c 	orr.w	r1, r1, ip
 8000cde:	e78f      	b.n	8000c00 <__aeabi_fmul+0x18>
 8000ce0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ce4:	ea92 0f0c 	teq	r2, ip
 8000ce8:	bf18      	it	ne
 8000cea:	ea93 0f0c 	teqne	r3, ip
 8000cee:	d00a      	beq.n	8000d06 <__aeabi_fmul+0x11e>
 8000cf0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cf4:	bf18      	it	ne
 8000cf6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cfa:	d1d8      	bne.n	8000cae <__aeabi_fmul+0xc6>
 8000cfc:	ea80 0001 	eor.w	r0, r0, r1
 8000d00:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f090 0f00 	teq	r0, #0
 8000d0a:	bf17      	itett	ne
 8000d0c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d10:	4608      	moveq	r0, r1
 8000d12:	f091 0f00 	teqne	r1, #0
 8000d16:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d1a:	d014      	beq.n	8000d46 <__aeabi_fmul+0x15e>
 8000d1c:	ea92 0f0c 	teq	r2, ip
 8000d20:	d101      	bne.n	8000d26 <__aeabi_fmul+0x13e>
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	d10f      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d26:	ea93 0f0c 	teq	r3, ip
 8000d2a:	d103      	bne.n	8000d34 <__aeabi_fmul+0x14c>
 8000d2c:	024b      	lsls	r3, r1, #9
 8000d2e:	bf18      	it	ne
 8000d30:	4608      	movne	r0, r1
 8000d32:	d108      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d34:	ea80 0001 	eor.w	r0, r0, r1
 8000d38:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d4a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_fdiv>:
 8000d50:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d58:	bf1e      	ittt	ne
 8000d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5e:	ea92 0f0c 	teqne	r2, ip
 8000d62:	ea93 0f0c 	teqne	r3, ip
 8000d66:	d069      	beq.n	8000e3c <__aeabi_fdiv+0xec>
 8000d68:	eba2 0203 	sub.w	r2, r2, r3
 8000d6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d70:	0249      	lsls	r1, r1, #9
 8000d72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d76:	d037      	beq.n	8000de8 <__aeabi_fdiv+0x98>
 8000d78:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	bf38      	it	cc
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d92:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d96:	428b      	cmp	r3, r1
 8000d98:	bf24      	itt	cs
 8000d9a:	1a5b      	subcs	r3, r3, r1
 8000d9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000da0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000da4:	bf24      	itt	cs
 8000da6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000daa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000db2:	bf24      	itt	cs
 8000db4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dc0:	bf24      	itt	cs
 8000dc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	bf18      	it	ne
 8000dce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dd2:	d1e0      	bne.n	8000d96 <__aeabi_fdiv+0x46>
 8000dd4:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd6:	f63f af50 	bhi.w	8000c7a <__aeabi_fmul+0x92>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de0:	bf08      	it	eq
 8000de2:	f020 0001 	biceq.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df0:	327f      	adds	r2, #127	@ 0x7f
 8000df2:	bfc2      	ittt	gt
 8000df4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfc:	4770      	bxgt	lr
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	3a01      	subs	r2, #1
 8000e08:	e737      	b.n	8000c7a <__aeabi_fmul+0x92>
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fdiv+0xc2>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fdiv+0xda>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e795      	b.n	8000d68 <__aeabi_fdiv+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	d108      	bne.n	8000e58 <__aeabi_fdiv+0x108>
 8000e46:	0242      	lsls	r2, r0, #9
 8000e48:	f47f af7d 	bne.w	8000d46 <__aeabi_fmul+0x15e>
 8000e4c:	ea93 0f0c 	teq	r3, ip
 8000e50:	f47f af70 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e776      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	d104      	bne.n	8000e68 <__aeabi_fdiv+0x118>
 8000e5e:	024b      	lsls	r3, r1, #9
 8000e60:	f43f af4c 	beq.w	8000cfc <__aeabi_fmul+0x114>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e76e      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e68:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e6c:	bf18      	it	ne
 8000e6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e72:	d1ca      	bne.n	8000e0a <__aeabi_fdiv+0xba>
 8000e74:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e78:	f47f af5c 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e7c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e80:	f47f af3c 	bne.w	8000cfc <__aeabi_fmul+0x114>
 8000e84:	e75f      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e86:	bf00      	nop

08000e88 <microDelay>:
uint8_t TFD = 0;
char strCopy1[40];
char strCopy2[40];

void microDelay (uint16_t delay)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000e92:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <microDelay+0x2c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000e9a:	bf00      	nop
 8000e9c:	4b05      	ldr	r3, [pc, #20]	@ (8000eb4 <microDelay+0x2c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d3f9      	bcc.n	8000e9c <microDelay+0x14>
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	200000dc 	.word	0x200000dc

08000eb8 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000ece:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed2:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	613b      	str	r3, [r7, #16]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	482c      	ldr	r0, [pc, #176]	@ (8000f98 <DHT11_Start+0xe0>)
 8000ee6:	f001 fa99 	bl	800241c <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000eea:	2200      	movs	r2, #0
 8000eec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ef0:	4829      	ldr	r0, [pc, #164]	@ (8000f98 <DHT11_Start+0xe0>)
 8000ef2:	f001 fc2e 	bl	8002752 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8000ef6:	2014      	movs	r0, #20
 8000ef8:	f001 f988 	bl	800220c <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000efc:	2201      	movs	r2, #1
 8000efe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f02:	4825      	ldr	r0, [pc, #148]	@ (8000f98 <DHT11_Start+0xe0>)
 8000f04:	f001 fc25 	bl	8002752 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8000f08:	201e      	movs	r0, #30
 8000f0a:	f7ff ffbd 	bl	8000e88 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000f12:	2301      	movs	r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	4619      	mov	r1, r3
 8000f1a:	481f      	ldr	r0, [pc, #124]	@ (8000f98 <DHT11_Start+0xe0>)
 8000f1c:	f001 fa7e 	bl	800241c <HAL_GPIO_Init>
  microDelay (40);
 8000f20:	2028      	movs	r0, #40	@ 0x28
 8000f22:	f7ff ffb1 	bl	8000e88 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000f26:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f2a:	481b      	ldr	r0, [pc, #108]	@ (8000f98 <DHT11_Start+0xe0>)
 8000f2c:	f001 fbfa 	bl	8002724 <HAL_GPIO_ReadPin>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d10c      	bne.n	8000f50 <DHT11_Start+0x98>
  {
    microDelay (80);
 8000f36:	2050      	movs	r0, #80	@ 0x50
 8000f38:	f7ff ffa6 	bl	8000e88 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000f3c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f40:	4815      	ldr	r0, [pc, #84]	@ (8000f98 <DHT11_Start+0xe0>)
 8000f42:	f001 fbef 	bl	8002724 <HAL_GPIO_ReadPin>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <DHT11_Start+0x98>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8000f50:	f001 f952 	bl	80021f8 <HAL_GetTick>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4a11      	ldr	r2, [pc, #68]	@ (8000f9c <DHT11_Start+0xe4>)
 8000f58:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8000f5a:	f001 f94d 	bl	80021f8 <HAL_GetTick>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa0 <DHT11_Start+0xe8>)
 8000f62:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000f64:	e004      	b.n	8000f70 <DHT11_Start+0xb8>
  {
    cMillis = HAL_GetTick();
 8000f66:	f001 f947 	bl	80021f8 <HAL_GetTick>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa0 <DHT11_Start+0xe8>)
 8000f6e:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000f70:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f74:	4808      	ldr	r0, [pc, #32]	@ (8000f98 <DHT11_Start+0xe0>)
 8000f76:	f001 fbd5 	bl	8002724 <HAL_GPIO_ReadPin>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d006      	beq.n	8000f8e <DHT11_Start+0xd6>
 8000f80:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <DHT11_Start+0xe4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	1c9a      	adds	r2, r3, #2
 8000f86:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <DHT11_Start+0xe8>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d8eb      	bhi.n	8000f66 <DHT11_Start+0xae>
  }
  return Response;
 8000f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40010c00 	.word	0x40010c00
 8000f9c:	200001b4 	.word	0x200001b4
 8000fa0:	200001dc 	.word	0x200001dc

08000fa4 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	71fb      	strb	r3, [r7, #7]
 8000fae:	e066      	b.n	800107e <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 8000fb0:	f001 f922 	bl	80021f8 <HAL_GetTick>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4a36      	ldr	r2, [pc, #216]	@ (8001090 <DHT11_Read+0xec>)
 8000fb8:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000fba:	f001 f91d 	bl	80021f8 <HAL_GetTick>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4a34      	ldr	r2, [pc, #208]	@ (8001094 <DHT11_Read+0xf0>)
 8000fc2:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000fc4:	e004      	b.n	8000fd0 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8000fc6:	f001 f917 	bl	80021f8 <HAL_GetTick>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a31      	ldr	r2, [pc, #196]	@ (8001094 <DHT11_Read+0xf0>)
 8000fce:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000fd0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fd4:	4830      	ldr	r0, [pc, #192]	@ (8001098 <DHT11_Read+0xf4>)
 8000fd6:	f001 fba5 	bl	8002724 <HAL_GPIO_ReadPin>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d106      	bne.n	8000fee <DHT11_Read+0x4a>
 8000fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8001090 <DHT11_Read+0xec>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	1c9a      	adds	r2, r3, #2
 8000fe6:	4b2b      	ldr	r3, [pc, #172]	@ (8001094 <DHT11_Read+0xf0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d8eb      	bhi.n	8000fc6 <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 8000fee:	2028      	movs	r0, #40	@ 0x28
 8000ff0:	f7ff ff4a 	bl	8000e88 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000ff4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ff8:	4827      	ldr	r0, [pc, #156]	@ (8001098 <DHT11_Read+0xf4>)
 8000ffa:	f001 fb93 	bl	8002724 <HAL_GPIO_ReadPin>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d10e      	bne.n	8001022 <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2201      	movs	r2, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	b25b      	sxtb	r3, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	b25a      	sxtb	r2, r3
 8001016:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800101a:	4013      	ands	r3, r2
 800101c:	b25b      	sxtb	r3, r3
 800101e:	71bb      	strb	r3, [r7, #6]
 8001020:	e00b      	b.n	800103a <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f1c3 0307 	rsb	r3, r3, #7
 8001028:	2201      	movs	r2, #1
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	b25a      	sxtb	r2, r3
 8001030:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001034:	4313      	orrs	r3, r2
 8001036:	b25b      	sxtb	r3, r3
 8001038:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 800103a:	f001 f8dd 	bl	80021f8 <HAL_GetTick>
 800103e:	4603      	mov	r3, r0
 8001040:	4a13      	ldr	r2, [pc, #76]	@ (8001090 <DHT11_Read+0xec>)
 8001042:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001044:	f001 f8d8 	bl	80021f8 <HAL_GetTick>
 8001048:	4603      	mov	r3, r0
 800104a:	4a12      	ldr	r2, [pc, #72]	@ (8001094 <DHT11_Read+0xf0>)
 800104c:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800104e:	e004      	b.n	800105a <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8001050:	f001 f8d2 	bl	80021f8 <HAL_GetTick>
 8001054:	4603      	mov	r3, r0
 8001056:	4a0f      	ldr	r2, [pc, #60]	@ (8001094 <DHT11_Read+0xf0>)
 8001058:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800105a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800105e:	480e      	ldr	r0, [pc, #56]	@ (8001098 <DHT11_Read+0xf4>)
 8001060:	f001 fb60 	bl	8002724 <HAL_GPIO_ReadPin>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <DHT11_Read+0xd4>
 800106a:	4b09      	ldr	r3, [pc, #36]	@ (8001090 <DHT11_Read+0xec>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	1c9a      	adds	r2, r3, #2
 8001070:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <DHT11_Read+0xf0>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8eb      	bhi.n	8001050 <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	3301      	adds	r3, #1
 800107c:	71fb      	strb	r3, [r7, #7]
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2b07      	cmp	r3, #7
 8001082:	d995      	bls.n	8000fb0 <DHT11_Read+0xc>
    }
  }
  return b;
 8001084:	79bb      	ldrb	r3, [r7, #6]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200001b4 	.word	0x200001b4
 8001094:	200001dc 	.word	0x200001dc
 8001098:	40010c00 	.word	0x40010c00
 800109c:	00000000 	.word	0x00000000

080010a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a0:	b598      	push	{r3, r4, r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a4:	f001 f850 	bl	8002148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a8:	f000 fa12 	bl	80014d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ac:	f000 fad4 	bl	8001658 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010b0:	f000 fa54 	bl	800155c <MX_I2C1_Init>
  MX_TIM1_Init();
 80010b4:	f000 fa80 	bl	80015b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010b8:	f000 fb5e 	bl	8001778 <MX_TIM2_Init>
  // In main() function, BEFORE the while(1) loop
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK)
 80010bc:	2104      	movs	r1, #4
 80010be:	48b8      	ldr	r0, [pc, #736]	@ (80013a0 <main+0x300>)
 80010c0:	f002 fe2c 	bl	8003d1c <HAL_TIM_PWM_Start>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <main+0x2e>
  {
    // PWM Generation Error - Add error handling here if needed
    Error_Handler();
 80010ca:	f000 fbcb 	bl	8001864 <Error_Handler>
  }
  MX_USART1_UART_Init();
 80010ce:	f000 fb29 	bl	8001724 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80010d2:	48b4      	ldr	r0, [pc, #720]	@ (80013a4 <main+0x304>)
 80010d4:	f002 fd80 	bl	8003bd8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);  // Start PWM for Servo
 80010d8:	2104      	movs	r1, #4
 80010da:	48b1      	ldr	r0, [pc, #708]	@ (80013a0 <main+0x300>)
 80010dc:	f002 fe1e 	bl	8003d1c <HAL_TIM_PWM_Start>
  //uint8_t doorState = 0;
   HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010e6:	48b0      	ldr	r0, [pc, #704]	@ (80013a8 <main+0x308>)
 80010e8:	f001 fb33 	bl	8002752 <HAL_GPIO_WritePin>
   SSD1306_Init();
 80010ec:	f000 fbc0 	bl	8001870 <SSD1306_Init>

   SSD1306_GotoXY (0, 0);
 80010f0:	2100      	movs	r1, #0
 80010f2:	2000      	movs	r0, #0
 80010f4:	f000 fd24 	bl	8001b40 <SSD1306_GotoXY>
     SSD1306_Puts("Welcome", &Font_11x18, 1);
 80010f8:	2201      	movs	r2, #1
 80010fa:	49ac      	ldr	r1, [pc, #688]	@ (80013ac <main+0x30c>)
 80010fc:	48ac      	ldr	r0, [pc, #688]	@ (80013b0 <main+0x310>)
 80010fe:	f000 fdb3 	bl	8001c68 <SSD1306_Puts>
     SSD1306_GotoXY (0, 30);
 8001102:	211e      	movs	r1, #30
 8001104:	2000      	movs	r0, #0
 8001106:	f000 fd1b 	bl	8001b40 <SSD1306_GotoXY>
     SSD1306_Puts("to CSE331", &Font_11x18, 1);
 800110a:	2201      	movs	r2, #1
 800110c:	49a7      	ldr	r1, [pc, #668]	@ (80013ac <main+0x30c>)
 800110e:	48a9      	ldr	r0, [pc, #676]	@ (80013b4 <main+0x314>)
 8001110:	f000 fdaa 	bl	8001c68 <SSD1306_Puts>
     SSD1306_UpdateScreen();
 8001114:	f000 fc70 	bl	80019f8 <SSD1306_UpdateScreen>
     HAL_Delay(2000);
 8001118:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800111c:	f001 f876 	bl	800220c <HAL_Delay>
     SSD1306_Clear();
 8001120:	f000 fdc7 	bl	8001cb2 <SSD1306_Clear>
     HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);  // Start PWM for Servo
 8001124:	2104      	movs	r1, #4
 8001126:	489e      	ldr	r0, [pc, #632]	@ (80013a0 <main+0x300>)
 8001128:	f002 fdf8 	bl	8003d1c <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

	  // DHT11

	  if(DHT11_Start())
 800112c:	f7ff fec4 	bl	8000eb8 <DHT11_Start>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 80a9 	beq.w	800128a <main+0x1ea>
	  	      {
	  	        RHI = DHT11_Read(); // Relative humidity integral
 8001138:	f7ff ff34 	bl	8000fa4 <DHT11_Read>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	4b9d      	ldr	r3, [pc, #628]	@ (80013b8 <main+0x318>)
 8001142:	701a      	strb	r2, [r3, #0]
	  	        RHD = DHT11_Read(); // Relative humidity decimal
 8001144:	f7ff ff2e 	bl	8000fa4 <DHT11_Read>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	4b9b      	ldr	r3, [pc, #620]	@ (80013bc <main+0x31c>)
 800114e:	701a      	strb	r2, [r3, #0]
	  	        TCI = DHT11_Read(); // Celsius integral
 8001150:	f7ff ff28 	bl	8000fa4 <DHT11_Read>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	4b99      	ldr	r3, [pc, #612]	@ (80013c0 <main+0x320>)
 800115a:	701a      	strb	r2, [r3, #0]
	  	        TCD = DHT11_Read(); // Celsius decimal
 800115c:	f7ff ff22 	bl	8000fa4 <DHT11_Read>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	4b97      	ldr	r3, [pc, #604]	@ (80013c4 <main+0x324>)
 8001166:	701a      	strb	r2, [r3, #0]
	  	        SUM = DHT11_Read(); // Check sum
 8001168:	f7ff ff1c 	bl	8000fa4 <DHT11_Read>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	4b95      	ldr	r3, [pc, #596]	@ (80013c8 <main+0x328>)
 8001172:	701a      	strb	r2, [r3, #0]
	  	        if (RHI + RHD + TCI + TCD == SUM)
 8001174:	4b90      	ldr	r3, [pc, #576]	@ (80013b8 <main+0x318>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b90      	ldr	r3, [pc, #576]	@ (80013bc <main+0x31c>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4a8f      	ldr	r2, [pc, #572]	@ (80013c0 <main+0x320>)
 8001182:	7812      	ldrb	r2, [r2, #0]
 8001184:	4413      	add	r3, r2
 8001186:	4a8f      	ldr	r2, [pc, #572]	@ (80013c4 <main+0x324>)
 8001188:	7812      	ldrb	r2, [r2, #0]
 800118a:	4413      	add	r3, r2
 800118c:	4a8e      	ldr	r2, [pc, #568]	@ (80013c8 <main+0x328>)
 800118e:	7812      	ldrb	r2, [r2, #0]
 8001190:	4293      	cmp	r3, r2
 8001192:	d17a      	bne.n	800128a <main+0x1ea>
	  	        {

	  	          tCelsius = (float)TCI + (float)(TCD/10.0);
 8001194:	4b8a      	ldr	r3, [pc, #552]	@ (80013c0 <main+0x320>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fccd 	bl	8000b38 <__aeabi_ui2f>
 800119e:	4604      	mov	r4, r0
 80011a0:	4b88      	ldr	r3, [pc, #544]	@ (80013c4 <main+0x324>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f925 	bl	80003f4 <__aeabi_i2d>
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	4b87      	ldr	r3, [pc, #540]	@ (80013cc <main+0x32c>)
 80011b0:	f7ff fab4 	bl	800071c <__aeabi_ddiv>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4610      	mov	r0, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	f7ff fbb6 	bl	800092c <__aeabi_d2f>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4619      	mov	r1, r3
 80011c4:	4620      	mov	r0, r4
 80011c6:	f7ff fc07 	bl	80009d8 <__addsf3>
 80011ca:	4603      	mov	r3, r0
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b80      	ldr	r3, [pc, #512]	@ (80013d0 <main+0x330>)
 80011d0:	601a      	str	r2, [r3, #0]
	  	          tFahrenheit = tCelsius * 9/5 + 32;
 80011d2:	4b7f      	ldr	r3, [pc, #508]	@ (80013d0 <main+0x330>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	497f      	ldr	r1, [pc, #508]	@ (80013d4 <main+0x334>)
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fd05 	bl	8000be8 <__aeabi_fmul>
 80011de:	4603      	mov	r3, r0
 80011e0:	497d      	ldr	r1, [pc, #500]	@ (80013d8 <main+0x338>)
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fdb4 	bl	8000d50 <__aeabi_fdiv>
 80011e8:	4603      	mov	r3, r0
 80011ea:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fbf2 	bl	80009d8 <__addsf3>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b78      	ldr	r3, [pc, #480]	@ (80013dc <main+0x33c>)
 80011fa:	601a      	str	r2, [r3, #0]
	  	          RH = (float)RHI + (float)(RHD/10.0);
 80011fc:	4b6e      	ldr	r3, [pc, #440]	@ (80013b8 <main+0x318>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fc99 	bl	8000b38 <__aeabi_ui2f>
 8001206:	4604      	mov	r4, r0
 8001208:	4b6c      	ldr	r3, [pc, #432]	@ (80013bc <main+0x31c>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f8f1 	bl	80003f4 <__aeabi_i2d>
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	4b6d      	ldr	r3, [pc, #436]	@ (80013cc <main+0x32c>)
 8001218:	f7ff fa80 	bl	800071c <__aeabi_ddiv>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff fb82 	bl	800092c <__aeabi_d2f>
 8001228:	4603      	mov	r3, r0
 800122a:	4619      	mov	r1, r3
 800122c:	4620      	mov	r0, r4
 800122e:	f7ff fbd3 	bl	80009d8 <__addsf3>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	4b6a      	ldr	r3, [pc, #424]	@ (80013e0 <main+0x340>)
 8001238:	601a      	str	r2, [r3, #0]


	  	          SSD1306_Clear();
 800123a:	f000 fd3a 	bl	8001cb2 <SSD1306_Clear>

	  	                  sprintf(strCopy1,"Temp: %d.%d C", TCI, TCD);
 800123e:	4b60      	ldr	r3, [pc, #384]	@ (80013c0 <main+0x320>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	4b5f      	ldr	r3, [pc, #380]	@ (80013c4 <main+0x324>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4966      	ldr	r1, [pc, #408]	@ (80013e4 <main+0x344>)
 800124a:	4867      	ldr	r0, [pc, #412]	@ (80013e8 <main+0x348>)
 800124c:	f003 fcc4 	bl	8004bd8 <siprintf>
	  	                  SSD1306_GotoXY(0, 0);
 8001250:	2100      	movs	r1, #0
 8001252:	2000      	movs	r0, #0
 8001254:	f000 fc74 	bl	8001b40 <SSD1306_GotoXY>
	  	                  SSD1306_Puts(strCopy1, &Font_7x10, 1);
 8001258:	2201      	movs	r2, #1
 800125a:	4964      	ldr	r1, [pc, #400]	@ (80013ec <main+0x34c>)
 800125c:	4862      	ldr	r0, [pc, #392]	@ (80013e8 <main+0x348>)
 800125e:	f000 fd03 	bl	8001c68 <SSD1306_Puts>

	  	                  sprintf(strCopy2,"Humidity: %d.%d %%", RHI, RHD);
 8001262:	4b55      	ldr	r3, [pc, #340]	@ (80013b8 <main+0x318>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	4b54      	ldr	r3, [pc, #336]	@ (80013bc <main+0x31c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4960      	ldr	r1, [pc, #384]	@ (80013f0 <main+0x350>)
 800126e:	4861      	ldr	r0, [pc, #388]	@ (80013f4 <main+0x354>)
 8001270:	f003 fcb2 	bl	8004bd8 <siprintf>
	  	                  SSD1306_GotoXY(0, 20);
 8001274:	2114      	movs	r1, #20
 8001276:	2000      	movs	r0, #0
 8001278:	f000 fc62 	bl	8001b40 <SSD1306_GotoXY>
	  	                  SSD1306_Puts(strCopy2, &Font_7x10, 1);
 800127c:	2201      	movs	r2, #1
 800127e:	495b      	ldr	r1, [pc, #364]	@ (80013ec <main+0x34c>)
 8001280:	485c      	ldr	r0, [pc, #368]	@ (80013f4 <main+0x354>)
 8001282:	f000 fcf1 	bl	8001c68 <SSD1306_Puts>

	  	                  SSD1306_UpdateScreen();
 8001286:	f000 fbb7 	bl	80019f8 <SSD1306_UpdateScreen>

	  	      }
	  	     // HAL_Delay(50);
	  //Ultrasonic

	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800128a:	2201      	movs	r2, #1
 800128c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001290:	4845      	ldr	r0, [pc, #276]	@ (80013a8 <main+0x308>)
 8001292:	f001 fa5e 	bl	8002752 <HAL_GPIO_WritePin>
	      __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001296:	4b43      	ldr	r3, [pc, #268]	@ (80013a4 <main+0x304>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2200      	movs	r2, #0
 800129c:	625a      	str	r2, [r3, #36]	@ 0x24
	      while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 800129e:	bf00      	nop
 80012a0:	4b40      	ldr	r3, [pc, #256]	@ (80013a4 <main+0x304>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a6:	2b09      	cmp	r3, #9
 80012a8:	d9fa      	bls.n	80012a0 <main+0x200>
	      HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012b0:	483d      	ldr	r0, [pc, #244]	@ (80013a8 <main+0x308>)
 80012b2:	f001 fa4e 	bl	8002752 <HAL_GPIO_WritePin>

	      pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 80012b6:	f000 ff9f 	bl	80021f8 <HAL_GetTick>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a4e      	ldr	r2, [pc, #312]	@ (80013f8 <main+0x358>)
 80012be:	6013      	str	r3, [r2, #0]
	      // wait for the echo pin to go high
	      while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 80012c0:	bf00      	nop
 80012c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012c6:	484d      	ldr	r0, [pc, #308]	@ (80013fc <main+0x35c>)
 80012c8:	f001 fa2c 	bl	8002724 <HAL_GPIO_ReadPin>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d108      	bne.n	80012e4 <main+0x244>
 80012d2:	4b49      	ldr	r3, [pc, #292]	@ (80013f8 <main+0x358>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f103 040a 	add.w	r4, r3, #10
 80012da:	f000 ff8d 	bl	80021f8 <HAL_GetTick>
 80012de:	4603      	mov	r3, r0
 80012e0:	429c      	cmp	r4, r3
 80012e2:	d8ee      	bhi.n	80012c2 <main+0x222>
	      Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 80012e4:	4b2f      	ldr	r3, [pc, #188]	@ (80013a4 <main+0x304>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ea:	4a45      	ldr	r2, [pc, #276]	@ (8001400 <main+0x360>)
 80012ec:	6013      	str	r3, [r2, #0]

	      pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 80012ee:	f000 ff83 	bl	80021f8 <HAL_GetTick>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a40      	ldr	r2, [pc, #256]	@ (80013f8 <main+0x358>)
 80012f6:	6013      	str	r3, [r2, #0]
	      // wait for the echo pin to go low
	      while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 80012f8:	bf00      	nop
 80012fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012fe:	483f      	ldr	r0, [pc, #252]	@ (80013fc <main+0x35c>)
 8001300:	f001 fa10 	bl	8002724 <HAL_GPIO_ReadPin>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d008      	beq.n	800131c <main+0x27c>
 800130a:	4b3b      	ldr	r3, [pc, #236]	@ (80013f8 <main+0x358>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8001312:	f000 ff71 	bl	80021f8 <HAL_GetTick>
 8001316:	4603      	mov	r3, r0
 8001318:	429c      	cmp	r4, r3
 800131a:	d8ee      	bhi.n	80012fa <main+0x25a>
	      Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 800131c:	4b21      	ldr	r3, [pc, #132]	@ (80013a4 <main+0x304>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001322:	4a38      	ldr	r2, [pc, #224]	@ (8001404 <main+0x364>)
 8001324:	6013      	str	r3, [r2, #0]

	      Distance = (Value2-Value1)* 0.034/2;
 8001326:	4b37      	ldr	r3, [pc, #220]	@ (8001404 <main+0x364>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4b35      	ldr	r3, [pc, #212]	@ (8001400 <main+0x360>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f84f 	bl	80003d4 <__aeabi_ui2d>
 8001336:	a318      	add	r3, pc, #96	@ (adr r3, 8001398 <main+0x2f8>)
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7ff f8c4 	bl	80004c8 <__aeabi_dmul>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001350:	f7ff f9e4 	bl	800071c <__aeabi_ddiv>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff fac6 	bl	80008ec <__aeabi_d2uiz>
 8001360:	4603      	mov	r3, r0
 8001362:	b29a      	uxth	r2, r3
 8001364:	4b28      	ldr	r3, [pc, #160]	@ (8001408 <main+0x368>)
 8001366:	801a      	strh	r2, [r3, #0]

	      SSD1306_GotoXY (0, 40);
 8001368:	2128      	movs	r1, #40	@ 0x28
 800136a:	2000      	movs	r0, #0
 800136c:	f000 fbe8 	bl	8001b40 <SSD1306_GotoXY>
	      SSD1306_Puts ("Distance:", &Font_7x10, 1);
 8001370:	2201      	movs	r2, #1
 8001372:	491e      	ldr	r1, [pc, #120]	@ (80013ec <main+0x34c>)
 8001374:	4825      	ldr	r0, [pc, #148]	@ (800140c <main+0x36c>)
 8001376:	f000 fc77 	bl	8001c68 <SSD1306_Puts>
	      sprintf(strCopy,"%d    ", Distance);
 800137a:	4b23      	ldr	r3, [pc, #140]	@ (8001408 <main+0x368>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	4923      	ldr	r1, [pc, #140]	@ (8001410 <main+0x370>)
 8001382:	4824      	ldr	r0, [pc, #144]	@ (8001414 <main+0x374>)
 8001384:	f003 fc28 	bl	8004bd8 <siprintf>
	      SSD1306_GotoXY (63, 40);
 8001388:	2128      	movs	r1, #40	@ 0x28
 800138a:	203f      	movs	r0, #63	@ 0x3f
 800138c:	f000 fbd8 	bl	8001b40 <SSD1306_GotoXY>
	      SSD1306_Puts (strCopy, &Font_7x10, 1);
 8001390:	2201      	movs	r2, #1
 8001392:	4916      	ldr	r1, [pc, #88]	@ (80013ec <main+0x34c>)
 8001394:	e040      	b.n	8001418 <main+0x378>
 8001396:	bf00      	nop
 8001398:	b020c49c 	.word	0xb020c49c
 800139c:	3fa16872 	.word	0x3fa16872
 80013a0:	20000124 	.word	0x20000124
 80013a4:	200000dc 	.word	0x200000dc
 80013a8:	40010c00 	.word	0x40010c00
 80013ac:	20000008 	.word	0x20000008
 80013b0:	08005550 	.word	0x08005550
 80013b4:	08005558 	.word	0x08005558
 80013b8:	200001d5 	.word	0x200001d5
 80013bc:	200001d6 	.word	0x200001d6
 80013c0:	200001d7 	.word	0x200001d7
 80013c4:	200001d8 	.word	0x200001d8
 80013c8:	200001d9 	.word	0x200001d9
 80013cc:	40240000 	.word	0x40240000
 80013d0:	200001e0 	.word	0x200001e0
 80013d4:	41100000 	.word	0x41100000
 80013d8:	40a00000 	.word	0x40a00000
 80013dc:	200001e4 	.word	0x200001e4
 80013e0:	200001e8 	.word	0x200001e8
 80013e4:	08005564 	.word	0x08005564
 80013e8:	200001ec 	.word	0x200001ec
 80013ec:	20000000 	.word	0x20000000
 80013f0:	08005574 	.word	0x08005574
 80013f4:	20000214 	.word	0x20000214
 80013f8:	200001b4 	.word	0x200001b4
 80013fc:	40010800 	.word	0x40010800
 8001400:	200001b8 	.word	0x200001b8
 8001404:	200001bc 	.word	0x200001bc
 8001408:	200001c0 	.word	0x200001c0
 800140c:	08005588 	.word	0x08005588
 8001410:	08005594 	.word	0x08005594
 8001414:	200001c4 	.word	0x200001c4
 8001418:	4824      	ldr	r0, [pc, #144]	@ (80014ac <main+0x40c>)
 800141a:	f000 fc25 	bl	8001c68 <SSD1306_Puts>
	      SSD1306_UpdateScreen();
 800141e:	f000 faeb 	bl	80019f8 <SSD1306_UpdateScreen>

	      //servo motor and IR



	      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) // Active LOW: Presence detected
 8001422:	2101      	movs	r1, #1
 8001424:	4822      	ldr	r0, [pc, #136]	@ (80014b0 <main+0x410>)
 8001426:	f001 f97d 	bl	8002724 <HAL_GPIO_ReadPin>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d113      	bne.n	8001458 <main+0x3b8>
	  	      {
	  	          // Open door
	  	          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 250);
 8001430:	4b20      	ldr	r3, [pc, #128]	@ (80014b4 <main+0x414>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	22fa      	movs	r2, #250	@ 0xfa
 8001436:	639a      	str	r2, [r3, #56]	@ 0x38

	  	       	  	          SSD1306_GotoXY(0, 50);
 8001438:	2132      	movs	r1, #50	@ 0x32
 800143a:	2000      	movs	r0, #0
 800143c:	f000 fb80 	bl	8001b40 <SSD1306_GotoXY>
	  	       	  	          SSD1306_Puts("Door Open", &Font_7x10, 1);
 8001440:	2201      	movs	r2, #1
 8001442:	491d      	ldr	r1, [pc, #116]	@ (80014b8 <main+0x418>)
 8001444:	481d      	ldr	r0, [pc, #116]	@ (80014bc <main+0x41c>)
 8001446:	f000 fc0f 	bl	8001c68 <SSD1306_Puts>
	  	       	  	          SSD1306_UpdateScreen();
 800144a:	f000 fad5 	bl	80019f8 <SSD1306_UpdateScreen>
	  	       	  	          HAL_Delay(500);
 800144e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001452:	f000 fedb 	bl	800220c <HAL_Delay>
 8001456:	e013      	b.n	8001480 <main+0x3e0>

	  	      }
	  	      else
	  	      {
	  	          // Close door
	  	          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 750);
 8001458:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <main+0x414>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8001460:	639a      	str	r2, [r3, #56]	@ 0x38

	  	       	  	          SSD1306_GotoXY(0, 50);
 8001462:	2132      	movs	r1, #50	@ 0x32
 8001464:	2000      	movs	r0, #0
 8001466:	f000 fb6b 	bl	8001b40 <SSD1306_GotoXY>
	  	       	  	          SSD1306_Puts("Door Closed", &Font_7x10, 1);
 800146a:	2201      	movs	r2, #1
 800146c:	4912      	ldr	r1, [pc, #72]	@ (80014b8 <main+0x418>)
 800146e:	4814      	ldr	r0, [pc, #80]	@ (80014c0 <main+0x420>)
 8001470:	f000 fbfa 	bl	8001c68 <SSD1306_Puts>
	  	       	  	          SSD1306_UpdateScreen();
 8001474:	f000 fac0 	bl	80019f8 <SSD1306_UpdateScreen>
	  	       	  	          HAL_Delay(500);
 8001478:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800147c:	f000 fec6 	bl	800220c <HAL_Delay>



	      //UART1

	      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET)
 8001480:	2102      	movs	r1, #2
 8001482:	4810      	ldr	r0, [pc, #64]	@ (80014c4 <main+0x424>)
 8001484:	f001 f94e 	bl	8002724 <HAL_GPIO_ReadPin>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d103      	bne.n	8001496 <main+0x3f6>
	     	      {
	     	        charToTransmit[0] = 48; // 48 is ascii character for zero
 800148e:	4b0e      	ldr	r3, [pc, #56]	@ (80014c8 <main+0x428>)
 8001490:	2230      	movs	r2, #48	@ 0x30
 8001492:	701a      	strb	r2, [r3, #0]
 8001494:	e002      	b.n	800149c <main+0x3fc>
	     	      }
	     	      else
	     	      {
	     	        charToTransmit[0] = 49; // 49 is ascii character for one
 8001496:	4b0c      	ldr	r3, [pc, #48]	@ (80014c8 <main+0x428>)
 8001498:	2231      	movs	r2, #49	@ 0x31
 800149a:	701a      	strb	r2, [r3, #0]
	     	      }
	     	      HAL_UART_Transmit(&huart1, charToTransmit, 1, 100);
 800149c:	2364      	movs	r3, #100	@ 0x64
 800149e:	2201      	movs	r2, #1
 80014a0:	4909      	ldr	r1, [pc, #36]	@ (80014c8 <main+0x428>)
 80014a2:	480a      	ldr	r0, [pc, #40]	@ (80014cc <main+0x42c>)
 80014a4:	f003 f9c4 	bl	8004830 <HAL_UART_Transmit>
	  if(DHT11_Start())
 80014a8:	e640      	b.n	800112c <main+0x8c>
 80014aa:	bf00      	nop
 80014ac:	200001c4 	.word	0x200001c4
 80014b0:	40010800 	.word	0x40010800
 80014b4:	20000124 	.word	0x20000124
 80014b8:	20000000 	.word	0x20000000
 80014bc:	0800559c 	.word	0x0800559c
 80014c0:	080055a8 	.word	0x080055a8
 80014c4:	40010c00 	.word	0x40010c00
 80014c8:	200001d4 	.word	0x200001d4
 80014cc:	2000016c 	.word	0x2000016c

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b090      	sub	sp, #64	@ 0x40
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0318 	add.w	r3, r7, #24
 80014da:	2228      	movs	r2, #40	@ 0x28
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f003 fb9c 	bl	8004c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014f2:	2301      	movs	r3, #1
 80014f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001500:	2301      	movs	r3, #1
 8001502:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001504:	2302      	movs	r3, #2
 8001506:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001508:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800150c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800150e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001512:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001514:	f107 0318 	add.w	r3, r7, #24
 8001518:	4618      	mov	r0, r3
 800151a:	f001 fefd 	bl	8003318 <HAL_RCC_OscConfig>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001524:	f000 f99e 	bl	8001864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001528:	230f      	movs	r3, #15
 800152a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152c:	2302      	movs	r3, #2
 800152e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001534:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001538:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	2102      	movs	r1, #2
 8001542:	4618      	mov	r0, r3
 8001544:	f002 f96a 	bl	800381c <HAL_RCC_ClockConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800154e:	f000 f989 	bl	8001864 <Error_Handler>
  }
}
 8001552:	bf00      	nop
 8001554:	3740      	adds	r7, #64	@ 0x40
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001560:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <MX_I2C1_Init+0x50>)
 8001562:	4a13      	ldr	r2, [pc, #76]	@ (80015b0 <MX_I2C1_Init+0x54>)
 8001564:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001566:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <MX_I2C1_Init+0x50>)
 8001568:	4a12      	ldr	r2, [pc, #72]	@ (80015b4 <MX_I2C1_Init+0x58>)
 800156a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800156c:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <MX_I2C1_Init+0x50>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001572:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <MX_I2C1_Init+0x50>)
 8001574:	2200      	movs	r2, #0
 8001576:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001578:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <MX_I2C1_Init+0x50>)
 800157a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800157e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001580:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <MX_I2C1_Init+0x50>)
 8001582:	2200      	movs	r2, #0
 8001584:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001586:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <MX_I2C1_Init+0x50>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800158c:	4b07      	ldr	r3, [pc, #28]	@ (80015ac <MX_I2C1_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001592:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <MX_I2C1_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001598:	4804      	ldr	r0, [pc, #16]	@ (80015ac <MX_I2C1_Init+0x50>)
 800159a:	f001 f8f3 	bl	8002784 <HAL_I2C_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015a4:	f000 f95e 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000088 	.word	0x20000088
 80015b0:	40005400 	.word	0x40005400
 80015b4:	00061a80 	.word	0x00061a80

080015b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015cc:	463b      	mov	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001650 <MX_TIM1_Init+0x98>)
 80015d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001654 <MX_TIM1_Init+0x9c>)
 80015d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80015da:	4b1d      	ldr	r3, [pc, #116]	@ (8001650 <MX_TIM1_Init+0x98>)
 80015dc:	2247      	movs	r2, #71	@ 0x47
 80015de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001650 <MX_TIM1_Init+0x98>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001650 <MX_TIM1_Init+0x98>)
 80015e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ee:	4b18      	ldr	r3, [pc, #96]	@ (8001650 <MX_TIM1_Init+0x98>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015f4:	4b16      	ldr	r3, [pc, #88]	@ (8001650 <MX_TIM1_Init+0x98>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fa:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <MX_TIM1_Init+0x98>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001600:	4813      	ldr	r0, [pc, #76]	@ (8001650 <MX_TIM1_Init+0x98>)
 8001602:	f002 fa99 	bl	8003b38 <HAL_TIM_Base_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800160c:	f000 f92a 	bl	8001864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001610:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001614:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	4619      	mov	r1, r3
 800161c:	480c      	ldr	r0, [pc, #48]	@ (8001650 <MX_TIM1_Init+0x98>)
 800161e:	f002 fce1 	bl	8003fe4 <HAL_TIM_ConfigClockSource>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001628:	f000 f91c 	bl	8001864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162c:	2300      	movs	r3, #0
 800162e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001634:	463b      	mov	r3, r7
 8001636:	4619      	mov	r1, r3
 8001638:	4805      	ldr	r0, [pc, #20]	@ (8001650 <MX_TIM1_Init+0x98>)
 800163a:	f003 f84b 	bl	80046d4 <HAL_TIMEx_MasterConfigSynchronization>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001644:	f000 f90e 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200000dc 	.word	0x200000dc
 8001654:	40012c00 	.word	0x40012c00

08001658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	f107 0310 	add.w	r3, r7, #16
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800166c:	4b2a      	ldr	r3, [pc, #168]	@ (8001718 <MX_GPIO_Init+0xc0>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a29      	ldr	r2, [pc, #164]	@ (8001718 <MX_GPIO_Init+0xc0>)
 8001672:	f043 0320 	orr.w	r3, r3, #32
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b27      	ldr	r3, [pc, #156]	@ (8001718 <MX_GPIO_Init+0xc0>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0320 	and.w	r3, r3, #32
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001684:	4b24      	ldr	r3, [pc, #144]	@ (8001718 <MX_GPIO_Init+0xc0>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a23      	ldr	r2, [pc, #140]	@ (8001718 <MX_GPIO_Init+0xc0>)
 800168a:	f043 0308 	orr.w	r3, r3, #8
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b21      	ldr	r3, [pc, #132]	@ (8001718 <MX_GPIO_Init+0xc0>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169c:	4b1e      	ldr	r3, [pc, #120]	@ (8001718 <MX_GPIO_Init+0xc0>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001718 <MX_GPIO_Init+0xc0>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001718 <MX_GPIO_Init+0xc0>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80016b4:	2200      	movs	r2, #0
 80016b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016ba:	4818      	ldr	r0, [pc, #96]	@ (800171c <MX_GPIO_Init+0xc4>)
 80016bc:	f001 f849 	bl	8002752 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2302      	movs	r3, #2
 80016d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 0310 	add.w	r3, r7, #16
 80016d6:	4619      	mov	r1, r3
 80016d8:	4810      	ldr	r0, [pc, #64]	@ (800171c <MX_GPIO_Init+0xc4>)
 80016da:	f000 fe9f 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	4619      	mov	r1, r3
 80016f2:	480b      	ldr	r0, [pc, #44]	@ (8001720 <MX_GPIO_Init+0xc8>)
 80016f4:	f000 fe92 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016f8:	2301      	movs	r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	4619      	mov	r1, r3
 800170a:	4805      	ldr	r0, [pc, #20]	@ (8001720 <MX_GPIO_Init+0xc8>)
 800170c:	f000 fe86 	bl	800241c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001710:	bf00      	nop
 8001712:	3720      	adds	r7, #32
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40021000 	.word	0x40021000
 800171c:	40010c00 	.word	0x40010c00
 8001720:	40010800 	.word	0x40010800

08001724 <MX_USART1_UART_Init>:

/* USER CODE BEGIN 4 */
static void MX_USART1_UART_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001728:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <MX_USART1_UART_Init+0x4c>)
 800172a:	4a12      	ldr	r2, [pc, #72]	@ (8001774 <MX_USART1_UART_Init+0x50>)
 800172c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800172e:	4b10      	ldr	r3, [pc, #64]	@ (8001770 <MX_USART1_UART_Init+0x4c>)
 8001730:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001734:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001736:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <MX_USART1_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800173c:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <MX_USART1_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001742:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <MX_USART1_UART_Init+0x4c>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001748:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <MX_USART1_UART_Init+0x4c>)
 800174a:	220c      	movs	r2, #12
 800174c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174e:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <MX_USART1_UART_Init+0x4c>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <MX_USART1_UART_Init+0x4c>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800175a:	4805      	ldr	r0, [pc, #20]	@ (8001770 <MX_USART1_UART_Init+0x4c>)
 800175c:	f003 f818 	bl	8004790 <HAL_UART_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001766:	f000 f87d 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	2000016c 	.word	0x2000016c
 8001774:	40013800 	.word	0x40013800

08001778 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08e      	sub	sp, #56	@ 0x38
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800178c:	f107 0320 	add.w	r3, r7, #32
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
 80017a4:	615a      	str	r2, [r3, #20]
 80017a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001860 <MX_TIM2_Init+0xe8>)
 80017aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80017b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001860 <MX_TIM2_Init+0xe8>)
 80017b2:	220f      	movs	r2, #15
 80017b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001860 <MX_TIM2_Init+0xe8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80017bc:	4b28      	ldr	r3, [pc, #160]	@ (8001860 <MX_TIM2_Init+0xe8>)
 80017be:	f242 720f 	movw	r2, #9999	@ 0x270f
 80017c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c4:	4b26      	ldr	r3, [pc, #152]	@ (8001860 <MX_TIM2_Init+0xe8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ca:	4b25      	ldr	r3, [pc, #148]	@ (8001860 <MX_TIM2_Init+0xe8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017d0:	4823      	ldr	r0, [pc, #140]	@ (8001860 <MX_TIM2_Init+0xe8>)
 80017d2:	f002 f9b1 	bl	8003b38 <HAL_TIM_Base_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80017dc:	f000 f842 	bl	8001864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017ea:	4619      	mov	r1, r3
 80017ec:	481c      	ldr	r0, [pc, #112]	@ (8001860 <MX_TIM2_Init+0xe8>)
 80017ee:	f002 fbf9 	bl	8003fe4 <HAL_TIM_ConfigClockSource>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80017f8:	f000 f834 	bl	8001864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017fc:	4818      	ldr	r0, [pc, #96]	@ (8001860 <MX_TIM2_Init+0xe8>)
 80017fe:	f002 fa35 	bl	8003c6c <HAL_TIM_PWM_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001808:	f000 f82c 	bl	8001864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180c:	2300      	movs	r3, #0
 800180e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001814:	f107 0320 	add.w	r3, r7, #32
 8001818:	4619      	mov	r1, r3
 800181a:	4811      	ldr	r0, [pc, #68]	@ (8001860 <MX_TIM2_Init+0xe8>)
 800181c:	f002 ff5a 	bl	80046d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001826:	f000 f81d 	bl	8001864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182a:	2360      	movs	r3, #96	@ 0x60
 800182c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	2204      	movs	r2, #4
 800183e:	4619      	mov	r1, r3
 8001840:	4807      	ldr	r0, [pc, #28]	@ (8001860 <MX_TIM2_Init+0xe8>)
 8001842:	f002 fb0d 	bl	8003e60 <HAL_TIM_PWM_ConfigChannel>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800184c:	f000 f80a 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001850:	4803      	ldr	r0, [pc, #12]	@ (8001860 <MX_TIM2_Init+0xe8>)
 8001852:	f000 fb6f 	bl	8001f34 <HAL_TIM_MspPostInit>

}
 8001856:	bf00      	nop
 8001858:	3738      	adds	r7, #56	@ 0x38
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000124 	.word	0x20000124

08001864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001868:	b672      	cpsid	i
}
 800186a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <Error_Handler+0x8>

08001870 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001876:	f000 fa25 	bl	8001cc4 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800187a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800187e:	2201      	movs	r2, #1
 8001880:	2178      	movs	r1, #120	@ 0x78
 8001882:	485b      	ldr	r0, [pc, #364]	@ (80019f0 <SSD1306_Init+0x180>)
 8001884:	f001 f9c0 	bl	8002c08 <HAL_I2C_IsDeviceReady>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800188e:	2300      	movs	r3, #0
 8001890:	e0a9      	b.n	80019e6 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001892:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001896:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001898:	e002      	b.n	80018a0 <SSD1306_Init+0x30>
		p--;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3b01      	subs	r3, #1
 800189e:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f9      	bne.n	800189a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80018a6:	22ae      	movs	r2, #174	@ 0xae
 80018a8:	2100      	movs	r1, #0
 80018aa:	2078      	movs	r0, #120	@ 0x78
 80018ac:	f000 fa84 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80018b0:	2220      	movs	r2, #32
 80018b2:	2100      	movs	r1, #0
 80018b4:	2078      	movs	r0, #120	@ 0x78
 80018b6:	f000 fa7f 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80018ba:	2210      	movs	r2, #16
 80018bc:	2100      	movs	r1, #0
 80018be:	2078      	movs	r0, #120	@ 0x78
 80018c0:	f000 fa7a 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80018c4:	22b0      	movs	r2, #176	@ 0xb0
 80018c6:	2100      	movs	r1, #0
 80018c8:	2078      	movs	r0, #120	@ 0x78
 80018ca:	f000 fa75 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80018ce:	22c8      	movs	r2, #200	@ 0xc8
 80018d0:	2100      	movs	r1, #0
 80018d2:	2078      	movs	r0, #120	@ 0x78
 80018d4:	f000 fa70 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80018d8:	2200      	movs	r2, #0
 80018da:	2100      	movs	r1, #0
 80018dc:	2078      	movs	r0, #120	@ 0x78
 80018de:	f000 fa6b 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80018e2:	2210      	movs	r2, #16
 80018e4:	2100      	movs	r1, #0
 80018e6:	2078      	movs	r0, #120	@ 0x78
 80018e8:	f000 fa66 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80018ec:	2240      	movs	r2, #64	@ 0x40
 80018ee:	2100      	movs	r1, #0
 80018f0:	2078      	movs	r0, #120	@ 0x78
 80018f2:	f000 fa61 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80018f6:	2281      	movs	r2, #129	@ 0x81
 80018f8:	2100      	movs	r1, #0
 80018fa:	2078      	movs	r0, #120	@ 0x78
 80018fc:	f000 fa5c 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001900:	22ff      	movs	r2, #255	@ 0xff
 8001902:	2100      	movs	r1, #0
 8001904:	2078      	movs	r0, #120	@ 0x78
 8001906:	f000 fa57 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800190a:	22a1      	movs	r2, #161	@ 0xa1
 800190c:	2100      	movs	r1, #0
 800190e:	2078      	movs	r0, #120	@ 0x78
 8001910:	f000 fa52 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001914:	22a6      	movs	r2, #166	@ 0xa6
 8001916:	2100      	movs	r1, #0
 8001918:	2078      	movs	r0, #120	@ 0x78
 800191a:	f000 fa4d 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800191e:	22a8      	movs	r2, #168	@ 0xa8
 8001920:	2100      	movs	r1, #0
 8001922:	2078      	movs	r0, #120	@ 0x78
 8001924:	f000 fa48 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001928:	223f      	movs	r2, #63	@ 0x3f
 800192a:	2100      	movs	r1, #0
 800192c:	2078      	movs	r0, #120	@ 0x78
 800192e:	f000 fa43 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001932:	22a4      	movs	r2, #164	@ 0xa4
 8001934:	2100      	movs	r1, #0
 8001936:	2078      	movs	r0, #120	@ 0x78
 8001938:	f000 fa3e 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800193c:	22d3      	movs	r2, #211	@ 0xd3
 800193e:	2100      	movs	r1, #0
 8001940:	2078      	movs	r0, #120	@ 0x78
 8001942:	f000 fa39 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	2078      	movs	r0, #120	@ 0x78
 800194c:	f000 fa34 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001950:	22d5      	movs	r2, #213	@ 0xd5
 8001952:	2100      	movs	r1, #0
 8001954:	2078      	movs	r0, #120	@ 0x78
 8001956:	f000 fa2f 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800195a:	22f0      	movs	r2, #240	@ 0xf0
 800195c:	2100      	movs	r1, #0
 800195e:	2078      	movs	r0, #120	@ 0x78
 8001960:	f000 fa2a 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001964:	22d9      	movs	r2, #217	@ 0xd9
 8001966:	2100      	movs	r1, #0
 8001968:	2078      	movs	r0, #120	@ 0x78
 800196a:	f000 fa25 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800196e:	2222      	movs	r2, #34	@ 0x22
 8001970:	2100      	movs	r1, #0
 8001972:	2078      	movs	r0, #120	@ 0x78
 8001974:	f000 fa20 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001978:	22da      	movs	r2, #218	@ 0xda
 800197a:	2100      	movs	r1, #0
 800197c:	2078      	movs	r0, #120	@ 0x78
 800197e:	f000 fa1b 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001982:	2212      	movs	r2, #18
 8001984:	2100      	movs	r1, #0
 8001986:	2078      	movs	r0, #120	@ 0x78
 8001988:	f000 fa16 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800198c:	22db      	movs	r2, #219	@ 0xdb
 800198e:	2100      	movs	r1, #0
 8001990:	2078      	movs	r0, #120	@ 0x78
 8001992:	f000 fa11 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001996:	2220      	movs	r2, #32
 8001998:	2100      	movs	r1, #0
 800199a:	2078      	movs	r0, #120	@ 0x78
 800199c:	f000 fa0c 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80019a0:	228d      	movs	r2, #141	@ 0x8d
 80019a2:	2100      	movs	r1, #0
 80019a4:	2078      	movs	r0, #120	@ 0x78
 80019a6:	f000 fa07 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80019aa:	2214      	movs	r2, #20
 80019ac:	2100      	movs	r1, #0
 80019ae:	2078      	movs	r0, #120	@ 0x78
 80019b0:	f000 fa02 	bl	8001db8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80019b4:	22af      	movs	r2, #175	@ 0xaf
 80019b6:	2100      	movs	r1, #0
 80019b8:	2078      	movs	r0, #120	@ 0x78
 80019ba:	f000 f9fd 	bl	8001db8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80019be:	222e      	movs	r2, #46	@ 0x2e
 80019c0:	2100      	movs	r1, #0
 80019c2:	2078      	movs	r0, #120	@ 0x78
 80019c4:	f000 f9f8 	bl	8001db8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80019c8:	2000      	movs	r0, #0
 80019ca:	f000 f843 	bl	8001a54 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80019ce:	f000 f813 	bl	80019f8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80019d2:	4b08      	ldr	r3, [pc, #32]	@ (80019f4 <SSD1306_Init+0x184>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80019d8:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <SSD1306_Init+0x184>)
 80019da:	2200      	movs	r2, #0
 80019dc:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80019de:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <SSD1306_Init+0x184>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80019e4:	2301      	movs	r3, #1
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000088 	.word	0x20000088
 80019f4:	2000063c 	.word	0x2000063c

080019f8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80019fe:	2300      	movs	r3, #0
 8001a00:	71fb      	strb	r3, [r7, #7]
 8001a02:	e01d      	b.n	8001a40 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	3b50      	subs	r3, #80	@ 0x50
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2078      	movs	r0, #120	@ 0x78
 8001a10:	f000 f9d2 	bl	8001db8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2100      	movs	r1, #0
 8001a18:	2078      	movs	r0, #120	@ 0x78
 8001a1a:	f000 f9cd 	bl	8001db8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001a1e:	2210      	movs	r2, #16
 8001a20:	2100      	movs	r1, #0
 8001a22:	2078      	movs	r0, #120	@ 0x78
 8001a24:	f000 f9c8 	bl	8001db8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	01db      	lsls	r3, r3, #7
 8001a2c:	4a08      	ldr	r2, [pc, #32]	@ (8001a50 <SSD1306_UpdateScreen+0x58>)
 8001a2e:	441a      	add	r2, r3
 8001a30:	2380      	movs	r3, #128	@ 0x80
 8001a32:	2140      	movs	r1, #64	@ 0x40
 8001a34:	2078      	movs	r0, #120	@ 0x78
 8001a36:	f000 f959 	bl	8001cec <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	71fb      	strb	r3, [r7, #7]
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	2b07      	cmp	r3, #7
 8001a44:	d9de      	bls.n	8001a04 <SSD1306_UpdateScreen+0xc>
	}
}
 8001a46:	bf00      	nop
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	2000023c 	.word	0x2000023c

08001a54 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <SSD1306_Fill+0x14>
 8001a64:	2300      	movs	r3, #0
 8001a66:	e000      	b.n	8001a6a <SSD1306_Fill+0x16>
 8001a68:	23ff      	movs	r3, #255	@ 0xff
 8001a6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4803      	ldr	r0, [pc, #12]	@ (8001a80 <SSD1306_Fill+0x2c>)
 8001a72:	f003 f8d3 	bl	8004c1c <memset>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	2000023c 	.word	0x2000023c

08001a84 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	80fb      	strh	r3, [r7, #6]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	80bb      	strh	r3, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	70fb      	strb	r3, [r7, #3]
	if (
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a9a:	d848      	bhi.n	8001b2e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001a9c:	88bb      	ldrh	r3, [r7, #4]
 8001a9e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001aa0:	d845      	bhi.n	8001b2e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001aa2:	4b25      	ldr	r3, [pc, #148]	@ (8001b38 <SSD1306_DrawPixel+0xb4>)
 8001aa4:	791b      	ldrb	r3, [r3, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d006      	beq.n	8001ab8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	bf0c      	ite	eq
 8001ab0:	2301      	moveq	r3, #1
 8001ab2:	2300      	movne	r3, #0
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d11a      	bne.n	8001af4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001abe:	88fa      	ldrh	r2, [r7, #6]
 8001ac0:	88bb      	ldrh	r3, [r7, #4]
 8001ac2:	08db      	lsrs	r3, r3, #3
 8001ac4:	b298      	uxth	r0, r3
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	01db      	lsls	r3, r3, #7
 8001aca:	4413      	add	r3, r2
 8001acc:	4a1b      	ldr	r2, [pc, #108]	@ (8001b3c <SSD1306_DrawPixel+0xb8>)
 8001ace:	5cd3      	ldrb	r3, [r2, r3]
 8001ad0:	b25a      	sxtb	r2, r3
 8001ad2:	88bb      	ldrh	r3, [r7, #4]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	2101      	movs	r1, #1
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	b25b      	sxtb	r3, r3
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	b259      	sxtb	r1, r3
 8001ae4:	88fa      	ldrh	r2, [r7, #6]
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	01db      	lsls	r3, r3, #7
 8001aea:	4413      	add	r3, r2
 8001aec:	b2c9      	uxtb	r1, r1
 8001aee:	4a13      	ldr	r2, [pc, #76]	@ (8001b3c <SSD1306_DrawPixel+0xb8>)
 8001af0:	54d1      	strb	r1, [r2, r3]
 8001af2:	e01d      	b.n	8001b30 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001af4:	88fa      	ldrh	r2, [r7, #6]
 8001af6:	88bb      	ldrh	r3, [r7, #4]
 8001af8:	08db      	lsrs	r3, r3, #3
 8001afa:	b298      	uxth	r0, r3
 8001afc:	4603      	mov	r3, r0
 8001afe:	01db      	lsls	r3, r3, #7
 8001b00:	4413      	add	r3, r2
 8001b02:	4a0e      	ldr	r2, [pc, #56]	@ (8001b3c <SSD1306_DrawPixel+0xb8>)
 8001b04:	5cd3      	ldrb	r3, [r2, r3]
 8001b06:	b25a      	sxtb	r2, r3
 8001b08:	88bb      	ldrh	r3, [r7, #4]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	2101      	movs	r1, #1
 8001b10:	fa01 f303 	lsl.w	r3, r1, r3
 8001b14:	b25b      	sxtb	r3, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	b25b      	sxtb	r3, r3
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	b259      	sxtb	r1, r3
 8001b1e:	88fa      	ldrh	r2, [r7, #6]
 8001b20:	4603      	mov	r3, r0
 8001b22:	01db      	lsls	r3, r3, #7
 8001b24:	4413      	add	r3, r2
 8001b26:	b2c9      	uxtb	r1, r1
 8001b28:	4a04      	ldr	r2, [pc, #16]	@ (8001b3c <SSD1306_DrawPixel+0xb8>)
 8001b2a:	54d1      	strb	r1, [r2, r3]
 8001b2c:	e000      	b.n	8001b30 <SSD1306_DrawPixel+0xac>
		return;
 8001b2e:	bf00      	nop
	}
}
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	2000063c 	.word	0x2000063c
 8001b3c:	2000023c 	.word	0x2000023c

08001b40 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	460a      	mov	r2, r1
 8001b4a:	80fb      	strh	r3, [r7, #6]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001b50:	4a05      	ldr	r2, [pc, #20]	@ (8001b68 <SSD1306_GotoXY+0x28>)
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001b56:	4a04      	ldr	r2, [pc, #16]	@ (8001b68 <SSD1306_GotoXY+0x28>)
 8001b58:	88bb      	ldrh	r3, [r7, #4]
 8001b5a:	8053      	strh	r3, [r2, #2]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	2000063c 	.word	0x2000063c

08001b6c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	6039      	str	r1, [r7, #0]
 8001b76:	71fb      	strb	r3, [r7, #7]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b7c:	4b39      	ldr	r3, [pc, #228]	@ (8001c64 <SSD1306_Putc+0xf8>)
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	4413      	add	r3, r2
	if (
 8001b88:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b8a:	dc07      	bgt.n	8001b9c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001b8c:	4b35      	ldr	r3, [pc, #212]	@ (8001c64 <SSD1306_Putc+0xf8>)
 8001b8e:	885b      	ldrh	r3, [r3, #2]
 8001b90:	461a      	mov	r2, r3
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	785b      	ldrb	r3, [r3, #1]
 8001b96:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b98:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b9a:	dd01      	ble.n	8001ba0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	e05d      	b.n	8001c5c <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	e04b      	b.n	8001c3e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	3b20      	subs	r3, #32
 8001bae:	6839      	ldr	r1, [r7, #0]
 8001bb0:	7849      	ldrb	r1, [r1, #1]
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	440b      	add	r3, r1
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	e030      	b.n	8001c2c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d010      	beq.n	8001bfc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001bda:	4b22      	ldr	r3, [pc, #136]	@ (8001c64 <SSD1306_Putc+0xf8>)
 8001bdc:	881a      	ldrh	r2, [r3, #0]
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	4413      	add	r3, r2
 8001be4:	b298      	uxth	r0, r3
 8001be6:	4b1f      	ldr	r3, [pc, #124]	@ (8001c64 <SSD1306_Putc+0xf8>)
 8001be8:	885a      	ldrh	r2, [r3, #2]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	4413      	add	r3, r2
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	79ba      	ldrb	r2, [r7, #6]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f7ff ff45 	bl	8001a84 <SSD1306_DrawPixel>
 8001bfa:	e014      	b.n	8001c26 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001bfc:	4b19      	ldr	r3, [pc, #100]	@ (8001c64 <SSD1306_Putc+0xf8>)
 8001bfe:	881a      	ldrh	r2, [r3, #0]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	b298      	uxth	r0, r3
 8001c08:	4b16      	ldr	r3, [pc, #88]	@ (8001c64 <SSD1306_Putc+0xf8>)
 8001c0a:	885a      	ldrh	r2, [r3, #2]
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	b299      	uxth	r1, r3
 8001c14:	79bb      	ldrb	r3, [r7, #6]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	bf0c      	ite	eq
 8001c1a:	2301      	moveq	r3, #1
 8001c1c:	2300      	movne	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	461a      	mov	r2, r3
 8001c22:	f7ff ff2f 	bl	8001a84 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d3c8      	bcc.n	8001bca <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	785b      	ldrb	r3, [r3, #1]
 8001c42:	461a      	mov	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d3ad      	bcc.n	8001ba6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001c4a:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <SSD1306_Putc+0xf8>)
 8001c4c:	881b      	ldrh	r3, [r3, #0]
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	7812      	ldrb	r2, [r2, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	4b03      	ldr	r3, [pc, #12]	@ (8001c64 <SSD1306_Putc+0xf8>)
 8001c58:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	2000063c 	.word	0x2000063c

08001c68 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	4613      	mov	r3, r2
 8001c74:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001c76:	e012      	b.n	8001c9e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	79fa      	ldrb	r2, [r7, #7]
 8001c7e:	68b9      	ldr	r1, [r7, #8]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff73 	bl	8001b6c <SSD1306_Putc>
 8001c86:	4603      	mov	r3, r0
 8001c88:	461a      	mov	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d002      	beq.n	8001c98 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	e008      	b.n	8001caa <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1e8      	bne.n	8001c78 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	781b      	ldrb	r3, [r3, #0]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f7ff fecc 	bl	8001a54 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001cbc:	f7ff fe9c 	bl	80019f8 <SSD1306_UpdateScreen>
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001cca:	4b07      	ldr	r3, [pc, #28]	@ (8001ce8 <ssd1306_I2C_Init+0x24>)
 8001ccc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001cce:	e002      	b.n	8001cd6 <ssd1306_I2C_Init+0x12>
		p--;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f9      	bne.n	8001cd0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	0003d090 	.word	0x0003d090

08001cec <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001cec:	b590      	push	{r4, r7, lr}
 8001cee:	b0c7      	sub	sp, #284	@ 0x11c
 8001cf0:	af02      	add	r7, sp, #8
 8001cf2:	4604      	mov	r4, r0
 8001cf4:	4608      	mov	r0, r1
 8001cf6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001cfa:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001cfe:	600a      	str	r2, [r1, #0]
 8001d00:	4619      	mov	r1, r3
 8001d02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d06:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001d0a:	4622      	mov	r2, r4
 8001d0c:	701a      	strb	r2, [r3, #0]
 8001d0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d12:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001d16:	4602      	mov	r2, r0
 8001d18:	701a      	strb	r2, [r3, #0]
 8001d1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d22:	460a      	mov	r2, r1
 8001d24:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001d26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d2e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001d32:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001d36:	7812      	ldrb	r2, [r2, #0]
 8001d38:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001d40:	e015      	b.n	8001d6e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001d42:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d46:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001d4a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	441a      	add	r2, r3
 8001d52:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d56:	3301      	adds	r3, #1
 8001d58:	7811      	ldrb	r1, [r2, #0]
 8001d5a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001d5e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001d62:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001d64:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d68:	3301      	adds	r3, #1
 8001d6a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001d6e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001d78:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001d7c:	8812      	ldrh	r2, [r2, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d8df      	bhi.n	8001d42 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001d82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d86:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	b299      	uxth	r1, r3
 8001d8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d92:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	f107 020c 	add.w	r2, r7, #12
 8001da0:	200a      	movs	r0, #10
 8001da2:	9000      	str	r0, [sp, #0]
 8001da4:	4803      	ldr	r0, [pc, #12]	@ (8001db4 <ssd1306_I2C_WriteMulti+0xc8>)
 8001da6:	f000 fe31 	bl	8002a0c <HAL_I2C_Master_Transmit>
}
 8001daa:	bf00      	nop
 8001dac:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd90      	pop	{r4, r7, pc}
 8001db4:	20000088 	.word	0x20000088

08001db8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af02      	add	r7, sp, #8
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	71bb      	strb	r3, [r7, #6]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001dca:	79bb      	ldrb	r3, [r7, #6]
 8001dcc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001dce:	797b      	ldrb	r3, [r7, #5]
 8001dd0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	b299      	uxth	r1, r3
 8001dd6:	f107 020c 	add.w	r2, r7, #12
 8001dda:	230a      	movs	r3, #10
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2302      	movs	r3, #2
 8001de0:	4803      	ldr	r0, [pc, #12]	@ (8001df0 <ssd1306_I2C_Write+0x38>)
 8001de2:	f000 fe13 	bl	8002a0c <HAL_I2C_Master_Transmit>
}
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000088 	.word	0x20000088

08001df4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dfa:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <HAL_MspInit+0x5c>)
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	4a14      	ldr	r2, [pc, #80]	@ (8001e50 <HAL_MspInit+0x5c>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6193      	str	r3, [r2, #24]
 8001e06:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <HAL_MspInit+0x5c>)
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e12:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <HAL_MspInit+0x5c>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	4a0e      	ldr	r2, [pc, #56]	@ (8001e50 <HAL_MspInit+0x5c>)
 8001e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e1c:	61d3      	str	r3, [r2, #28]
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e50 <HAL_MspInit+0x5c>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e54 <HAL_MspInit+0x60>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	4a04      	ldr	r2, [pc, #16]	@ (8001e54 <HAL_MspInit+0x60>)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e46:	bf00      	nop
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40010000 	.word	0x40010000

08001e58 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 0310 	add.w	r3, r7, #16
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a15      	ldr	r2, [pc, #84]	@ (8001ec8 <HAL_I2C_MspInit+0x70>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d123      	bne.n	8001ec0 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e78:	4b14      	ldr	r3, [pc, #80]	@ (8001ecc <HAL_I2C_MspInit+0x74>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	4a13      	ldr	r2, [pc, #76]	@ (8001ecc <HAL_I2C_MspInit+0x74>)
 8001e7e:	f043 0308 	orr.w	r3, r3, #8
 8001e82:	6193      	str	r3, [r2, #24]
 8001e84:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <HAL_I2C_MspInit+0x74>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e90:	23c0      	movs	r3, #192	@ 0xc0
 8001e92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e94:	2312      	movs	r3, #18
 8001e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	480b      	ldr	r0, [pc, #44]	@ (8001ed0 <HAL_I2C_MspInit+0x78>)
 8001ea4:	f000 faba 	bl	800241c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ea8:	4b08      	ldr	r3, [pc, #32]	@ (8001ecc <HAL_I2C_MspInit+0x74>)
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	4a07      	ldr	r2, [pc, #28]	@ (8001ecc <HAL_I2C_MspInit+0x74>)
 8001eae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001eb2:	61d3      	str	r3, [r2, #28]
 8001eb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ecc <HAL_I2C_MspInit+0x74>)
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ec0:	bf00      	nop
 8001ec2:	3720      	adds	r7, #32
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40005400 	.word	0x40005400
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40010c00 	.word	0x40010c00

08001ed4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a12      	ldr	r2, [pc, #72]	@ (8001f2c <HAL_TIM_Base_MspInit+0x58>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d10c      	bne.n	8001f00 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ee6:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <HAL_TIM_Base_MspInit+0x5c>)
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	4a11      	ldr	r2, [pc, #68]	@ (8001f30 <HAL_TIM_Base_MspInit+0x5c>)
 8001eec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ef0:	6193      	str	r3, [r2, #24]
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f30 <HAL_TIM_Base_MspInit+0x5c>)
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001efe:	e010      	b.n	8001f22 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f08:	d10b      	bne.n	8001f22 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f0a:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <HAL_TIM_Base_MspInit+0x5c>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	4a08      	ldr	r2, [pc, #32]	@ (8001f30 <HAL_TIM_Base_MspInit+0x5c>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	61d3      	str	r3, [r2, #28]
 8001f16:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <HAL_TIM_Base_MspInit+0x5c>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
}
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr
 8001f2c:	40012c00 	.word	0x40012c00
 8001f30:	40021000 	.word	0x40021000

08001f34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 0310 	add.w	r3, r7, #16
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f52:	d117      	bne.n	8001f84 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f54:	4b0d      	ldr	r3, [pc, #52]	@ (8001f8c <HAL_TIM_MspPostInit+0x58>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	4a0c      	ldr	r2, [pc, #48]	@ (8001f8c <HAL_TIM_MspPostInit+0x58>)
 8001f5a:	f043 0304 	orr.w	r3, r3, #4
 8001f5e:	6193      	str	r3, [r2, #24]
 8001f60:	4b0a      	ldr	r3, [pc, #40]	@ (8001f8c <HAL_TIM_MspPostInit+0x58>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2302      	movs	r3, #2
 8001f76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4804      	ldr	r0, [pc, #16]	@ (8001f90 <HAL_TIM_MspPostInit+0x5c>)
 8001f80:	f000 fa4c 	bl	800241c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f84:	bf00      	nop
 8001f86:	3720      	adds	r7, #32
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40010800 	.word	0x40010800

08001f94 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a1c      	ldr	r2, [pc, #112]	@ (8002020 <HAL_UART_MspInit+0x8c>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d131      	bne.n	8002018 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002024 <HAL_UART_MspInit+0x90>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	4a1a      	ldr	r2, [pc, #104]	@ (8002024 <HAL_UART_MspInit+0x90>)
 8001fba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fbe:	6193      	str	r3, [r2, #24]
 8001fc0:	4b18      	ldr	r3, [pc, #96]	@ (8002024 <HAL_UART_MspInit+0x90>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fcc:	4b15      	ldr	r3, [pc, #84]	@ (8002024 <HAL_UART_MspInit+0x90>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	4a14      	ldr	r2, [pc, #80]	@ (8002024 <HAL_UART_MspInit+0x90>)
 8001fd2:	f043 0304 	orr.w	r3, r3, #4
 8001fd6:	6193      	str	r3, [r2, #24]
 8001fd8:	4b12      	ldr	r3, [pc, #72]	@ (8002024 <HAL_UART_MspInit+0x90>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fe4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fe8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff2:	f107 0310 	add.w	r3, r7, #16
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	480b      	ldr	r0, [pc, #44]	@ (8002028 <HAL_UART_MspInit+0x94>)
 8001ffa:	f000 fa0f 	bl	800241c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ffe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002002:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200c:	f107 0310 	add.w	r3, r7, #16
 8002010:	4619      	mov	r1, r3
 8002012:	4805      	ldr	r0, [pc, #20]	@ (8002028 <HAL_UART_MspInit+0x94>)
 8002014:	f000 fa02 	bl	800241c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002018:	bf00      	nop
 800201a:	3720      	adds	r7, #32
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40013800 	.word	0x40013800
 8002024:	40021000 	.word	0x40021000
 8002028:	40010800 	.word	0x40010800

0800202c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <NMI_Handler+0x4>

08002034 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <HardFault_Handler+0x4>

0800203c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <MemManage_Handler+0x4>

08002044 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002048:	bf00      	nop
 800204a:	e7fd      	b.n	8002048 <BusFault_Handler+0x4>

0800204c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002050:	bf00      	nop
 8002052:	e7fd      	b.n	8002050 <UsageFault_Handler+0x4>

08002054 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr

08002078 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800207c:	f000 f8aa 	bl	80021d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}

08002084 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800208c:	4a14      	ldr	r2, [pc, #80]	@ (80020e0 <_sbrk+0x5c>)
 800208e:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <_sbrk+0x60>)
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002098:	4b13      	ldr	r3, [pc, #76]	@ (80020e8 <_sbrk+0x64>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d102      	bne.n	80020a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a0:	4b11      	ldr	r3, [pc, #68]	@ (80020e8 <_sbrk+0x64>)
 80020a2:	4a12      	ldr	r2, [pc, #72]	@ (80020ec <_sbrk+0x68>)
 80020a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020a6:	4b10      	ldr	r3, [pc, #64]	@ (80020e8 <_sbrk+0x64>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d207      	bcs.n	80020c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020b4:	f002 fdba 	bl	8004c2c <__errno>
 80020b8:	4603      	mov	r3, r0
 80020ba:	220c      	movs	r2, #12
 80020bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020be:	f04f 33ff 	mov.w	r3, #4294967295
 80020c2:	e009      	b.n	80020d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020c4:	4b08      	ldr	r3, [pc, #32]	@ (80020e8 <_sbrk+0x64>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ca:	4b07      	ldr	r3, [pc, #28]	@ (80020e8 <_sbrk+0x64>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	4a05      	ldr	r2, [pc, #20]	@ (80020e8 <_sbrk+0x64>)
 80020d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020d6:	68fb      	ldr	r3, [r7, #12]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20005000 	.word	0x20005000
 80020e4:	00000400 	.word	0x00000400
 80020e8:	20000644 	.word	0x20000644
 80020ec:	20000798 	.word	0x20000798

080020f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020fc:	f7ff fff8 	bl	80020f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002100:	480b      	ldr	r0, [pc, #44]	@ (8002130 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002102:	490c      	ldr	r1, [pc, #48]	@ (8002134 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002104:	4a0c      	ldr	r2, [pc, #48]	@ (8002138 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002108:	e002      	b.n	8002110 <LoopCopyDataInit>

0800210a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800210c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210e:	3304      	adds	r3, #4

08002110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002114:	d3f9      	bcc.n	800210a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002116:	4a09      	ldr	r2, [pc, #36]	@ (800213c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002118:	4c09      	ldr	r4, [pc, #36]	@ (8002140 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800211a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800211c:	e001      	b.n	8002122 <LoopFillZerobss>

0800211e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002120:	3204      	adds	r2, #4

08002122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002124:	d3fb      	bcc.n	800211e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002126:	f002 fd87 	bl	8004c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800212a:	f7fe ffb9 	bl	80010a0 <main>
  bx lr
 800212e:	4770      	bx	lr
  ldr r0, =_sdata
 8002130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002134:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002138:	08006ae4 	.word	0x08006ae4
  ldr r2, =_sbss
 800213c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002140:	20000794 	.word	0x20000794

08002144 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002144:	e7fe      	b.n	8002144 <ADC1_2_IRQHandler>
	...

08002148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800214c:	4b08      	ldr	r3, [pc, #32]	@ (8002170 <HAL_Init+0x28>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a07      	ldr	r2, [pc, #28]	@ (8002170 <HAL_Init+0x28>)
 8002152:	f043 0310 	orr.w	r3, r3, #16
 8002156:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002158:	2003      	movs	r0, #3
 800215a:	f000 f92b 	bl	80023b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800215e:	200f      	movs	r0, #15
 8002160:	f000 f808 	bl	8002174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002164:	f7ff fe46 	bl	8001df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40022000 	.word	0x40022000

08002174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800217c:	4b12      	ldr	r3, [pc, #72]	@ (80021c8 <HAL_InitTick+0x54>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b12      	ldr	r3, [pc, #72]	@ (80021cc <HAL_InitTick+0x58>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4619      	mov	r1, r3
 8002186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800218a:	fbb3 f3f1 	udiv	r3, r3, r1
 800218e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002192:	4618      	mov	r0, r3
 8002194:	f000 f935 	bl	8002402 <HAL_SYSTICK_Config>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e00e      	b.n	80021c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b0f      	cmp	r3, #15
 80021a6:	d80a      	bhi.n	80021be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a8:	2200      	movs	r2, #0
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295
 80021b0:	f000 f90b 	bl	80023ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b4:	4a06      	ldr	r2, [pc, #24]	@ (80021d0 <HAL_InitTick+0x5c>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	e000      	b.n	80021c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000010 	.word	0x20000010
 80021cc:	20000018 	.word	0x20000018
 80021d0:	20000014 	.word	0x20000014

080021d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d8:	4b05      	ldr	r3, [pc, #20]	@ (80021f0 <HAL_IncTick+0x1c>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <HAL_IncTick+0x20>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4413      	add	r3, r2
 80021e4:	4a03      	ldr	r2, [pc, #12]	@ (80021f4 <HAL_IncTick+0x20>)
 80021e6:	6013      	str	r3, [r2, #0]
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr
 80021f0:	20000018 	.word	0x20000018
 80021f4:	20000648 	.word	0x20000648

080021f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return uwTick;
 80021fc:	4b02      	ldr	r3, [pc, #8]	@ (8002208 <HAL_GetTick+0x10>)
 80021fe:	681b      	ldr	r3, [r3, #0]
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	20000648 	.word	0x20000648

0800220c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002214:	f7ff fff0 	bl	80021f8 <HAL_GetTick>
 8002218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002224:	d005      	beq.n	8002232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002226:	4b0a      	ldr	r3, [pc, #40]	@ (8002250 <HAL_Delay+0x44>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4413      	add	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002232:	bf00      	nop
 8002234:	f7ff ffe0 	bl	80021f8 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	429a      	cmp	r2, r3
 8002242:	d8f7      	bhi.n	8002234 <HAL_Delay+0x28>
  {
  }
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000018 	.word	0x20000018

08002254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002264:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002270:	4013      	ands	r3, r2
 8002272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800227c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002286:	4a04      	ldr	r2, [pc, #16]	@ (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	60d3      	str	r3, [r2, #12]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a0:	4b04      	ldr	r3, [pc, #16]	@ (80022b4 <__NVIC_GetPriorityGrouping+0x18>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	0a1b      	lsrs	r3, r3, #8
 80022a6:	f003 0307 	and.w	r3, r3, #7
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	6039      	str	r1, [r7, #0]
 80022c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	db0a      	blt.n	80022e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	490c      	ldr	r1, [pc, #48]	@ (8002304 <__NVIC_SetPriority+0x4c>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	0112      	lsls	r2, r2, #4
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	440b      	add	r3, r1
 80022dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e0:	e00a      	b.n	80022f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	4908      	ldr	r1, [pc, #32]	@ (8002308 <__NVIC_SetPriority+0x50>)
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	3b04      	subs	r3, #4
 80022f0:	0112      	lsls	r2, r2, #4
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	440b      	add	r3, r1
 80022f6:	761a      	strb	r2, [r3, #24]
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000e100 	.word	0xe000e100
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800230c:	b480      	push	{r7}
 800230e:	b089      	sub	sp, #36	@ 0x24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f1c3 0307 	rsb	r3, r3, #7
 8002326:	2b04      	cmp	r3, #4
 8002328:	bf28      	it	cs
 800232a:	2304      	movcs	r3, #4
 800232c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3304      	adds	r3, #4
 8002332:	2b06      	cmp	r3, #6
 8002334:	d902      	bls.n	800233c <NVIC_EncodePriority+0x30>
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3b03      	subs	r3, #3
 800233a:	e000      	b.n	800233e <NVIC_EncodePriority+0x32>
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002340:	f04f 32ff 	mov.w	r2, #4294967295
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43da      	mvns	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	401a      	ands	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002354:	f04f 31ff 	mov.w	r1, #4294967295
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	fa01 f303 	lsl.w	r3, r1, r3
 800235e:	43d9      	mvns	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	4313      	orrs	r3, r2
         );
}
 8002366:	4618      	mov	r0, r3
 8002368:	3724      	adds	r7, #36	@ 0x24
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr

08002370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3b01      	subs	r3, #1
 800237c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002380:	d301      	bcc.n	8002386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002382:	2301      	movs	r3, #1
 8002384:	e00f      	b.n	80023a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002386:	4a0a      	ldr	r2, [pc, #40]	@ (80023b0 <SysTick_Config+0x40>)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3b01      	subs	r3, #1
 800238c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800238e:	210f      	movs	r1, #15
 8002390:	f04f 30ff 	mov.w	r0, #4294967295
 8002394:	f7ff ff90 	bl	80022b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002398:	4b05      	ldr	r3, [pc, #20]	@ (80023b0 <SysTick_Config+0x40>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800239e:	4b04      	ldr	r3, [pc, #16]	@ (80023b0 <SysTick_Config+0x40>)
 80023a0:	2207      	movs	r2, #7
 80023a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	e000e010 	.word	0xe000e010

080023b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff ff49 	bl	8002254 <__NVIC_SetPriorityGrouping>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b086      	sub	sp, #24
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	4603      	mov	r3, r0
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
 80023d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023dc:	f7ff ff5e 	bl	800229c <__NVIC_GetPriorityGrouping>
 80023e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	68b9      	ldr	r1, [r7, #8]
 80023e6:	6978      	ldr	r0, [r7, #20]
 80023e8:	f7ff ff90 	bl	800230c <NVIC_EncodePriority>
 80023ec:	4602      	mov	r2, r0
 80023ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f2:	4611      	mov	r1, r2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff5f 	bl	80022b8 <__NVIC_SetPriority>
}
 80023fa:	bf00      	nop
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ffb0 	bl	8002370 <SysTick_Config>
 8002410:	4603      	mov	r3, r0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800241c:	b480      	push	{r7}
 800241e:	b08b      	sub	sp, #44	@ 0x2c
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800242a:	2300      	movs	r3, #0
 800242c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800242e:	e169      	b.n	8002704 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002430:	2201      	movs	r2, #1
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	69fa      	ldr	r2, [r7, #28]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	429a      	cmp	r2, r3
 800244a:	f040 8158 	bne.w	80026fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4a9a      	ldr	r2, [pc, #616]	@ (80026bc <HAL_GPIO_Init+0x2a0>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d05e      	beq.n	8002516 <HAL_GPIO_Init+0xfa>
 8002458:	4a98      	ldr	r2, [pc, #608]	@ (80026bc <HAL_GPIO_Init+0x2a0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d875      	bhi.n	800254a <HAL_GPIO_Init+0x12e>
 800245e:	4a98      	ldr	r2, [pc, #608]	@ (80026c0 <HAL_GPIO_Init+0x2a4>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d058      	beq.n	8002516 <HAL_GPIO_Init+0xfa>
 8002464:	4a96      	ldr	r2, [pc, #600]	@ (80026c0 <HAL_GPIO_Init+0x2a4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d86f      	bhi.n	800254a <HAL_GPIO_Init+0x12e>
 800246a:	4a96      	ldr	r2, [pc, #600]	@ (80026c4 <HAL_GPIO_Init+0x2a8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d052      	beq.n	8002516 <HAL_GPIO_Init+0xfa>
 8002470:	4a94      	ldr	r2, [pc, #592]	@ (80026c4 <HAL_GPIO_Init+0x2a8>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d869      	bhi.n	800254a <HAL_GPIO_Init+0x12e>
 8002476:	4a94      	ldr	r2, [pc, #592]	@ (80026c8 <HAL_GPIO_Init+0x2ac>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d04c      	beq.n	8002516 <HAL_GPIO_Init+0xfa>
 800247c:	4a92      	ldr	r2, [pc, #584]	@ (80026c8 <HAL_GPIO_Init+0x2ac>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d863      	bhi.n	800254a <HAL_GPIO_Init+0x12e>
 8002482:	4a92      	ldr	r2, [pc, #584]	@ (80026cc <HAL_GPIO_Init+0x2b0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d046      	beq.n	8002516 <HAL_GPIO_Init+0xfa>
 8002488:	4a90      	ldr	r2, [pc, #576]	@ (80026cc <HAL_GPIO_Init+0x2b0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d85d      	bhi.n	800254a <HAL_GPIO_Init+0x12e>
 800248e:	2b12      	cmp	r3, #18
 8002490:	d82a      	bhi.n	80024e8 <HAL_GPIO_Init+0xcc>
 8002492:	2b12      	cmp	r3, #18
 8002494:	d859      	bhi.n	800254a <HAL_GPIO_Init+0x12e>
 8002496:	a201      	add	r2, pc, #4	@ (adr r2, 800249c <HAL_GPIO_Init+0x80>)
 8002498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249c:	08002517 	.word	0x08002517
 80024a0:	080024f1 	.word	0x080024f1
 80024a4:	08002503 	.word	0x08002503
 80024a8:	08002545 	.word	0x08002545
 80024ac:	0800254b 	.word	0x0800254b
 80024b0:	0800254b 	.word	0x0800254b
 80024b4:	0800254b 	.word	0x0800254b
 80024b8:	0800254b 	.word	0x0800254b
 80024bc:	0800254b 	.word	0x0800254b
 80024c0:	0800254b 	.word	0x0800254b
 80024c4:	0800254b 	.word	0x0800254b
 80024c8:	0800254b 	.word	0x0800254b
 80024cc:	0800254b 	.word	0x0800254b
 80024d0:	0800254b 	.word	0x0800254b
 80024d4:	0800254b 	.word	0x0800254b
 80024d8:	0800254b 	.word	0x0800254b
 80024dc:	0800254b 	.word	0x0800254b
 80024e0:	080024f9 	.word	0x080024f9
 80024e4:	0800250d 	.word	0x0800250d
 80024e8:	4a79      	ldr	r2, [pc, #484]	@ (80026d0 <HAL_GPIO_Init+0x2b4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d013      	beq.n	8002516 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024ee:	e02c      	b.n	800254a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	623b      	str	r3, [r7, #32]
          break;
 80024f6:	e029      	b.n	800254c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	3304      	adds	r3, #4
 80024fe:	623b      	str	r3, [r7, #32]
          break;
 8002500:	e024      	b.n	800254c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	3308      	adds	r3, #8
 8002508:	623b      	str	r3, [r7, #32]
          break;
 800250a:	e01f      	b.n	800254c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	330c      	adds	r3, #12
 8002512:	623b      	str	r3, [r7, #32]
          break;
 8002514:	e01a      	b.n	800254c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d102      	bne.n	8002524 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800251e:	2304      	movs	r3, #4
 8002520:	623b      	str	r3, [r7, #32]
          break;
 8002522:	e013      	b.n	800254c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d105      	bne.n	8002538 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800252c:	2308      	movs	r3, #8
 800252e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69fa      	ldr	r2, [r7, #28]
 8002534:	611a      	str	r2, [r3, #16]
          break;
 8002536:	e009      	b.n	800254c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002538:	2308      	movs	r3, #8
 800253a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69fa      	ldr	r2, [r7, #28]
 8002540:	615a      	str	r2, [r3, #20]
          break;
 8002542:	e003      	b.n	800254c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002544:	2300      	movs	r3, #0
 8002546:	623b      	str	r3, [r7, #32]
          break;
 8002548:	e000      	b.n	800254c <HAL_GPIO_Init+0x130>
          break;
 800254a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	2bff      	cmp	r3, #255	@ 0xff
 8002550:	d801      	bhi.n	8002556 <HAL_GPIO_Init+0x13a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	e001      	b.n	800255a <HAL_GPIO_Init+0x13e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3304      	adds	r3, #4
 800255a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	2bff      	cmp	r3, #255	@ 0xff
 8002560:	d802      	bhi.n	8002568 <HAL_GPIO_Init+0x14c>
 8002562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	e002      	b.n	800256e <HAL_GPIO_Init+0x152>
 8002568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256a:	3b08      	subs	r3, #8
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	210f      	movs	r1, #15
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	fa01 f303 	lsl.w	r3, r1, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	401a      	ands	r2, r3
 8002580:	6a39      	ldr	r1, [r7, #32]
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	fa01 f303 	lsl.w	r3, r1, r3
 8002588:	431a      	orrs	r2, r3
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 80b1 	beq.w	80026fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800259c:	4b4d      	ldr	r3, [pc, #308]	@ (80026d4 <HAL_GPIO_Init+0x2b8>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	4a4c      	ldr	r2, [pc, #304]	@ (80026d4 <HAL_GPIO_Init+0x2b8>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	6193      	str	r3, [r2, #24]
 80025a8:	4b4a      	ldr	r3, [pc, #296]	@ (80026d4 <HAL_GPIO_Init+0x2b8>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025b4:	4a48      	ldr	r2, [pc, #288]	@ (80026d8 <HAL_GPIO_Init+0x2bc>)
 80025b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b8:	089b      	lsrs	r3, r3, #2
 80025ba:	3302      	adds	r3, #2
 80025bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	220f      	movs	r2, #15
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	4013      	ands	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a40      	ldr	r2, [pc, #256]	@ (80026dc <HAL_GPIO_Init+0x2c0>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d013      	beq.n	8002608 <HAL_GPIO_Init+0x1ec>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a3f      	ldr	r2, [pc, #252]	@ (80026e0 <HAL_GPIO_Init+0x2c4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00d      	beq.n	8002604 <HAL_GPIO_Init+0x1e8>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a3e      	ldr	r2, [pc, #248]	@ (80026e4 <HAL_GPIO_Init+0x2c8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d007      	beq.n	8002600 <HAL_GPIO_Init+0x1e4>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a3d      	ldr	r2, [pc, #244]	@ (80026e8 <HAL_GPIO_Init+0x2cc>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d101      	bne.n	80025fc <HAL_GPIO_Init+0x1e0>
 80025f8:	2303      	movs	r3, #3
 80025fa:	e006      	b.n	800260a <HAL_GPIO_Init+0x1ee>
 80025fc:	2304      	movs	r3, #4
 80025fe:	e004      	b.n	800260a <HAL_GPIO_Init+0x1ee>
 8002600:	2302      	movs	r3, #2
 8002602:	e002      	b.n	800260a <HAL_GPIO_Init+0x1ee>
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <HAL_GPIO_Init+0x1ee>
 8002608:	2300      	movs	r3, #0
 800260a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800260c:	f002 0203 	and.w	r2, r2, #3
 8002610:	0092      	lsls	r2, r2, #2
 8002612:	4093      	lsls	r3, r2
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	4313      	orrs	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800261a:	492f      	ldr	r1, [pc, #188]	@ (80026d8 <HAL_GPIO_Init+0x2bc>)
 800261c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261e:	089b      	lsrs	r3, r3, #2
 8002620:	3302      	adds	r3, #2
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d006      	beq.n	8002642 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002634:	4b2d      	ldr	r3, [pc, #180]	@ (80026ec <HAL_GPIO_Init+0x2d0>)
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	492c      	ldr	r1, [pc, #176]	@ (80026ec <HAL_GPIO_Init+0x2d0>)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	608b      	str	r3, [r1, #8]
 8002640:	e006      	b.n	8002650 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002642:	4b2a      	ldr	r3, [pc, #168]	@ (80026ec <HAL_GPIO_Init+0x2d0>)
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	43db      	mvns	r3, r3
 800264a:	4928      	ldr	r1, [pc, #160]	@ (80026ec <HAL_GPIO_Init+0x2d0>)
 800264c:	4013      	ands	r3, r2
 800264e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d006      	beq.n	800266a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800265c:	4b23      	ldr	r3, [pc, #140]	@ (80026ec <HAL_GPIO_Init+0x2d0>)
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	4922      	ldr	r1, [pc, #136]	@ (80026ec <HAL_GPIO_Init+0x2d0>)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	4313      	orrs	r3, r2
 8002666:	60cb      	str	r3, [r1, #12]
 8002668:	e006      	b.n	8002678 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800266a:	4b20      	ldr	r3, [pc, #128]	@ (80026ec <HAL_GPIO_Init+0x2d0>)
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	43db      	mvns	r3, r3
 8002672:	491e      	ldr	r1, [pc, #120]	@ (80026ec <HAL_GPIO_Init+0x2d0>)
 8002674:	4013      	ands	r3, r2
 8002676:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d006      	beq.n	8002692 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002684:	4b19      	ldr	r3, [pc, #100]	@ (80026ec <HAL_GPIO_Init+0x2d0>)
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	4918      	ldr	r1, [pc, #96]	@ (80026ec <HAL_GPIO_Init+0x2d0>)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]
 8002690:	e006      	b.n	80026a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002692:	4b16      	ldr	r3, [pc, #88]	@ (80026ec <HAL_GPIO_Init+0x2d0>)
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	43db      	mvns	r3, r3
 800269a:	4914      	ldr	r1, [pc, #80]	@ (80026ec <HAL_GPIO_Init+0x2d0>)
 800269c:	4013      	ands	r3, r2
 800269e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d021      	beq.n	80026f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026ac:	4b0f      	ldr	r3, [pc, #60]	@ (80026ec <HAL_GPIO_Init+0x2d0>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	490e      	ldr	r1, [pc, #56]	@ (80026ec <HAL_GPIO_Init+0x2d0>)
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	600b      	str	r3, [r1, #0]
 80026b8:	e021      	b.n	80026fe <HAL_GPIO_Init+0x2e2>
 80026ba:	bf00      	nop
 80026bc:	10320000 	.word	0x10320000
 80026c0:	10310000 	.word	0x10310000
 80026c4:	10220000 	.word	0x10220000
 80026c8:	10210000 	.word	0x10210000
 80026cc:	10120000 	.word	0x10120000
 80026d0:	10110000 	.word	0x10110000
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40010000 	.word	0x40010000
 80026dc:	40010800 	.word	0x40010800
 80026e0:	40010c00 	.word	0x40010c00
 80026e4:	40011000 	.word	0x40011000
 80026e8:	40011400 	.word	0x40011400
 80026ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002720 <HAL_GPIO_Init+0x304>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	4909      	ldr	r1, [pc, #36]	@ (8002720 <HAL_GPIO_Init+0x304>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80026fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002700:	3301      	adds	r3, #1
 8002702:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270a:	fa22 f303 	lsr.w	r3, r2, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	f47f ae8e 	bne.w	8002430 <HAL_GPIO_Init+0x14>
  }
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop
 8002718:	372c      	adds	r7, #44	@ 0x2c
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr
 8002720:	40010400 	.word	0x40010400

08002724 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	887b      	ldrh	r3, [r7, #2]
 8002736:	4013      	ands	r3, r2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
 8002740:	e001      	b.n	8002746 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002742:	2300      	movs	r3, #0
 8002744:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002746:	7bfb      	ldrb	r3, [r7, #15]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr

08002752 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	460b      	mov	r3, r1
 800275c:	807b      	strh	r3, [r7, #2]
 800275e:	4613      	mov	r3, r2
 8002760:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002762:	787b      	ldrb	r3, [r7, #1]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002768:	887a      	ldrh	r2, [r7, #2]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800276e:	e003      	b.n	8002778 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002770:	887b      	ldrh	r3, [r7, #2]
 8002772:	041a      	lsls	r2, r3, #16
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	611a      	str	r2, [r3, #16]
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr
	...

08002784 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e12b      	b.n	80029ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff fb54 	bl	8001e58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2224      	movs	r2, #36	@ 0x24
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0201 	bic.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027e8:	f001 f960 	bl	8003aac <HAL_RCC_GetPCLK1Freq>
 80027ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	4a81      	ldr	r2, [pc, #516]	@ (80029f8 <HAL_I2C_Init+0x274>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d807      	bhi.n	8002808 <HAL_I2C_Init+0x84>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4a80      	ldr	r2, [pc, #512]	@ (80029fc <HAL_I2C_Init+0x278>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	bf94      	ite	ls
 8002800:	2301      	movls	r3, #1
 8002802:	2300      	movhi	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	e006      	b.n	8002816 <HAL_I2C_Init+0x92>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4a7d      	ldr	r2, [pc, #500]	@ (8002a00 <HAL_I2C_Init+0x27c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	bf94      	ite	ls
 8002810:	2301      	movls	r3, #1
 8002812:	2300      	movhi	r3, #0
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e0e7      	b.n	80029ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4a78      	ldr	r2, [pc, #480]	@ (8002a04 <HAL_I2C_Init+0x280>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	0c9b      	lsrs	r3, r3, #18
 8002828:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	430a      	orrs	r2, r1
 800283c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4a6a      	ldr	r2, [pc, #424]	@ (80029f8 <HAL_I2C_Init+0x274>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d802      	bhi.n	8002858 <HAL_I2C_Init+0xd4>
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	3301      	adds	r3, #1
 8002856:	e009      	b.n	800286c <HAL_I2C_Init+0xe8>
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800285e:	fb02 f303 	mul.w	r3, r2, r3
 8002862:	4a69      	ldr	r2, [pc, #420]	@ (8002a08 <HAL_I2C_Init+0x284>)
 8002864:	fba2 2303 	umull	r2, r3, r2, r3
 8002868:	099b      	lsrs	r3, r3, #6
 800286a:	3301      	adds	r3, #1
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	430b      	orrs	r3, r1
 8002872:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800287e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	495c      	ldr	r1, [pc, #368]	@ (80029f8 <HAL_I2C_Init+0x274>)
 8002888:	428b      	cmp	r3, r1
 800288a:	d819      	bhi.n	80028c0 <HAL_I2C_Init+0x13c>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1e59      	subs	r1, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	fbb1 f3f3 	udiv	r3, r1, r3
 800289a:	1c59      	adds	r1, r3, #1
 800289c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80028a0:	400b      	ands	r3, r1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00a      	beq.n	80028bc <HAL_I2C_Init+0x138>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1e59      	subs	r1, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80028b4:	3301      	adds	r3, #1
 80028b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ba:	e051      	b.n	8002960 <HAL_I2C_Init+0x1dc>
 80028bc:	2304      	movs	r3, #4
 80028be:	e04f      	b.n	8002960 <HAL_I2C_Init+0x1dc>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d111      	bne.n	80028ec <HAL_I2C_Init+0x168>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	1e58      	subs	r0, r3, #1
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6859      	ldr	r1, [r3, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	440b      	add	r3, r1
 80028d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028da:	3301      	adds	r3, #1
 80028dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	bf0c      	ite	eq
 80028e4:	2301      	moveq	r3, #1
 80028e6:	2300      	movne	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	e012      	b.n	8002912 <HAL_I2C_Init+0x18e>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1e58      	subs	r0, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6859      	ldr	r1, [r3, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	0099      	lsls	r1, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002902:	3301      	adds	r3, #1
 8002904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002908:	2b00      	cmp	r3, #0
 800290a:	bf0c      	ite	eq
 800290c:	2301      	moveq	r3, #1
 800290e:	2300      	movne	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_I2C_Init+0x196>
 8002916:	2301      	movs	r3, #1
 8002918:	e022      	b.n	8002960 <HAL_I2C_Init+0x1dc>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10e      	bne.n	8002940 <HAL_I2C_Init+0x1bc>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	1e58      	subs	r0, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6859      	ldr	r1, [r3, #4]
 800292a:	460b      	mov	r3, r1
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	440b      	add	r3, r1
 8002930:	fbb0 f3f3 	udiv	r3, r0, r3
 8002934:	3301      	adds	r3, #1
 8002936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800293e:	e00f      	b.n	8002960 <HAL_I2C_Init+0x1dc>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1e58      	subs	r0, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6859      	ldr	r1, [r3, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	0099      	lsls	r1, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	fbb0 f3f3 	udiv	r3, r0, r3
 8002956:	3301      	adds	r3, #1
 8002958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	6809      	ldr	r1, [r1, #0]
 8002964:	4313      	orrs	r3, r2
 8002966:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69da      	ldr	r2, [r3, #28]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800298e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6911      	ldr	r1, [r2, #16]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	68d2      	ldr	r2, [r2, #12]
 800299a:	4311      	orrs	r1, r2
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	430b      	orrs	r3, r1
 80029a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	000186a0 	.word	0x000186a0
 80029fc:	001e847f 	.word	0x001e847f
 8002a00:	003d08ff 	.word	0x003d08ff
 8002a04:	431bde83 	.word	0x431bde83
 8002a08:	10624dd3 	.word	0x10624dd3

08002a0c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	461a      	mov	r2, r3
 8002a18:	460b      	mov	r3, r1
 8002a1a:	817b      	strh	r3, [r7, #10]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a20:	f7ff fbea 	bl	80021f8 <HAL_GetTick>
 8002a24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b20      	cmp	r3, #32
 8002a30:	f040 80e0 	bne.w	8002bf4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	2319      	movs	r3, #25
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	4970      	ldr	r1, [pc, #448]	@ (8002c00 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 fa92 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e0d3      	b.n	8002bf6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_I2C_Master_Transmit+0x50>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e0cc      	b.n	8002bf6 <HAL_I2C_Master_Transmit+0x1ea>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d007      	beq.n	8002a82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 0201 	orr.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2221      	movs	r2, #33	@ 0x21
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2210      	movs	r2, #16
 8002a9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	893a      	ldrh	r2, [r7, #8]
 8002ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4a50      	ldr	r2, [pc, #320]	@ (8002c04 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ac2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ac4:	8979      	ldrh	r1, [r7, #10]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	6a3a      	ldr	r2, [r7, #32]
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f9ca 	bl	8002e64 <I2C_MasterRequestWrite>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e08d      	b.n	8002bf6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ada:	2300      	movs	r3, #0
 8002adc:	613b      	str	r3, [r7, #16]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002af0:	e066      	b.n	8002bc0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	6a39      	ldr	r1, [r7, #32]
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fb50 	bl	800319c <I2C_WaitOnTXEFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00d      	beq.n	8002b1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d107      	bne.n	8002b1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e06b      	b.n	8002bf6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b22:	781a      	ldrb	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d11b      	bne.n	8002b94 <HAL_I2C_Master_Transmit+0x188>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d017      	beq.n	8002b94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b68:	781a      	ldrb	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	6a39      	ldr	r1, [r7, #32]
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 fb47 	bl	800322c <I2C_WaitOnBTFFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00d      	beq.n	8002bc0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d107      	bne.n	8002bbc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e01a      	b.n	8002bf6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d194      	bne.n	8002af2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	e000      	b.n	8002bf6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002bf4:	2302      	movs	r3, #2
  }
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	00100002 	.word	0x00100002
 8002c04:	ffff0000 	.word	0xffff0000

08002c08 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08a      	sub	sp, #40	@ 0x28
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	607a      	str	r2, [r7, #4]
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	460b      	mov	r3, r1
 8002c16:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002c18:	f7ff faee 	bl	80021f8 <HAL_GetTick>
 8002c1c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b20      	cmp	r3, #32
 8002c2c:	f040 8111 	bne.w	8002e52 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	2319      	movs	r3, #25
 8002c36:	2201      	movs	r2, #1
 8002c38:	4988      	ldr	r1, [pc, #544]	@ (8002e5c <HAL_I2C_IsDeviceReady+0x254>)
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 f994 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002c46:	2302      	movs	r3, #2
 8002c48:	e104      	b.n	8002e54 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_I2C_IsDeviceReady+0x50>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e0fd      	b.n	8002e54 <HAL_I2C_IsDeviceReady+0x24c>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d007      	beq.n	8002c7e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0201 	orr.w	r2, r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2224      	movs	r2, #36	@ 0x24
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4a70      	ldr	r2, [pc, #448]	@ (8002e60 <HAL_I2C_IsDeviceReady+0x258>)
 8002ca0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cb0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f952 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00d      	beq.n	8002ce6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cd8:	d103      	bne.n	8002ce2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ce0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e0b6      	b.n	8002e54 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ce6:	897b      	ldrh	r3, [r7, #10]
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002cf4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002cf6:	f7ff fa7f 	bl	80021f8 <HAL_GetTick>
 8002cfa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	bf0c      	ite	eq
 8002d0a:	2301      	moveq	r3, #1
 8002d0c:	2300      	movne	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d20:	bf0c      	ite	eq
 8002d22:	2301      	moveq	r3, #1
 8002d24:	2300      	movne	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d2a:	e025      	b.n	8002d78 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d2c:	f7ff fa64 	bl	80021f8 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d302      	bcc.n	8002d42 <HAL_I2C_IsDeviceReady+0x13a>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d103      	bne.n	8002d4a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	22a0      	movs	r2, #160	@ 0xa0
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d6e:	bf0c      	ite	eq
 8002d70:	2301      	moveq	r3, #1
 8002d72:	2300      	movne	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d82:	d005      	beq.n	8002d90 <HAL_I2C_IsDeviceReady+0x188>
 8002d84:	7dfb      	ldrb	r3, [r7, #23]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d102      	bne.n	8002d90 <HAL_I2C_IsDeviceReady+0x188>
 8002d8a:	7dbb      	ldrb	r3, [r7, #22]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0cd      	beq.n	8002d2c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d129      	bne.n	8002dfa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002db4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	2319      	movs	r3, #25
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	4921      	ldr	r1, [pc, #132]	@ (8002e5c <HAL_I2C_IsDeviceReady+0x254>)
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f8c6 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e036      	b.n	8002e54 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	e02c      	b.n	8002e54 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e08:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e12:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	2319      	movs	r3, #25
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	490f      	ldr	r1, [pc, #60]	@ (8002e5c <HAL_I2C_IsDeviceReady+0x254>)
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f8a2 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e012      	b.n	8002e54 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	3301      	adds	r3, #1
 8002e32:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	f4ff af32 	bcc.w	8002ca2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002e52:	2302      	movs	r3, #2
  }
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3720      	adds	r7, #32
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	00100002 	.word	0x00100002
 8002e60:	ffff0000 	.word	0xffff0000

08002e64 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	603b      	str	r3, [r7, #0]
 8002e70:	460b      	mov	r3, r1
 8002e72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e78:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d006      	beq.n	8002e8e <I2C_MasterRequestWrite+0x2a>
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d003      	beq.n	8002e8e <I2C_MasterRequestWrite+0x2a>
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e8c:	d108      	bne.n	8002ea0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	e00b      	b.n	8002eb8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea4:	2b12      	cmp	r3, #18
 8002ea6:	d107      	bne.n	8002eb8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f84f 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00d      	beq.n	8002eec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ede:	d103      	bne.n	8002ee8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ee6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e035      	b.n	8002f58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ef4:	d108      	bne.n	8002f08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ef6:	897b      	ldrh	r3, [r7, #10]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f04:	611a      	str	r2, [r3, #16]
 8002f06:	e01b      	b.n	8002f40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f08:	897b      	ldrh	r3, [r7, #10]
 8002f0a:	11db      	asrs	r3, r3, #7
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	f003 0306 	and.w	r3, r3, #6
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	f063 030f 	orn	r3, r3, #15
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	490e      	ldr	r1, [pc, #56]	@ (8002f60 <I2C_MasterRequestWrite+0xfc>)
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 f898 	bl	800305c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e010      	b.n	8002f58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f36:	897b      	ldrh	r3, [r7, #10]
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4907      	ldr	r1, [pc, #28]	@ (8002f64 <I2C_MasterRequestWrite+0x100>)
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 f888 	bl	800305c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	00010008 	.word	0x00010008
 8002f64:	00010002 	.word	0x00010002

08002f68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	4613      	mov	r3, r2
 8002f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f78:	e048      	b.n	800300c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f80:	d044      	beq.n	800300c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f82:	f7ff f939 	bl	80021f8 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d302      	bcc.n	8002f98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d139      	bne.n	800300c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	0c1b      	lsrs	r3, r3, #16
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d10d      	bne.n	8002fbe <I2C_WaitOnFlagUntilTimeout+0x56>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	43da      	mvns	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	4013      	ands	r3, r2
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	e00c      	b.n	8002fd8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	43da      	mvns	r2, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	bf0c      	ite	eq
 8002fd0:	2301      	moveq	r3, #1
 8002fd2:	2300      	movne	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d116      	bne.n	800300c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff8:	f043 0220 	orr.w	r2, r3, #32
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e023      	b.n	8003054 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	0c1b      	lsrs	r3, r3, #16
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b01      	cmp	r3, #1
 8003014:	d10d      	bne.n	8003032 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	43da      	mvns	r2, r3
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	4013      	ands	r3, r2
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	bf0c      	ite	eq
 8003028:	2301      	moveq	r3, #1
 800302a:	2300      	movne	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	461a      	mov	r2, r3
 8003030:	e00c      	b.n	800304c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	43da      	mvns	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	4013      	ands	r3, r2
 800303e:	b29b      	uxth	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	bf0c      	ite	eq
 8003044:	2301      	moveq	r3, #1
 8003046:	2300      	movne	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	461a      	mov	r2, r3
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	429a      	cmp	r2, r3
 8003050:	d093      	beq.n	8002f7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800306a:	e071      	b.n	8003150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800307a:	d123      	bne.n	80030c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800308a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003094:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2220      	movs	r2, #32
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b0:	f043 0204 	orr.w	r2, r3, #4
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e067      	b.n	8003194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ca:	d041      	beq.n	8003150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030cc:	f7ff f894 	bl	80021f8 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d302      	bcc.n	80030e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d136      	bne.n	8003150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	0c1b      	lsrs	r3, r3, #16
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d10c      	bne.n	8003106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	43da      	mvns	r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4013      	ands	r3, r2
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	bf14      	ite	ne
 80030fe:	2301      	movne	r3, #1
 8003100:	2300      	moveq	r3, #0
 8003102:	b2db      	uxtb	r3, r3
 8003104:	e00b      	b.n	800311e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	43da      	mvns	r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	4013      	ands	r3, r2
 8003112:	b29b      	uxth	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	bf14      	ite	ne
 8003118:	2301      	movne	r3, #1
 800311a:	2300      	moveq	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d016      	beq.n	8003150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	f043 0220 	orr.w	r2, r3, #32
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e021      	b.n	8003194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	0c1b      	lsrs	r3, r3, #16
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b01      	cmp	r3, #1
 8003158:	d10c      	bne.n	8003174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	43da      	mvns	r2, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	4013      	ands	r3, r2
 8003166:	b29b      	uxth	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	bf14      	ite	ne
 800316c:	2301      	movne	r3, #1
 800316e:	2300      	moveq	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	e00b      	b.n	800318c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	43da      	mvns	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4013      	ands	r3, r2
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	bf14      	ite	ne
 8003186:	2301      	movne	r3, #1
 8003188:	2300      	moveq	r3, #0
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	f47f af6d 	bne.w	800306c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031a8:	e034      	b.n	8003214 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f886 	bl	80032bc <I2C_IsAcknowledgeFailed>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e034      	b.n	8003224 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c0:	d028      	beq.n	8003214 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c2:	f7ff f819 	bl	80021f8 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d302      	bcc.n	80031d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d11d      	bne.n	8003214 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e2:	2b80      	cmp	r3, #128	@ 0x80
 80031e4:	d016      	beq.n	8003214 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003200:	f043 0220 	orr.w	r2, r3, #32
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e007      	b.n	8003224 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800321e:	2b80      	cmp	r3, #128	@ 0x80
 8003220:	d1c3      	bne.n	80031aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003238:	e034      	b.n	80032a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 f83e 	bl	80032bc <I2C_IsAcknowledgeFailed>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e034      	b.n	80032b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003250:	d028      	beq.n	80032a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003252:	f7fe ffd1 	bl	80021f8 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	429a      	cmp	r2, r3
 8003260:	d302      	bcc.n	8003268 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d11d      	bne.n	80032a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b04      	cmp	r3, #4
 8003274:	d016      	beq.n	80032a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003290:	f043 0220 	orr.w	r2, r3, #32
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e007      	b.n	80032b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d1c3      	bne.n	800323a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032d2:	d11b      	bne.n	800330c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f8:	f043 0204 	orr.w	r2, r3, #4
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e000      	b.n	800330e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e272      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 8087 	beq.w	8003446 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003338:	4b92      	ldr	r3, [pc, #584]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 030c 	and.w	r3, r3, #12
 8003340:	2b04      	cmp	r3, #4
 8003342:	d00c      	beq.n	800335e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003344:	4b8f      	ldr	r3, [pc, #572]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 030c 	and.w	r3, r3, #12
 800334c:	2b08      	cmp	r3, #8
 800334e:	d112      	bne.n	8003376 <HAL_RCC_OscConfig+0x5e>
 8003350:	4b8c      	ldr	r3, [pc, #560]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800335c:	d10b      	bne.n	8003376 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335e:	4b89      	ldr	r3, [pc, #548]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d06c      	beq.n	8003444 <HAL_RCC_OscConfig+0x12c>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d168      	bne.n	8003444 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e24c      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x76>
 8003380:	4b80      	ldr	r3, [pc, #512]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a7f      	ldr	r2, [pc, #508]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	e02e      	b.n	80033ec <HAL_RCC_OscConfig+0xd4>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x98>
 8003396:	4b7b      	ldr	r3, [pc, #492]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a7a      	ldr	r2, [pc, #488]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 800339c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	4b78      	ldr	r3, [pc, #480]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a77      	ldr	r2, [pc, #476]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e01d      	b.n	80033ec <HAL_RCC_OscConfig+0xd4>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCC_OscConfig+0xbc>
 80033ba:	4b72      	ldr	r3, [pc, #456]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a71      	ldr	r2, [pc, #452]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	4b6f      	ldr	r3, [pc, #444]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a6e      	ldr	r2, [pc, #440]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	e00b      	b.n	80033ec <HAL_RCC_OscConfig+0xd4>
 80033d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a6a      	ldr	r2, [pc, #424]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	4b68      	ldr	r3, [pc, #416]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a67      	ldr	r2, [pc, #412]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d013      	beq.n	800341c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f4:	f7fe ff00 	bl	80021f8 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033fc:	f7fe fefc 	bl	80021f8 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b64      	cmp	r3, #100	@ 0x64
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e200      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340e:	4b5d      	ldr	r3, [pc, #372]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0xe4>
 800341a:	e014      	b.n	8003446 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341c:	f7fe feec 	bl	80021f8 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003424:	f7fe fee8 	bl	80021f8 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	@ 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e1ec      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003436:	4b53      	ldr	r3, [pc, #332]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x10c>
 8003442:	e000      	b.n	8003446 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d063      	beq.n	800351a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003452:	4b4c      	ldr	r3, [pc, #304]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00b      	beq.n	8003476 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800345e:	4b49      	ldr	r3, [pc, #292]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	2b08      	cmp	r3, #8
 8003468:	d11c      	bne.n	80034a4 <HAL_RCC_OscConfig+0x18c>
 800346a:	4b46      	ldr	r3, [pc, #280]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d116      	bne.n	80034a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003476:	4b43      	ldr	r3, [pc, #268]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d005      	beq.n	800348e <HAL_RCC_OscConfig+0x176>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d001      	beq.n	800348e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e1c0      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348e:	4b3d      	ldr	r3, [pc, #244]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4939      	ldr	r1, [pc, #228]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a2:	e03a      	b.n	800351a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d020      	beq.n	80034ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ac:	4b36      	ldr	r3, [pc, #216]	@ (8003588 <HAL_RCC_OscConfig+0x270>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b2:	f7fe fea1 	bl	80021f8 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ba:	f7fe fe9d 	bl	80021f8 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e1a1      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d8:	4b2a      	ldr	r3, [pc, #168]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	4927      	ldr	r1, [pc, #156]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	600b      	str	r3, [r1, #0]
 80034ec:	e015      	b.n	800351a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ee:	4b26      	ldr	r3, [pc, #152]	@ (8003588 <HAL_RCC_OscConfig+0x270>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7fe fe80 	bl	80021f8 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034fc:	f7fe fe7c 	bl	80021f8 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e180      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350e:	4b1d      	ldr	r3, [pc, #116]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d03a      	beq.n	800359c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d019      	beq.n	8003562 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800352e:	4b17      	ldr	r3, [pc, #92]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 8003530:	2201      	movs	r2, #1
 8003532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003534:	f7fe fe60 	bl	80021f8 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800353c:	f7fe fe5c 	bl	80021f8 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e160      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354e:	4b0d      	ldr	r3, [pc, #52]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f0      	beq.n	800353c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800355a:	2001      	movs	r0, #1
 800355c:	f000 face 	bl	8003afc <RCC_Delay>
 8003560:	e01c      	b.n	800359c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003562:	4b0a      	ldr	r3, [pc, #40]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003568:	f7fe fe46 	bl	80021f8 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800356e:	e00f      	b.n	8003590 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003570:	f7fe fe42 	bl	80021f8 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d908      	bls.n	8003590 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e146      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000
 8003588:	42420000 	.word	0x42420000
 800358c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003590:	4b92      	ldr	r3, [pc, #584]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1e9      	bne.n	8003570 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 80a6 	beq.w	80036f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035aa:	2300      	movs	r3, #0
 80035ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ae:	4b8b      	ldr	r3, [pc, #556]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10d      	bne.n	80035d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ba:	4b88      	ldr	r3, [pc, #544]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	4a87      	ldr	r2, [pc, #540]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80035c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035c4:	61d3      	str	r3, [r2, #28]
 80035c6:	4b85      	ldr	r3, [pc, #532]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d2:	2301      	movs	r3, #1
 80035d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d6:	4b82      	ldr	r3, [pc, #520]	@ (80037e0 <HAL_RCC_OscConfig+0x4c8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d118      	bne.n	8003614 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e2:	4b7f      	ldr	r3, [pc, #508]	@ (80037e0 <HAL_RCC_OscConfig+0x4c8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a7e      	ldr	r2, [pc, #504]	@ (80037e0 <HAL_RCC_OscConfig+0x4c8>)
 80035e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ee:	f7fe fe03 	bl	80021f8 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f6:	f7fe fdff 	bl	80021f8 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b64      	cmp	r3, #100	@ 0x64
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e103      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003608:	4b75      	ldr	r3, [pc, #468]	@ (80037e0 <HAL_RCC_OscConfig+0x4c8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d106      	bne.n	800362a <HAL_RCC_OscConfig+0x312>
 800361c:	4b6f      	ldr	r3, [pc, #444]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	4a6e      	ldr	r2, [pc, #440]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003622:	f043 0301 	orr.w	r3, r3, #1
 8003626:	6213      	str	r3, [r2, #32]
 8003628:	e02d      	b.n	8003686 <HAL_RCC_OscConfig+0x36e>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10c      	bne.n	800364c <HAL_RCC_OscConfig+0x334>
 8003632:	4b6a      	ldr	r3, [pc, #424]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	4a69      	ldr	r2, [pc, #420]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	6213      	str	r3, [r2, #32]
 800363e:	4b67      	ldr	r3, [pc, #412]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	4a66      	ldr	r2, [pc, #408]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003644:	f023 0304 	bic.w	r3, r3, #4
 8003648:	6213      	str	r3, [r2, #32]
 800364a:	e01c      	b.n	8003686 <HAL_RCC_OscConfig+0x36e>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b05      	cmp	r3, #5
 8003652:	d10c      	bne.n	800366e <HAL_RCC_OscConfig+0x356>
 8003654:	4b61      	ldr	r3, [pc, #388]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	4a60      	ldr	r2, [pc, #384]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 800365a:	f043 0304 	orr.w	r3, r3, #4
 800365e:	6213      	str	r3, [r2, #32]
 8003660:	4b5e      	ldr	r3, [pc, #376]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	4a5d      	ldr	r2, [pc, #372]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	6213      	str	r3, [r2, #32]
 800366c:	e00b      	b.n	8003686 <HAL_RCC_OscConfig+0x36e>
 800366e:	4b5b      	ldr	r3, [pc, #364]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	4a5a      	ldr	r2, [pc, #360]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003674:	f023 0301 	bic.w	r3, r3, #1
 8003678:	6213      	str	r3, [r2, #32]
 800367a:	4b58      	ldr	r3, [pc, #352]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	4a57      	ldr	r2, [pc, #348]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003680:	f023 0304 	bic.w	r3, r3, #4
 8003684:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d015      	beq.n	80036ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800368e:	f7fe fdb3 	bl	80021f8 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003694:	e00a      	b.n	80036ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003696:	f7fe fdaf 	bl	80021f8 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e0b1      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ac:	4b4b      	ldr	r3, [pc, #300]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0ee      	beq.n	8003696 <HAL_RCC_OscConfig+0x37e>
 80036b8:	e014      	b.n	80036e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ba:	f7fe fd9d 	bl	80021f8 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c2:	f7fe fd99 	bl	80021f8 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e09b      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d8:	4b40      	ldr	r3, [pc, #256]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1ee      	bne.n	80036c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036e4:	7dfb      	ldrb	r3, [r7, #23]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d105      	bne.n	80036f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ea:	4b3c      	ldr	r3, [pc, #240]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	4a3b      	ldr	r2, [pc, #236]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80036f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 8087 	beq.w	800380e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003700:	4b36      	ldr	r3, [pc, #216]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 030c 	and.w	r3, r3, #12
 8003708:	2b08      	cmp	r3, #8
 800370a:	d061      	beq.n	80037d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	2b02      	cmp	r3, #2
 8003712:	d146      	bne.n	80037a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003714:	4b33      	ldr	r3, [pc, #204]	@ (80037e4 <HAL_RCC_OscConfig+0x4cc>)
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371a:	f7fe fd6d 	bl	80021f8 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003722:	f7fe fd69 	bl	80021f8 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e06d      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003734:	4b29      	ldr	r3, [pc, #164]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1f0      	bne.n	8003722 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003748:	d108      	bne.n	800375c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800374a:	4b24      	ldr	r3, [pc, #144]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	4921      	ldr	r1, [pc, #132]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003758:	4313      	orrs	r3, r2
 800375a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800375c:	4b1f      	ldr	r3, [pc, #124]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a19      	ldr	r1, [r3, #32]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	430b      	orrs	r3, r1
 800376e:	491b      	ldr	r1, [pc, #108]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003770:	4313      	orrs	r3, r2
 8003772:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003774:	4b1b      	ldr	r3, [pc, #108]	@ (80037e4 <HAL_RCC_OscConfig+0x4cc>)
 8003776:	2201      	movs	r2, #1
 8003778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377a:	f7fe fd3d 	bl	80021f8 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003782:	f7fe fd39 	bl	80021f8 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e03d      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003794:	4b11      	ldr	r3, [pc, #68]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f0      	beq.n	8003782 <HAL_RCC_OscConfig+0x46a>
 80037a0:	e035      	b.n	800380e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a2:	4b10      	ldr	r3, [pc, #64]	@ (80037e4 <HAL_RCC_OscConfig+0x4cc>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a8:	f7fe fd26 	bl	80021f8 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b0:	f7fe fd22 	bl	80021f8 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e026      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c2:	4b06      	ldr	r3, [pc, #24]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x498>
 80037ce:	e01e      	b.n	800380e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d107      	bne.n	80037e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e019      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
 80037dc:	40021000 	.word	0x40021000
 80037e0:	40007000 	.word	0x40007000
 80037e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003818 <HAL_RCC_OscConfig+0x500>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d106      	bne.n	800380a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003806:	429a      	cmp	r2, r3
 8003808:	d001      	beq.n	800380e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40021000 	.word	0x40021000

0800381c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0d0      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003830:	4b6a      	ldr	r3, [pc, #424]	@ (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d910      	bls.n	8003860 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383e:	4b67      	ldr	r3, [pc, #412]	@ (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f023 0207 	bic.w	r2, r3, #7
 8003846:	4965      	ldr	r1, [pc, #404]	@ (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800384e:	4b63      	ldr	r3, [pc, #396]	@ (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d001      	beq.n	8003860 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0b8      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d020      	beq.n	80038ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003878:	4b59      	ldr	r3, [pc, #356]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	4a58      	ldr	r2, [pc, #352]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003882:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003890:	4b53      	ldr	r3, [pc, #332]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4a52      	ldr	r2, [pc, #328]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003896:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800389a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800389c:	4b50      	ldr	r3, [pc, #320]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	494d      	ldr	r1, [pc, #308]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d040      	beq.n	800393c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d107      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c2:	4b47      	ldr	r3, [pc, #284]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d115      	bne.n	80038fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e07f      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d107      	bne.n	80038ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038da:	4b41      	ldr	r3, [pc, #260]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e073      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ea:	4b3d      	ldr	r3, [pc, #244]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e06b      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038fa:	4b39      	ldr	r3, [pc, #228]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f023 0203 	bic.w	r2, r3, #3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	4936      	ldr	r1, [pc, #216]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003908:	4313      	orrs	r3, r2
 800390a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800390c:	f7fe fc74 	bl	80021f8 <HAL_GetTick>
 8003910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003912:	e00a      	b.n	800392a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003914:	f7fe fc70 	bl	80021f8 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003922:	4293      	cmp	r3, r2
 8003924:	d901      	bls.n	800392a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e053      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	4b2d      	ldr	r3, [pc, #180]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f003 020c 	and.w	r2, r3, #12
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	429a      	cmp	r2, r3
 800393a:	d1eb      	bne.n	8003914 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800393c:	4b27      	ldr	r3, [pc, #156]	@ (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d210      	bcs.n	800396c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394a:	4b24      	ldr	r3, [pc, #144]	@ (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 0207 	bic.w	r2, r3, #7
 8003952:	4922      	ldr	r1, [pc, #136]	@ (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	4313      	orrs	r3, r2
 8003958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800395a:	4b20      	ldr	r3, [pc, #128]	@ (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d001      	beq.n	800396c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e032      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d008      	beq.n	800398a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003978:	4b19      	ldr	r3, [pc, #100]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4916      	ldr	r1, [pc, #88]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003986:	4313      	orrs	r3, r2
 8003988:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003996:	4b12      	ldr	r3, [pc, #72]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	490e      	ldr	r1, [pc, #56]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039aa:	f000 f821 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 80039ae:	4602      	mov	r2, r0
 80039b0:	4b0b      	ldr	r3, [pc, #44]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	490a      	ldr	r1, [pc, #40]	@ (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 80039bc:	5ccb      	ldrb	r3, [r1, r3]
 80039be:	fa22 f303 	lsr.w	r3, r2, r3
 80039c2:	4a09      	ldr	r2, [pc, #36]	@ (80039e8 <HAL_RCC_ClockConfig+0x1cc>)
 80039c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039c6:	4b09      	ldr	r3, [pc, #36]	@ (80039ec <HAL_RCC_ClockConfig+0x1d0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fe fbd2 	bl	8002174 <HAL_InitTick>

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40022000 	.word	0x40022000
 80039e0:	40021000 	.word	0x40021000
 80039e4:	08006a7c 	.word	0x08006a7c
 80039e8:	20000010 	.word	0x20000010
 80039ec:	20000014 	.word	0x20000014

080039f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	2300      	movs	r3, #0
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	2300      	movs	r3, #0
 8003a04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 030c 	and.w	r3, r3, #12
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d002      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq+0x30>
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d003      	beq.n	8003a26 <HAL_RCC_GetSysClockFreq+0x36>
 8003a1e:	e027      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a20:	4b19      	ldr	r3, [pc, #100]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a22:	613b      	str	r3, [r7, #16]
      break;
 8003a24:	e027      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	0c9b      	lsrs	r3, r3, #18
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	4a17      	ldr	r2, [pc, #92]	@ (8003a8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a30:	5cd3      	ldrb	r3, [r2, r3]
 8003a32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d010      	beq.n	8003a60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a3e:	4b11      	ldr	r3, [pc, #68]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	0c5b      	lsrs	r3, r3, #17
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	4a11      	ldr	r2, [pc, #68]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a4a:	5cd3      	ldrb	r3, [r2, r3]
 8003a4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a0d      	ldr	r2, [pc, #52]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a52:	fb03 f202 	mul.w	r2, r3, r2
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	e004      	b.n	8003a6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a0c      	ldr	r2, [pc, #48]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a64:	fb02 f303 	mul.w	r3, r2, r3
 8003a68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	613b      	str	r3, [r7, #16]
      break;
 8003a6e:	e002      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a70:	4b05      	ldr	r3, [pc, #20]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a72:	613b      	str	r3, [r7, #16]
      break;
 8003a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a76:	693b      	ldr	r3, [r7, #16]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	371c      	adds	r7, #28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40021000 	.word	0x40021000
 8003a88:	007a1200 	.word	0x007a1200
 8003a8c:	08006a94 	.word	0x08006a94
 8003a90:	08006aa4 	.word	0x08006aa4
 8003a94:	003d0900 	.word	0x003d0900

08003a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a9c:	4b02      	ldr	r3, [pc, #8]	@ (8003aa8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr
 8003aa8:	20000010 	.word	0x20000010

08003aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ab0:	f7ff fff2 	bl	8003a98 <HAL_RCC_GetHCLKFreq>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	4b05      	ldr	r3, [pc, #20]	@ (8003acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	0a1b      	lsrs	r3, r3, #8
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	4903      	ldr	r1, [pc, #12]	@ (8003ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ac2:	5ccb      	ldrb	r3, [r1, r3]
 8003ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	08006a8c 	.word	0x08006a8c

08003ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ad8:	f7ff ffde 	bl	8003a98 <HAL_RCC_GetHCLKFreq>
 8003adc:	4602      	mov	r2, r0
 8003ade:	4b05      	ldr	r3, [pc, #20]	@ (8003af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	0adb      	lsrs	r3, r3, #11
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	4903      	ldr	r1, [pc, #12]	@ (8003af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aea:	5ccb      	ldrb	r3, [r1, r3]
 8003aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40021000 	.word	0x40021000
 8003af8:	08006a8c 	.word	0x08006a8c

08003afc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b04:	4b0a      	ldr	r3, [pc, #40]	@ (8003b30 <RCC_Delay+0x34>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a0a      	ldr	r2, [pc, #40]	@ (8003b34 <RCC_Delay+0x38>)
 8003b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0e:	0a5b      	lsrs	r3, r3, #9
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	fb02 f303 	mul.w	r3, r2, r3
 8003b16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b18:	bf00      	nop
  }
  while (Delay --);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1e5a      	subs	r2, r3, #1
 8003b1e:	60fa      	str	r2, [r7, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1f9      	bne.n	8003b18 <RCC_Delay+0x1c>
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr
 8003b30:	20000010 	.word	0x20000010
 8003b34:	10624dd3 	.word	0x10624dd3

08003b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e041      	b.n	8003bce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fe f9b8 	bl	8001ed4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3304      	adds	r3, #4
 8003b74:	4619      	mov	r1, r3
 8003b76:	4610      	mov	r0, r2
 8003b78:	f000 fafc 	bl	8004174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d001      	beq.n	8003bf0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e032      	b.n	8003c56 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a18      	ldr	r2, [pc, #96]	@ (8003c60 <HAL_TIM_Base_Start+0x88>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00e      	beq.n	8003c20 <HAL_TIM_Base_Start+0x48>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c0a:	d009      	beq.n	8003c20 <HAL_TIM_Base_Start+0x48>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a14      	ldr	r2, [pc, #80]	@ (8003c64 <HAL_TIM_Base_Start+0x8c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d004      	beq.n	8003c20 <HAL_TIM_Base_Start+0x48>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a13      	ldr	r2, [pc, #76]	@ (8003c68 <HAL_TIM_Base_Start+0x90>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d111      	bne.n	8003c44 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b06      	cmp	r3, #6
 8003c30:	d010      	beq.n	8003c54 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f042 0201 	orr.w	r2, r2, #1
 8003c40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c42:	e007      	b.n	8003c54 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0201 	orr.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr
 8003c60:	40012c00 	.word	0x40012c00
 8003c64:	40000400 	.word	0x40000400
 8003c68:	40000800 	.word	0x40000800

08003c6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e041      	b.n	8003d02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d106      	bne.n	8003c98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f839 	bl	8003d0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4610      	mov	r0, r2
 8003cac:	f000 fa62 	bl	8004174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr

08003d1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d109      	bne.n	8003d40 <HAL_TIM_PWM_Start+0x24>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	bf14      	ite	ne
 8003d38:	2301      	movne	r3, #1
 8003d3a:	2300      	moveq	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	e022      	b.n	8003d86 <HAL_TIM_PWM_Start+0x6a>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d109      	bne.n	8003d5a <HAL_TIM_PWM_Start+0x3e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	bf14      	ite	ne
 8003d52:	2301      	movne	r3, #1
 8003d54:	2300      	moveq	r3, #0
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	e015      	b.n	8003d86 <HAL_TIM_PWM_Start+0x6a>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d109      	bne.n	8003d74 <HAL_TIM_PWM_Start+0x58>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	bf14      	ite	ne
 8003d6c:	2301      	movne	r3, #1
 8003d6e:	2300      	moveq	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	e008      	b.n	8003d86 <HAL_TIM_PWM_Start+0x6a>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	bf14      	ite	ne
 8003d80:	2301      	movne	r3, #1
 8003d82:	2300      	moveq	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e05e      	b.n	8003e4c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d104      	bne.n	8003d9e <HAL_TIM_PWM_Start+0x82>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d9c:	e013      	b.n	8003dc6 <HAL_TIM_PWM_Start+0xaa>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d104      	bne.n	8003dae <HAL_TIM_PWM_Start+0x92>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dac:	e00b      	b.n	8003dc6 <HAL_TIM_PWM_Start+0xaa>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d104      	bne.n	8003dbe <HAL_TIM_PWM_Start+0xa2>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003dbc:	e003      	b.n	8003dc6 <HAL_TIM_PWM_Start+0xaa>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	6839      	ldr	r1, [r7, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 fc5c 	bl	800468c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a1e      	ldr	r2, [pc, #120]	@ (8003e54 <HAL_TIM_PWM_Start+0x138>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d107      	bne.n	8003dee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003dec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a18      	ldr	r2, [pc, #96]	@ (8003e54 <HAL_TIM_PWM_Start+0x138>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d00e      	beq.n	8003e16 <HAL_TIM_PWM_Start+0xfa>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e00:	d009      	beq.n	8003e16 <HAL_TIM_PWM_Start+0xfa>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a14      	ldr	r2, [pc, #80]	@ (8003e58 <HAL_TIM_PWM_Start+0x13c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d004      	beq.n	8003e16 <HAL_TIM_PWM_Start+0xfa>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a12      	ldr	r2, [pc, #72]	@ (8003e5c <HAL_TIM_PWM_Start+0x140>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d111      	bne.n	8003e3a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2b06      	cmp	r3, #6
 8003e26:	d010      	beq.n	8003e4a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0201 	orr.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e38:	e007      	b.n	8003e4a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0201 	orr.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40012c00 	.word	0x40012c00
 8003e58:	40000400 	.word	0x40000400
 8003e5c:	40000800 	.word	0x40000800

08003e60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e0ae      	b.n	8003fdc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b0c      	cmp	r3, #12
 8003e8a:	f200 809f 	bhi.w	8003fcc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e94:	08003ec9 	.word	0x08003ec9
 8003e98:	08003fcd 	.word	0x08003fcd
 8003e9c:	08003fcd 	.word	0x08003fcd
 8003ea0:	08003fcd 	.word	0x08003fcd
 8003ea4:	08003f09 	.word	0x08003f09
 8003ea8:	08003fcd 	.word	0x08003fcd
 8003eac:	08003fcd 	.word	0x08003fcd
 8003eb0:	08003fcd 	.word	0x08003fcd
 8003eb4:	08003f4b 	.word	0x08003f4b
 8003eb8:	08003fcd 	.word	0x08003fcd
 8003ebc:	08003fcd 	.word	0x08003fcd
 8003ec0:	08003fcd 	.word	0x08003fcd
 8003ec4:	08003f8b 	.word	0x08003f8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 f9be 	bl	8004250 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699a      	ldr	r2, [r3, #24]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0208 	orr.w	r2, r2, #8
 8003ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699a      	ldr	r2, [r3, #24]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0204 	bic.w	r2, r2, #4
 8003ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6999      	ldr	r1, [r3, #24]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	619a      	str	r2, [r3, #24]
      break;
 8003f06:	e064      	b.n	8003fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68b9      	ldr	r1, [r7, #8]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fa04 	bl	800431c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699a      	ldr	r2, [r3, #24]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699a      	ldr	r2, [r3, #24]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6999      	ldr	r1, [r3, #24]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	021a      	lsls	r2, r3, #8
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	619a      	str	r2, [r3, #24]
      break;
 8003f48:	e043      	b.n	8003fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68b9      	ldr	r1, [r7, #8]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fa4d 	bl	80043f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69da      	ldr	r2, [r3, #28]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f042 0208 	orr.w	r2, r2, #8
 8003f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	69da      	ldr	r2, [r3, #28]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0204 	bic.w	r2, r2, #4
 8003f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	69d9      	ldr	r1, [r3, #28]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	61da      	str	r2, [r3, #28]
      break;
 8003f88:	e023      	b.n	8003fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68b9      	ldr	r1, [r7, #8]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 fa97 	bl	80044c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	69da      	ldr	r2, [r3, #28]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	69da      	ldr	r2, [r3, #28]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69d9      	ldr	r1, [r3, #28]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	021a      	lsls	r2, r3, #8
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	61da      	str	r2, [r3, #28]
      break;
 8003fca:	e002      	b.n	8003fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	75fb      	strb	r3, [r7, #23]
      break;
 8003fd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_TIM_ConfigClockSource+0x1c>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e0b4      	b.n	800416a <HAL_TIM_ConfigClockSource+0x186>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800401e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004026:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004038:	d03e      	beq.n	80040b8 <HAL_TIM_ConfigClockSource+0xd4>
 800403a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800403e:	f200 8087 	bhi.w	8004150 <HAL_TIM_ConfigClockSource+0x16c>
 8004042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004046:	f000 8086 	beq.w	8004156 <HAL_TIM_ConfigClockSource+0x172>
 800404a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800404e:	d87f      	bhi.n	8004150 <HAL_TIM_ConfigClockSource+0x16c>
 8004050:	2b70      	cmp	r3, #112	@ 0x70
 8004052:	d01a      	beq.n	800408a <HAL_TIM_ConfigClockSource+0xa6>
 8004054:	2b70      	cmp	r3, #112	@ 0x70
 8004056:	d87b      	bhi.n	8004150 <HAL_TIM_ConfigClockSource+0x16c>
 8004058:	2b60      	cmp	r3, #96	@ 0x60
 800405a:	d050      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0x11a>
 800405c:	2b60      	cmp	r3, #96	@ 0x60
 800405e:	d877      	bhi.n	8004150 <HAL_TIM_ConfigClockSource+0x16c>
 8004060:	2b50      	cmp	r3, #80	@ 0x50
 8004062:	d03c      	beq.n	80040de <HAL_TIM_ConfigClockSource+0xfa>
 8004064:	2b50      	cmp	r3, #80	@ 0x50
 8004066:	d873      	bhi.n	8004150 <HAL_TIM_ConfigClockSource+0x16c>
 8004068:	2b40      	cmp	r3, #64	@ 0x40
 800406a:	d058      	beq.n	800411e <HAL_TIM_ConfigClockSource+0x13a>
 800406c:	2b40      	cmp	r3, #64	@ 0x40
 800406e:	d86f      	bhi.n	8004150 <HAL_TIM_ConfigClockSource+0x16c>
 8004070:	2b30      	cmp	r3, #48	@ 0x30
 8004072:	d064      	beq.n	800413e <HAL_TIM_ConfigClockSource+0x15a>
 8004074:	2b30      	cmp	r3, #48	@ 0x30
 8004076:	d86b      	bhi.n	8004150 <HAL_TIM_ConfigClockSource+0x16c>
 8004078:	2b20      	cmp	r3, #32
 800407a:	d060      	beq.n	800413e <HAL_TIM_ConfigClockSource+0x15a>
 800407c:	2b20      	cmp	r3, #32
 800407e:	d867      	bhi.n	8004150 <HAL_TIM_ConfigClockSource+0x16c>
 8004080:	2b00      	cmp	r3, #0
 8004082:	d05c      	beq.n	800413e <HAL_TIM_ConfigClockSource+0x15a>
 8004084:	2b10      	cmp	r3, #16
 8004086:	d05a      	beq.n	800413e <HAL_TIM_ConfigClockSource+0x15a>
 8004088:	e062      	b.n	8004150 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800409a:	f000 fad8 	bl	800464e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80040ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	609a      	str	r2, [r3, #8]
      break;
 80040b6:	e04f      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040c8:	f000 fac1 	bl	800464e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689a      	ldr	r2, [r3, #8]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040da:	609a      	str	r2, [r3, #8]
      break;
 80040dc:	e03c      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ea:	461a      	mov	r2, r3
 80040ec:	f000 fa38 	bl	8004560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2150      	movs	r1, #80	@ 0x50
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fa8f 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 80040fc:	e02c      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800410a:	461a      	mov	r2, r3
 800410c:	f000 fa56 	bl	80045bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2160      	movs	r1, #96	@ 0x60
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fa7f 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 800411c:	e01c      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800412a:	461a      	mov	r2, r3
 800412c:	f000 fa18 	bl	8004560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2140      	movs	r1, #64	@ 0x40
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fa6f 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 800413c:	e00c      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4619      	mov	r1, r3
 8004148:	4610      	mov	r0, r2
 800414a:	f000 fa66 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 800414e:	e003      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	73fb      	strb	r3, [r7, #15]
      break;
 8004154:	e000      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004156:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004168:	7bfb      	ldrb	r3, [r7, #15]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a2f      	ldr	r2, [pc, #188]	@ (8004244 <TIM_Base_SetConfig+0xd0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d00b      	beq.n	80041a4 <TIM_Base_SetConfig+0x30>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004192:	d007      	beq.n	80041a4 <TIM_Base_SetConfig+0x30>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a2c      	ldr	r2, [pc, #176]	@ (8004248 <TIM_Base_SetConfig+0xd4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d003      	beq.n	80041a4 <TIM_Base_SetConfig+0x30>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a2b      	ldr	r2, [pc, #172]	@ (800424c <TIM_Base_SetConfig+0xd8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d108      	bne.n	80041b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a22      	ldr	r2, [pc, #136]	@ (8004244 <TIM_Base_SetConfig+0xd0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00b      	beq.n	80041d6 <TIM_Base_SetConfig+0x62>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c4:	d007      	beq.n	80041d6 <TIM_Base_SetConfig+0x62>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a1f      	ldr	r2, [pc, #124]	@ (8004248 <TIM_Base_SetConfig+0xd4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d003      	beq.n	80041d6 <TIM_Base_SetConfig+0x62>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a1e      	ldr	r2, [pc, #120]	@ (800424c <TIM_Base_SetConfig+0xd8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d108      	bne.n	80041e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a0d      	ldr	r2, [pc, #52]	@ (8004244 <TIM_Base_SetConfig+0xd0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d103      	bne.n	800421c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d005      	beq.n	800423a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f023 0201 	bic.w	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	611a      	str	r2, [r3, #16]
  }
}
 800423a:	bf00      	nop
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr
 8004244:	40012c00 	.word	0x40012c00
 8004248:	40000400 	.word	0x40000400
 800424c:	40000800 	.word	0x40000800

08004250 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	f023 0201 	bic.w	r2, r3, #1
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800427e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0303 	bic.w	r3, r3, #3
 8004286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	4313      	orrs	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f023 0302 	bic.w	r3, r3, #2
 8004298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004318 <TIM_OC1_SetConfig+0xc8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d10c      	bne.n	80042c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f023 0308 	bic.w	r3, r3, #8
 80042b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f023 0304 	bic.w	r3, r3, #4
 80042c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a13      	ldr	r2, [pc, #76]	@ (8004318 <TIM_OC1_SetConfig+0xc8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d111      	bne.n	80042f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	621a      	str	r2, [r3, #32]
}
 800430c:	bf00      	nop
 800430e:	371c      	adds	r7, #28
 8004310:	46bd      	mov	sp, r7
 8004312:	bc80      	pop	{r7}
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40012c00 	.word	0x40012c00

0800431c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	f023 0210 	bic.w	r2, r3, #16
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800434a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	021b      	lsls	r3, r3, #8
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f023 0320 	bic.w	r3, r3, #32
 8004366:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	4313      	orrs	r3, r2
 8004372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a1d      	ldr	r2, [pc, #116]	@ (80043ec <TIM_OC2_SetConfig+0xd0>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d10d      	bne.n	8004398 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	4313      	orrs	r3, r2
 800438e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004396:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a14      	ldr	r2, [pc, #80]	@ (80043ec <TIM_OC2_SetConfig+0xd0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d113      	bne.n	80043c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	621a      	str	r2, [r3, #32]
}
 80043e2:	bf00      	nop
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr
 80043ec:	40012c00 	.word	0x40012c00

080043f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800441e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0303 	bic.w	r3, r3, #3
 8004426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	021b      	lsls	r3, r3, #8
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	4313      	orrs	r3, r2
 8004444:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a1d      	ldr	r2, [pc, #116]	@ (80044c0 <TIM_OC3_SetConfig+0xd0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d10d      	bne.n	800446a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	021b      	lsls	r3, r3, #8
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a14      	ldr	r2, [pc, #80]	@ (80044c0 <TIM_OC3_SetConfig+0xd0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d113      	bne.n	800449a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	4313      	orrs	r3, r2
 8004498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	621a      	str	r2, [r3, #32]
}
 80044b4:	bf00      	nop
 80044b6:	371c      	adds	r7, #28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bc80      	pop	{r7}
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40012c00 	.word	0x40012c00

080044c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	021b      	lsls	r3, r3, #8
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4313      	orrs	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800450e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	031b      	lsls	r3, r3, #12
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a0f      	ldr	r2, [pc, #60]	@ (800455c <TIM_OC4_SetConfig+0x98>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d109      	bne.n	8004538 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800452a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	019b      	lsls	r3, r3, #6
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	4313      	orrs	r3, r2
 8004536:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	621a      	str	r2, [r3, #32]
}
 8004552:	bf00      	nop
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr
 800455c:	40012c00 	.word	0x40012c00

08004560 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	f023 0201 	bic.w	r2, r3, #1
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800458a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f023 030a 	bic.w	r3, r3, #10
 800459c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	621a      	str	r2, [r3, #32]
}
 80045b2:	bf00      	nop
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr

080045bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	f023 0210 	bic.w	r2, r3, #16
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	031b      	lsls	r3, r3, #12
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	621a      	str	r2, [r3, #32]
}
 8004610:	bf00      	nop
 8004612:	371c      	adds	r7, #28
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr

0800461a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800461a:	b480      	push	{r7}
 800461c:	b085      	sub	sp, #20
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	f043 0307 	orr.w	r3, r3, #7
 800463c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	609a      	str	r2, [r3, #8]
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr

0800464e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800464e:	b480      	push	{r7}
 8004650:	b087      	sub	sp, #28
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004668:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	021a      	lsls	r2, r3, #8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	431a      	orrs	r2, r3
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	4313      	orrs	r3, r2
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	4313      	orrs	r3, r2
 800467a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	609a      	str	r2, [r3, #8]
}
 8004682:	bf00      	nop
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	bc80      	pop	{r7}
 800468a:	4770      	bx	lr

0800468c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	f003 031f 	and.w	r3, r3, #31
 800469e:	2201      	movs	r2, #1
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a1a      	ldr	r2, [r3, #32]
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	43db      	mvns	r3, r3
 80046ae:	401a      	ands	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a1a      	ldr	r2, [r3, #32]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f003 031f 	and.w	r3, r3, #31
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	fa01 f303 	lsl.w	r3, r1, r3
 80046c4:	431a      	orrs	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	621a      	str	r2, [r3, #32]
}
 80046ca:	bf00      	nop
 80046cc:	371c      	adds	r7, #28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr

080046d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e046      	b.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004712:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	4313      	orrs	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a16      	ldr	r2, [pc, #88]	@ (8004784 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d00e      	beq.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004738:	d009      	beq.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a12      	ldr	r2, [pc, #72]	@ (8004788 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d004      	beq.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a10      	ldr	r2, [pc, #64]	@ (800478c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d10c      	bne.n	8004768 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004754:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	4313      	orrs	r3, r2
 800475e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	bc80      	pop	{r7}
 8004782:	4770      	bx	lr
 8004784:	40012c00 	.word	0x40012c00
 8004788:	40000400 	.word	0x40000400
 800478c:	40000800 	.word	0x40000800

08004790 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e042      	b.n	8004828 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7fd fbec 	bl	8001f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2224      	movs	r2, #36	@ 0x24
 80047c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f971 	bl	8004abc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	695a      	ldr	r2, [r3, #20]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004808:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2220      	movs	r2, #32
 800481c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08a      	sub	sp, #40	@ 0x28
 8004834:	af02      	add	r7, sp, #8
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	4613      	mov	r3, r2
 800483e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b20      	cmp	r3, #32
 800484e:	d175      	bne.n	800493c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <HAL_UART_Transmit+0x2c>
 8004856:	88fb      	ldrh	r3, [r7, #6]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e06e      	b.n	800493e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2221      	movs	r2, #33	@ 0x21
 800486a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800486e:	f7fd fcc3 	bl	80021f8 <HAL_GetTick>
 8004872:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	88fa      	ldrh	r2, [r7, #6]
 8004878:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	88fa      	ldrh	r2, [r7, #6]
 800487e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004888:	d108      	bne.n	800489c <HAL_UART_Transmit+0x6c>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d104      	bne.n	800489c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004892:	2300      	movs	r3, #0
 8004894:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	61bb      	str	r3, [r7, #24]
 800489a:	e003      	b.n	80048a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048a0:	2300      	movs	r3, #0
 80048a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048a4:	e02e      	b.n	8004904 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2200      	movs	r2, #0
 80048ae:	2180      	movs	r1, #128	@ 0x80
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 f848 	bl	8004946 <UART_WaitOnFlagUntilTimeout>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e03a      	b.n	800493e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10b      	bne.n	80048e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	461a      	mov	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	3302      	adds	r3, #2
 80048e2:	61bb      	str	r3, [r7, #24]
 80048e4:	e007      	b.n	80048f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	781a      	ldrb	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	3301      	adds	r3, #1
 80048f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004908:	b29b      	uxth	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1cb      	bne.n	80048a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2200      	movs	r2, #0
 8004916:	2140      	movs	r1, #64	@ 0x40
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 f814 	bl	8004946 <UART_WaitOnFlagUntilTimeout>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d005      	beq.n	8004930 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e006      	b.n	800493e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004938:	2300      	movs	r3, #0
 800493a:	e000      	b.n	800493e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800493c:	2302      	movs	r3, #2
  }
}
 800493e:	4618      	mov	r0, r3
 8004940:	3720      	adds	r7, #32
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b086      	sub	sp, #24
 800494a:	af00      	add	r7, sp, #0
 800494c:	60f8      	str	r0, [r7, #12]
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	603b      	str	r3, [r7, #0]
 8004952:	4613      	mov	r3, r2
 8004954:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004956:	e03b      	b.n	80049d0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495e:	d037      	beq.n	80049d0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004960:	f7fd fc4a 	bl	80021f8 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	6a3a      	ldr	r2, [r7, #32]
 800496c:	429a      	cmp	r2, r3
 800496e:	d302      	bcc.n	8004976 <UART_WaitOnFlagUntilTimeout+0x30>
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e03a      	b.n	80049f0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b00      	cmp	r3, #0
 8004986:	d023      	beq.n	80049d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b80      	cmp	r3, #128	@ 0x80
 800498c:	d020      	beq.n	80049d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2b40      	cmp	r3, #64	@ 0x40
 8004992:	d01d      	beq.n	80049d0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d116      	bne.n	80049d0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80049a2:	2300      	movs	r3, #0
 80049a4:	617b      	str	r3, [r7, #20]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f81d 	bl	80049f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2208      	movs	r2, #8
 80049c2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e00f      	b.n	80049f0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	4013      	ands	r3, r2
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	429a      	cmp	r2, r3
 80049de:	bf0c      	ite	eq
 80049e0:	2301      	moveq	r3, #1
 80049e2:	2300      	movne	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	461a      	mov	r2, r3
 80049e8:	79fb      	ldrb	r3, [r7, #7]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d0b4      	beq.n	8004958 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b095      	sub	sp, #84	@ 0x54
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	330c      	adds	r3, #12
 8004a06:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a0a:	e853 3f00 	ldrex	r3, [r3]
 8004a0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	330c      	adds	r3, #12
 8004a1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a20:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a28:	e841 2300 	strex	r3, r2, [r1]
 8004a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e5      	bne.n	8004a00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3314      	adds	r3, #20
 8004a3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	e853 3f00 	ldrex	r3, [r3]
 8004a42:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f023 0301 	bic.w	r3, r3, #1
 8004a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3314      	adds	r3, #20
 8004a52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a5c:	e841 2300 	strex	r3, r2, [r1]
 8004a60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1e5      	bne.n	8004a34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d119      	bne.n	8004aa4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	330c      	adds	r3, #12
 8004a76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	e853 3f00 	ldrex	r3, [r3]
 8004a7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f023 0310 	bic.w	r3, r3, #16
 8004a86:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	330c      	adds	r3, #12
 8004a8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a90:	61ba      	str	r2, [r7, #24]
 8004a92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a94:	6979      	ldr	r1, [r7, #20]
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	e841 2300 	strex	r3, r2, [r1]
 8004a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1e5      	bne.n	8004a70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ab2:	bf00      	nop
 8004ab4:	3754      	adds	r7, #84	@ 0x54
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr

08004abc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689a      	ldr	r2, [r3, #8]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004af6:	f023 030c 	bic.w	r3, r3, #12
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6812      	ldr	r2, [r2, #0]
 8004afe:	68b9      	ldr	r1, [r7, #8]
 8004b00:	430b      	orrs	r3, r1
 8004b02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699a      	ldr	r2, [r3, #24]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a2c      	ldr	r2, [pc, #176]	@ (8004bd0 <UART_SetConfig+0x114>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d103      	bne.n	8004b2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b24:	f7fe ffd6 	bl	8003ad4 <HAL_RCC_GetPCLK2Freq>
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	e002      	b.n	8004b32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b2c:	f7fe ffbe 	bl	8003aac <HAL_RCC_GetPCLK1Freq>
 8004b30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	009a      	lsls	r2, r3, #2
 8004b3c:	441a      	add	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b48:	4a22      	ldr	r2, [pc, #136]	@ (8004bd4 <UART_SetConfig+0x118>)
 8004b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	0119      	lsls	r1, r3, #4
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4613      	mov	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	009a      	lsls	r2, r3, #2
 8004b5c:	441a      	add	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b68:	4b1a      	ldr	r3, [pc, #104]	@ (8004bd4 <UART_SetConfig+0x118>)
 8004b6a:	fba3 0302 	umull	r0, r3, r3, r2
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	2064      	movs	r0, #100	@ 0x64
 8004b72:	fb00 f303 	mul.w	r3, r0, r3
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	3332      	adds	r3, #50	@ 0x32
 8004b7c:	4a15      	ldr	r2, [pc, #84]	@ (8004bd4 <UART_SetConfig+0x118>)
 8004b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b88:	4419      	add	r1, r3
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	009a      	lsls	r2, r3, #2
 8004b94:	441a      	add	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd4 <UART_SetConfig+0x118>)
 8004ba2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	2064      	movs	r0, #100	@ 0x64
 8004baa:	fb00 f303 	mul.w	r3, r0, r3
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	3332      	adds	r3, #50	@ 0x32
 8004bb4:	4a07      	ldr	r2, [pc, #28]	@ (8004bd4 <UART_SetConfig+0x118>)
 8004bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bba:	095b      	lsrs	r3, r3, #5
 8004bbc:	f003 020f 	and.w	r2, r3, #15
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	440a      	add	r2, r1
 8004bc6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004bc8:	bf00      	nop
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40013800 	.word	0x40013800
 8004bd4:	51eb851f 	.word	0x51eb851f

08004bd8 <siprintf>:
 8004bd8:	b40e      	push	{r1, r2, r3}
 8004bda:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004bde:	b510      	push	{r4, lr}
 8004be0:	2400      	movs	r4, #0
 8004be2:	b09d      	sub	sp, #116	@ 0x74
 8004be4:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004be6:	9002      	str	r0, [sp, #8]
 8004be8:	9006      	str	r0, [sp, #24]
 8004bea:	9107      	str	r1, [sp, #28]
 8004bec:	9104      	str	r1, [sp, #16]
 8004bee:	4809      	ldr	r0, [pc, #36]	@ (8004c14 <siprintf+0x3c>)
 8004bf0:	4909      	ldr	r1, [pc, #36]	@ (8004c18 <siprintf+0x40>)
 8004bf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bf6:	9105      	str	r1, [sp, #20]
 8004bf8:	6800      	ldr	r0, [r0, #0]
 8004bfa:	a902      	add	r1, sp, #8
 8004bfc:	9301      	str	r3, [sp, #4]
 8004bfe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004c00:	f000 f992 	bl	8004f28 <_svfiprintf_r>
 8004c04:	9b02      	ldr	r3, [sp, #8]
 8004c06:	701c      	strb	r4, [r3, #0]
 8004c08:	b01d      	add	sp, #116	@ 0x74
 8004c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c0e:	b003      	add	sp, #12
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	2000001c 	.word	0x2000001c
 8004c18:	ffff0208 	.word	0xffff0208

08004c1c <memset>:
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	4402      	add	r2, r0
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d100      	bne.n	8004c26 <memset+0xa>
 8004c24:	4770      	bx	lr
 8004c26:	f803 1b01 	strb.w	r1, [r3], #1
 8004c2a:	e7f9      	b.n	8004c20 <memset+0x4>

08004c2c <__errno>:
 8004c2c:	4b01      	ldr	r3, [pc, #4]	@ (8004c34 <__errno+0x8>)
 8004c2e:	6818      	ldr	r0, [r3, #0]
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	2000001c 	.word	0x2000001c

08004c38 <__libc_init_array>:
 8004c38:	b570      	push	{r4, r5, r6, lr}
 8004c3a:	2600      	movs	r6, #0
 8004c3c:	4d0c      	ldr	r5, [pc, #48]	@ (8004c70 <__libc_init_array+0x38>)
 8004c3e:	4c0d      	ldr	r4, [pc, #52]	@ (8004c74 <__libc_init_array+0x3c>)
 8004c40:	1b64      	subs	r4, r4, r5
 8004c42:	10a4      	asrs	r4, r4, #2
 8004c44:	42a6      	cmp	r6, r4
 8004c46:	d109      	bne.n	8004c5c <__libc_init_array+0x24>
 8004c48:	f000 fc76 	bl	8005538 <_init>
 8004c4c:	2600      	movs	r6, #0
 8004c4e:	4d0a      	ldr	r5, [pc, #40]	@ (8004c78 <__libc_init_array+0x40>)
 8004c50:	4c0a      	ldr	r4, [pc, #40]	@ (8004c7c <__libc_init_array+0x44>)
 8004c52:	1b64      	subs	r4, r4, r5
 8004c54:	10a4      	asrs	r4, r4, #2
 8004c56:	42a6      	cmp	r6, r4
 8004c58:	d105      	bne.n	8004c66 <__libc_init_array+0x2e>
 8004c5a:	bd70      	pop	{r4, r5, r6, pc}
 8004c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c60:	4798      	blx	r3
 8004c62:	3601      	adds	r6, #1
 8004c64:	e7ee      	b.n	8004c44 <__libc_init_array+0xc>
 8004c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c6a:	4798      	blx	r3
 8004c6c:	3601      	adds	r6, #1
 8004c6e:	e7f2      	b.n	8004c56 <__libc_init_array+0x1e>
 8004c70:	08006adc 	.word	0x08006adc
 8004c74:	08006adc 	.word	0x08006adc
 8004c78:	08006adc 	.word	0x08006adc
 8004c7c:	08006ae0 	.word	0x08006ae0

08004c80 <__retarget_lock_acquire_recursive>:
 8004c80:	4770      	bx	lr

08004c82 <__retarget_lock_release_recursive>:
 8004c82:	4770      	bx	lr

08004c84 <_free_r>:
 8004c84:	b538      	push	{r3, r4, r5, lr}
 8004c86:	4605      	mov	r5, r0
 8004c88:	2900      	cmp	r1, #0
 8004c8a:	d040      	beq.n	8004d0e <_free_r+0x8a>
 8004c8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c90:	1f0c      	subs	r4, r1, #4
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	bfb8      	it	lt
 8004c96:	18e4      	addlt	r4, r4, r3
 8004c98:	f000 f8de 	bl	8004e58 <__malloc_lock>
 8004c9c:	4a1c      	ldr	r2, [pc, #112]	@ (8004d10 <_free_r+0x8c>)
 8004c9e:	6813      	ldr	r3, [r2, #0]
 8004ca0:	b933      	cbnz	r3, 8004cb0 <_free_r+0x2c>
 8004ca2:	6063      	str	r3, [r4, #4]
 8004ca4:	6014      	str	r4, [r2, #0]
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cac:	f000 b8da 	b.w	8004e64 <__malloc_unlock>
 8004cb0:	42a3      	cmp	r3, r4
 8004cb2:	d908      	bls.n	8004cc6 <_free_r+0x42>
 8004cb4:	6820      	ldr	r0, [r4, #0]
 8004cb6:	1821      	adds	r1, r4, r0
 8004cb8:	428b      	cmp	r3, r1
 8004cba:	bf01      	itttt	eq
 8004cbc:	6819      	ldreq	r1, [r3, #0]
 8004cbe:	685b      	ldreq	r3, [r3, #4]
 8004cc0:	1809      	addeq	r1, r1, r0
 8004cc2:	6021      	streq	r1, [r4, #0]
 8004cc4:	e7ed      	b.n	8004ca2 <_free_r+0x1e>
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	b10b      	cbz	r3, 8004cd0 <_free_r+0x4c>
 8004ccc:	42a3      	cmp	r3, r4
 8004cce:	d9fa      	bls.n	8004cc6 <_free_r+0x42>
 8004cd0:	6811      	ldr	r1, [r2, #0]
 8004cd2:	1850      	adds	r0, r2, r1
 8004cd4:	42a0      	cmp	r0, r4
 8004cd6:	d10b      	bne.n	8004cf0 <_free_r+0x6c>
 8004cd8:	6820      	ldr	r0, [r4, #0]
 8004cda:	4401      	add	r1, r0
 8004cdc:	1850      	adds	r0, r2, r1
 8004cde:	4283      	cmp	r3, r0
 8004ce0:	6011      	str	r1, [r2, #0]
 8004ce2:	d1e0      	bne.n	8004ca6 <_free_r+0x22>
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	4408      	add	r0, r1
 8004cea:	6010      	str	r0, [r2, #0]
 8004cec:	6053      	str	r3, [r2, #4]
 8004cee:	e7da      	b.n	8004ca6 <_free_r+0x22>
 8004cf0:	d902      	bls.n	8004cf8 <_free_r+0x74>
 8004cf2:	230c      	movs	r3, #12
 8004cf4:	602b      	str	r3, [r5, #0]
 8004cf6:	e7d6      	b.n	8004ca6 <_free_r+0x22>
 8004cf8:	6820      	ldr	r0, [r4, #0]
 8004cfa:	1821      	adds	r1, r4, r0
 8004cfc:	428b      	cmp	r3, r1
 8004cfe:	bf01      	itttt	eq
 8004d00:	6819      	ldreq	r1, [r3, #0]
 8004d02:	685b      	ldreq	r3, [r3, #4]
 8004d04:	1809      	addeq	r1, r1, r0
 8004d06:	6021      	streq	r1, [r4, #0]
 8004d08:	6063      	str	r3, [r4, #4]
 8004d0a:	6054      	str	r4, [r2, #4]
 8004d0c:	e7cb      	b.n	8004ca6 <_free_r+0x22>
 8004d0e:	bd38      	pop	{r3, r4, r5, pc}
 8004d10:	20000790 	.word	0x20000790

08004d14 <sbrk_aligned>:
 8004d14:	b570      	push	{r4, r5, r6, lr}
 8004d16:	4e0f      	ldr	r6, [pc, #60]	@ (8004d54 <sbrk_aligned+0x40>)
 8004d18:	460c      	mov	r4, r1
 8004d1a:	6831      	ldr	r1, [r6, #0]
 8004d1c:	4605      	mov	r5, r0
 8004d1e:	b911      	cbnz	r1, 8004d26 <sbrk_aligned+0x12>
 8004d20:	f000 fba8 	bl	8005474 <_sbrk_r>
 8004d24:	6030      	str	r0, [r6, #0]
 8004d26:	4621      	mov	r1, r4
 8004d28:	4628      	mov	r0, r5
 8004d2a:	f000 fba3 	bl	8005474 <_sbrk_r>
 8004d2e:	1c43      	adds	r3, r0, #1
 8004d30:	d103      	bne.n	8004d3a <sbrk_aligned+0x26>
 8004d32:	f04f 34ff 	mov.w	r4, #4294967295
 8004d36:	4620      	mov	r0, r4
 8004d38:	bd70      	pop	{r4, r5, r6, pc}
 8004d3a:	1cc4      	adds	r4, r0, #3
 8004d3c:	f024 0403 	bic.w	r4, r4, #3
 8004d40:	42a0      	cmp	r0, r4
 8004d42:	d0f8      	beq.n	8004d36 <sbrk_aligned+0x22>
 8004d44:	1a21      	subs	r1, r4, r0
 8004d46:	4628      	mov	r0, r5
 8004d48:	f000 fb94 	bl	8005474 <_sbrk_r>
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	d1f2      	bne.n	8004d36 <sbrk_aligned+0x22>
 8004d50:	e7ef      	b.n	8004d32 <sbrk_aligned+0x1e>
 8004d52:	bf00      	nop
 8004d54:	2000078c 	.word	0x2000078c

08004d58 <_malloc_r>:
 8004d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d5c:	1ccd      	adds	r5, r1, #3
 8004d5e:	f025 0503 	bic.w	r5, r5, #3
 8004d62:	3508      	adds	r5, #8
 8004d64:	2d0c      	cmp	r5, #12
 8004d66:	bf38      	it	cc
 8004d68:	250c      	movcc	r5, #12
 8004d6a:	2d00      	cmp	r5, #0
 8004d6c:	4606      	mov	r6, r0
 8004d6e:	db01      	blt.n	8004d74 <_malloc_r+0x1c>
 8004d70:	42a9      	cmp	r1, r5
 8004d72:	d904      	bls.n	8004d7e <_malloc_r+0x26>
 8004d74:	230c      	movs	r3, #12
 8004d76:	6033      	str	r3, [r6, #0]
 8004d78:	2000      	movs	r0, #0
 8004d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e54 <_malloc_r+0xfc>
 8004d82:	f000 f869 	bl	8004e58 <__malloc_lock>
 8004d86:	f8d8 3000 	ldr.w	r3, [r8]
 8004d8a:	461c      	mov	r4, r3
 8004d8c:	bb44      	cbnz	r4, 8004de0 <_malloc_r+0x88>
 8004d8e:	4629      	mov	r1, r5
 8004d90:	4630      	mov	r0, r6
 8004d92:	f7ff ffbf 	bl	8004d14 <sbrk_aligned>
 8004d96:	1c43      	adds	r3, r0, #1
 8004d98:	4604      	mov	r4, r0
 8004d9a:	d158      	bne.n	8004e4e <_malloc_r+0xf6>
 8004d9c:	f8d8 4000 	ldr.w	r4, [r8]
 8004da0:	4627      	mov	r7, r4
 8004da2:	2f00      	cmp	r7, #0
 8004da4:	d143      	bne.n	8004e2e <_malloc_r+0xd6>
 8004da6:	2c00      	cmp	r4, #0
 8004da8:	d04b      	beq.n	8004e42 <_malloc_r+0xea>
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	4639      	mov	r1, r7
 8004dae:	4630      	mov	r0, r6
 8004db0:	eb04 0903 	add.w	r9, r4, r3
 8004db4:	f000 fb5e 	bl	8005474 <_sbrk_r>
 8004db8:	4581      	cmp	r9, r0
 8004dba:	d142      	bne.n	8004e42 <_malloc_r+0xea>
 8004dbc:	6821      	ldr	r1, [r4, #0]
 8004dbe:	4630      	mov	r0, r6
 8004dc0:	1a6d      	subs	r5, r5, r1
 8004dc2:	4629      	mov	r1, r5
 8004dc4:	f7ff ffa6 	bl	8004d14 <sbrk_aligned>
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d03a      	beq.n	8004e42 <_malloc_r+0xea>
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	442b      	add	r3, r5
 8004dd0:	6023      	str	r3, [r4, #0]
 8004dd2:	f8d8 3000 	ldr.w	r3, [r8]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	bb62      	cbnz	r2, 8004e34 <_malloc_r+0xdc>
 8004dda:	f8c8 7000 	str.w	r7, [r8]
 8004dde:	e00f      	b.n	8004e00 <_malloc_r+0xa8>
 8004de0:	6822      	ldr	r2, [r4, #0]
 8004de2:	1b52      	subs	r2, r2, r5
 8004de4:	d420      	bmi.n	8004e28 <_malloc_r+0xd0>
 8004de6:	2a0b      	cmp	r2, #11
 8004de8:	d917      	bls.n	8004e1a <_malloc_r+0xc2>
 8004dea:	1961      	adds	r1, r4, r5
 8004dec:	42a3      	cmp	r3, r4
 8004dee:	6025      	str	r5, [r4, #0]
 8004df0:	bf18      	it	ne
 8004df2:	6059      	strne	r1, [r3, #4]
 8004df4:	6863      	ldr	r3, [r4, #4]
 8004df6:	bf08      	it	eq
 8004df8:	f8c8 1000 	streq.w	r1, [r8]
 8004dfc:	5162      	str	r2, [r4, r5]
 8004dfe:	604b      	str	r3, [r1, #4]
 8004e00:	4630      	mov	r0, r6
 8004e02:	f000 f82f 	bl	8004e64 <__malloc_unlock>
 8004e06:	f104 000b 	add.w	r0, r4, #11
 8004e0a:	1d23      	adds	r3, r4, #4
 8004e0c:	f020 0007 	bic.w	r0, r0, #7
 8004e10:	1ac2      	subs	r2, r0, r3
 8004e12:	bf1c      	itt	ne
 8004e14:	1a1b      	subne	r3, r3, r0
 8004e16:	50a3      	strne	r3, [r4, r2]
 8004e18:	e7af      	b.n	8004d7a <_malloc_r+0x22>
 8004e1a:	6862      	ldr	r2, [r4, #4]
 8004e1c:	42a3      	cmp	r3, r4
 8004e1e:	bf0c      	ite	eq
 8004e20:	f8c8 2000 	streq.w	r2, [r8]
 8004e24:	605a      	strne	r2, [r3, #4]
 8004e26:	e7eb      	b.n	8004e00 <_malloc_r+0xa8>
 8004e28:	4623      	mov	r3, r4
 8004e2a:	6864      	ldr	r4, [r4, #4]
 8004e2c:	e7ae      	b.n	8004d8c <_malloc_r+0x34>
 8004e2e:	463c      	mov	r4, r7
 8004e30:	687f      	ldr	r7, [r7, #4]
 8004e32:	e7b6      	b.n	8004da2 <_malloc_r+0x4a>
 8004e34:	461a      	mov	r2, r3
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	42a3      	cmp	r3, r4
 8004e3a:	d1fb      	bne.n	8004e34 <_malloc_r+0xdc>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	6053      	str	r3, [r2, #4]
 8004e40:	e7de      	b.n	8004e00 <_malloc_r+0xa8>
 8004e42:	230c      	movs	r3, #12
 8004e44:	4630      	mov	r0, r6
 8004e46:	6033      	str	r3, [r6, #0]
 8004e48:	f000 f80c 	bl	8004e64 <__malloc_unlock>
 8004e4c:	e794      	b.n	8004d78 <_malloc_r+0x20>
 8004e4e:	6005      	str	r5, [r0, #0]
 8004e50:	e7d6      	b.n	8004e00 <_malloc_r+0xa8>
 8004e52:	bf00      	nop
 8004e54:	20000790 	.word	0x20000790

08004e58 <__malloc_lock>:
 8004e58:	4801      	ldr	r0, [pc, #4]	@ (8004e60 <__malloc_lock+0x8>)
 8004e5a:	f7ff bf11 	b.w	8004c80 <__retarget_lock_acquire_recursive>
 8004e5e:	bf00      	nop
 8004e60:	20000788 	.word	0x20000788

08004e64 <__malloc_unlock>:
 8004e64:	4801      	ldr	r0, [pc, #4]	@ (8004e6c <__malloc_unlock+0x8>)
 8004e66:	f7ff bf0c 	b.w	8004c82 <__retarget_lock_release_recursive>
 8004e6a:	bf00      	nop
 8004e6c:	20000788 	.word	0x20000788

08004e70 <__ssputs_r>:
 8004e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e74:	461f      	mov	r7, r3
 8004e76:	688e      	ldr	r6, [r1, #8]
 8004e78:	4682      	mov	sl, r0
 8004e7a:	42be      	cmp	r6, r7
 8004e7c:	460c      	mov	r4, r1
 8004e7e:	4690      	mov	r8, r2
 8004e80:	680b      	ldr	r3, [r1, #0]
 8004e82:	d82d      	bhi.n	8004ee0 <__ssputs_r+0x70>
 8004e84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004e8c:	d026      	beq.n	8004edc <__ssputs_r+0x6c>
 8004e8e:	6965      	ldr	r5, [r4, #20]
 8004e90:	6909      	ldr	r1, [r1, #16]
 8004e92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e96:	eba3 0901 	sub.w	r9, r3, r1
 8004e9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e9e:	1c7b      	adds	r3, r7, #1
 8004ea0:	444b      	add	r3, r9
 8004ea2:	106d      	asrs	r5, r5, #1
 8004ea4:	429d      	cmp	r5, r3
 8004ea6:	bf38      	it	cc
 8004ea8:	461d      	movcc	r5, r3
 8004eaa:	0553      	lsls	r3, r2, #21
 8004eac:	d527      	bpl.n	8004efe <__ssputs_r+0x8e>
 8004eae:	4629      	mov	r1, r5
 8004eb0:	f7ff ff52 	bl	8004d58 <_malloc_r>
 8004eb4:	4606      	mov	r6, r0
 8004eb6:	b360      	cbz	r0, 8004f12 <__ssputs_r+0xa2>
 8004eb8:	464a      	mov	r2, r9
 8004eba:	6921      	ldr	r1, [r4, #16]
 8004ebc:	f000 faf8 	bl	80054b0 <memcpy>
 8004ec0:	89a3      	ldrh	r3, [r4, #12]
 8004ec2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eca:	81a3      	strh	r3, [r4, #12]
 8004ecc:	6126      	str	r6, [r4, #16]
 8004ece:	444e      	add	r6, r9
 8004ed0:	6026      	str	r6, [r4, #0]
 8004ed2:	463e      	mov	r6, r7
 8004ed4:	6165      	str	r5, [r4, #20]
 8004ed6:	eba5 0509 	sub.w	r5, r5, r9
 8004eda:	60a5      	str	r5, [r4, #8]
 8004edc:	42be      	cmp	r6, r7
 8004ede:	d900      	bls.n	8004ee2 <__ssputs_r+0x72>
 8004ee0:	463e      	mov	r6, r7
 8004ee2:	4632      	mov	r2, r6
 8004ee4:	4641      	mov	r1, r8
 8004ee6:	6820      	ldr	r0, [r4, #0]
 8004ee8:	f000 faaa 	bl	8005440 <memmove>
 8004eec:	2000      	movs	r0, #0
 8004eee:	68a3      	ldr	r3, [r4, #8]
 8004ef0:	1b9b      	subs	r3, r3, r6
 8004ef2:	60a3      	str	r3, [r4, #8]
 8004ef4:	6823      	ldr	r3, [r4, #0]
 8004ef6:	4433      	add	r3, r6
 8004ef8:	6023      	str	r3, [r4, #0]
 8004efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004efe:	462a      	mov	r2, r5
 8004f00:	f000 fae4 	bl	80054cc <_realloc_r>
 8004f04:	4606      	mov	r6, r0
 8004f06:	2800      	cmp	r0, #0
 8004f08:	d1e0      	bne.n	8004ecc <__ssputs_r+0x5c>
 8004f0a:	4650      	mov	r0, sl
 8004f0c:	6921      	ldr	r1, [r4, #16]
 8004f0e:	f7ff feb9 	bl	8004c84 <_free_r>
 8004f12:	230c      	movs	r3, #12
 8004f14:	f8ca 3000 	str.w	r3, [sl]
 8004f18:	89a3      	ldrh	r3, [r4, #12]
 8004f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f22:	81a3      	strh	r3, [r4, #12]
 8004f24:	e7e9      	b.n	8004efa <__ssputs_r+0x8a>
	...

08004f28 <_svfiprintf_r>:
 8004f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f2c:	4698      	mov	r8, r3
 8004f2e:	898b      	ldrh	r3, [r1, #12]
 8004f30:	4607      	mov	r7, r0
 8004f32:	061b      	lsls	r3, r3, #24
 8004f34:	460d      	mov	r5, r1
 8004f36:	4614      	mov	r4, r2
 8004f38:	b09d      	sub	sp, #116	@ 0x74
 8004f3a:	d510      	bpl.n	8004f5e <_svfiprintf_r+0x36>
 8004f3c:	690b      	ldr	r3, [r1, #16]
 8004f3e:	b973      	cbnz	r3, 8004f5e <_svfiprintf_r+0x36>
 8004f40:	2140      	movs	r1, #64	@ 0x40
 8004f42:	f7ff ff09 	bl	8004d58 <_malloc_r>
 8004f46:	6028      	str	r0, [r5, #0]
 8004f48:	6128      	str	r0, [r5, #16]
 8004f4a:	b930      	cbnz	r0, 8004f5a <_svfiprintf_r+0x32>
 8004f4c:	230c      	movs	r3, #12
 8004f4e:	603b      	str	r3, [r7, #0]
 8004f50:	f04f 30ff 	mov.w	r0, #4294967295
 8004f54:	b01d      	add	sp, #116	@ 0x74
 8004f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f5a:	2340      	movs	r3, #64	@ 0x40
 8004f5c:	616b      	str	r3, [r5, #20]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f62:	2320      	movs	r3, #32
 8004f64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f68:	2330      	movs	r3, #48	@ 0x30
 8004f6a:	f04f 0901 	mov.w	r9, #1
 8004f6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f72:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800510c <_svfiprintf_r+0x1e4>
 8004f76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f7a:	4623      	mov	r3, r4
 8004f7c:	469a      	mov	sl, r3
 8004f7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f82:	b10a      	cbz	r2, 8004f88 <_svfiprintf_r+0x60>
 8004f84:	2a25      	cmp	r2, #37	@ 0x25
 8004f86:	d1f9      	bne.n	8004f7c <_svfiprintf_r+0x54>
 8004f88:	ebba 0b04 	subs.w	fp, sl, r4
 8004f8c:	d00b      	beq.n	8004fa6 <_svfiprintf_r+0x7e>
 8004f8e:	465b      	mov	r3, fp
 8004f90:	4622      	mov	r2, r4
 8004f92:	4629      	mov	r1, r5
 8004f94:	4638      	mov	r0, r7
 8004f96:	f7ff ff6b 	bl	8004e70 <__ssputs_r>
 8004f9a:	3001      	adds	r0, #1
 8004f9c:	f000 80a7 	beq.w	80050ee <_svfiprintf_r+0x1c6>
 8004fa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004fa2:	445a      	add	r2, fp
 8004fa4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f000 809f 	beq.w	80050ee <_svfiprintf_r+0x1c6>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fba:	f10a 0a01 	add.w	sl, sl, #1
 8004fbe:	9304      	str	r3, [sp, #16]
 8004fc0:	9307      	str	r3, [sp, #28]
 8004fc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004fc6:	931a      	str	r3, [sp, #104]	@ 0x68
 8004fc8:	4654      	mov	r4, sl
 8004fca:	2205      	movs	r2, #5
 8004fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fd0:	484e      	ldr	r0, [pc, #312]	@ (800510c <_svfiprintf_r+0x1e4>)
 8004fd2:	f000 fa5f 	bl	8005494 <memchr>
 8004fd6:	9a04      	ldr	r2, [sp, #16]
 8004fd8:	b9d8      	cbnz	r0, 8005012 <_svfiprintf_r+0xea>
 8004fda:	06d0      	lsls	r0, r2, #27
 8004fdc:	bf44      	itt	mi
 8004fde:	2320      	movmi	r3, #32
 8004fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fe4:	0711      	lsls	r1, r2, #28
 8004fe6:	bf44      	itt	mi
 8004fe8:	232b      	movmi	r3, #43	@ 0x2b
 8004fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fee:	f89a 3000 	ldrb.w	r3, [sl]
 8004ff2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ff4:	d015      	beq.n	8005022 <_svfiprintf_r+0xfa>
 8004ff6:	4654      	mov	r4, sl
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	f04f 0c0a 	mov.w	ip, #10
 8004ffe:	9a07      	ldr	r2, [sp, #28]
 8005000:	4621      	mov	r1, r4
 8005002:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005006:	3b30      	subs	r3, #48	@ 0x30
 8005008:	2b09      	cmp	r3, #9
 800500a:	d94b      	bls.n	80050a4 <_svfiprintf_r+0x17c>
 800500c:	b1b0      	cbz	r0, 800503c <_svfiprintf_r+0x114>
 800500e:	9207      	str	r2, [sp, #28]
 8005010:	e014      	b.n	800503c <_svfiprintf_r+0x114>
 8005012:	eba0 0308 	sub.w	r3, r0, r8
 8005016:	fa09 f303 	lsl.w	r3, r9, r3
 800501a:	4313      	orrs	r3, r2
 800501c:	46a2      	mov	sl, r4
 800501e:	9304      	str	r3, [sp, #16]
 8005020:	e7d2      	b.n	8004fc8 <_svfiprintf_r+0xa0>
 8005022:	9b03      	ldr	r3, [sp, #12]
 8005024:	1d19      	adds	r1, r3, #4
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	9103      	str	r1, [sp, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	bfbb      	ittet	lt
 800502e:	425b      	neglt	r3, r3
 8005030:	f042 0202 	orrlt.w	r2, r2, #2
 8005034:	9307      	strge	r3, [sp, #28]
 8005036:	9307      	strlt	r3, [sp, #28]
 8005038:	bfb8      	it	lt
 800503a:	9204      	strlt	r2, [sp, #16]
 800503c:	7823      	ldrb	r3, [r4, #0]
 800503e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005040:	d10a      	bne.n	8005058 <_svfiprintf_r+0x130>
 8005042:	7863      	ldrb	r3, [r4, #1]
 8005044:	2b2a      	cmp	r3, #42	@ 0x2a
 8005046:	d132      	bne.n	80050ae <_svfiprintf_r+0x186>
 8005048:	9b03      	ldr	r3, [sp, #12]
 800504a:	3402      	adds	r4, #2
 800504c:	1d1a      	adds	r2, r3, #4
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	9203      	str	r2, [sp, #12]
 8005052:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005056:	9305      	str	r3, [sp, #20]
 8005058:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005110 <_svfiprintf_r+0x1e8>
 800505c:	2203      	movs	r2, #3
 800505e:	4650      	mov	r0, sl
 8005060:	7821      	ldrb	r1, [r4, #0]
 8005062:	f000 fa17 	bl	8005494 <memchr>
 8005066:	b138      	cbz	r0, 8005078 <_svfiprintf_r+0x150>
 8005068:	2240      	movs	r2, #64	@ 0x40
 800506a:	9b04      	ldr	r3, [sp, #16]
 800506c:	eba0 000a 	sub.w	r0, r0, sl
 8005070:	4082      	lsls	r2, r0
 8005072:	4313      	orrs	r3, r2
 8005074:	3401      	adds	r4, #1
 8005076:	9304      	str	r3, [sp, #16]
 8005078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800507c:	2206      	movs	r2, #6
 800507e:	4825      	ldr	r0, [pc, #148]	@ (8005114 <_svfiprintf_r+0x1ec>)
 8005080:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005084:	f000 fa06 	bl	8005494 <memchr>
 8005088:	2800      	cmp	r0, #0
 800508a:	d036      	beq.n	80050fa <_svfiprintf_r+0x1d2>
 800508c:	4b22      	ldr	r3, [pc, #136]	@ (8005118 <_svfiprintf_r+0x1f0>)
 800508e:	bb1b      	cbnz	r3, 80050d8 <_svfiprintf_r+0x1b0>
 8005090:	9b03      	ldr	r3, [sp, #12]
 8005092:	3307      	adds	r3, #7
 8005094:	f023 0307 	bic.w	r3, r3, #7
 8005098:	3308      	adds	r3, #8
 800509a:	9303      	str	r3, [sp, #12]
 800509c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800509e:	4433      	add	r3, r6
 80050a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80050a2:	e76a      	b.n	8004f7a <_svfiprintf_r+0x52>
 80050a4:	460c      	mov	r4, r1
 80050a6:	2001      	movs	r0, #1
 80050a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80050ac:	e7a8      	b.n	8005000 <_svfiprintf_r+0xd8>
 80050ae:	2300      	movs	r3, #0
 80050b0:	f04f 0c0a 	mov.w	ip, #10
 80050b4:	4619      	mov	r1, r3
 80050b6:	3401      	adds	r4, #1
 80050b8:	9305      	str	r3, [sp, #20]
 80050ba:	4620      	mov	r0, r4
 80050bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050c0:	3a30      	subs	r2, #48	@ 0x30
 80050c2:	2a09      	cmp	r2, #9
 80050c4:	d903      	bls.n	80050ce <_svfiprintf_r+0x1a6>
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0c6      	beq.n	8005058 <_svfiprintf_r+0x130>
 80050ca:	9105      	str	r1, [sp, #20]
 80050cc:	e7c4      	b.n	8005058 <_svfiprintf_r+0x130>
 80050ce:	4604      	mov	r4, r0
 80050d0:	2301      	movs	r3, #1
 80050d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80050d6:	e7f0      	b.n	80050ba <_svfiprintf_r+0x192>
 80050d8:	ab03      	add	r3, sp, #12
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	462a      	mov	r2, r5
 80050de:	4638      	mov	r0, r7
 80050e0:	4b0e      	ldr	r3, [pc, #56]	@ (800511c <_svfiprintf_r+0x1f4>)
 80050e2:	a904      	add	r1, sp, #16
 80050e4:	f3af 8000 	nop.w
 80050e8:	1c42      	adds	r2, r0, #1
 80050ea:	4606      	mov	r6, r0
 80050ec:	d1d6      	bne.n	800509c <_svfiprintf_r+0x174>
 80050ee:	89ab      	ldrh	r3, [r5, #12]
 80050f0:	065b      	lsls	r3, r3, #25
 80050f2:	f53f af2d 	bmi.w	8004f50 <_svfiprintf_r+0x28>
 80050f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050f8:	e72c      	b.n	8004f54 <_svfiprintf_r+0x2c>
 80050fa:	ab03      	add	r3, sp, #12
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	462a      	mov	r2, r5
 8005100:	4638      	mov	r0, r7
 8005102:	4b06      	ldr	r3, [pc, #24]	@ (800511c <_svfiprintf_r+0x1f4>)
 8005104:	a904      	add	r1, sp, #16
 8005106:	f000 f87d 	bl	8005204 <_printf_i>
 800510a:	e7ed      	b.n	80050e8 <_svfiprintf_r+0x1c0>
 800510c:	08006aa6 	.word	0x08006aa6
 8005110:	08006aac 	.word	0x08006aac
 8005114:	08006ab0 	.word	0x08006ab0
 8005118:	00000000 	.word	0x00000000
 800511c:	08004e71 	.word	0x08004e71

08005120 <_printf_common>:
 8005120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005124:	4616      	mov	r6, r2
 8005126:	4698      	mov	r8, r3
 8005128:	688a      	ldr	r2, [r1, #8]
 800512a:	690b      	ldr	r3, [r1, #16]
 800512c:	4607      	mov	r7, r0
 800512e:	4293      	cmp	r3, r2
 8005130:	bfb8      	it	lt
 8005132:	4613      	movlt	r3, r2
 8005134:	6033      	str	r3, [r6, #0]
 8005136:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800513a:	460c      	mov	r4, r1
 800513c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005140:	b10a      	cbz	r2, 8005146 <_printf_common+0x26>
 8005142:	3301      	adds	r3, #1
 8005144:	6033      	str	r3, [r6, #0]
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	0699      	lsls	r1, r3, #26
 800514a:	bf42      	ittt	mi
 800514c:	6833      	ldrmi	r3, [r6, #0]
 800514e:	3302      	addmi	r3, #2
 8005150:	6033      	strmi	r3, [r6, #0]
 8005152:	6825      	ldr	r5, [r4, #0]
 8005154:	f015 0506 	ands.w	r5, r5, #6
 8005158:	d106      	bne.n	8005168 <_printf_common+0x48>
 800515a:	f104 0a19 	add.w	sl, r4, #25
 800515e:	68e3      	ldr	r3, [r4, #12]
 8005160:	6832      	ldr	r2, [r6, #0]
 8005162:	1a9b      	subs	r3, r3, r2
 8005164:	42ab      	cmp	r3, r5
 8005166:	dc2b      	bgt.n	80051c0 <_printf_common+0xa0>
 8005168:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800516c:	6822      	ldr	r2, [r4, #0]
 800516e:	3b00      	subs	r3, #0
 8005170:	bf18      	it	ne
 8005172:	2301      	movne	r3, #1
 8005174:	0692      	lsls	r2, r2, #26
 8005176:	d430      	bmi.n	80051da <_printf_common+0xba>
 8005178:	4641      	mov	r1, r8
 800517a:	4638      	mov	r0, r7
 800517c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005180:	47c8      	blx	r9
 8005182:	3001      	adds	r0, #1
 8005184:	d023      	beq.n	80051ce <_printf_common+0xae>
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	6922      	ldr	r2, [r4, #16]
 800518a:	f003 0306 	and.w	r3, r3, #6
 800518e:	2b04      	cmp	r3, #4
 8005190:	bf14      	ite	ne
 8005192:	2500      	movne	r5, #0
 8005194:	6833      	ldreq	r3, [r6, #0]
 8005196:	f04f 0600 	mov.w	r6, #0
 800519a:	bf08      	it	eq
 800519c:	68e5      	ldreq	r5, [r4, #12]
 800519e:	f104 041a 	add.w	r4, r4, #26
 80051a2:	bf08      	it	eq
 80051a4:	1aed      	subeq	r5, r5, r3
 80051a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80051aa:	bf08      	it	eq
 80051ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051b0:	4293      	cmp	r3, r2
 80051b2:	bfc4      	itt	gt
 80051b4:	1a9b      	subgt	r3, r3, r2
 80051b6:	18ed      	addgt	r5, r5, r3
 80051b8:	42b5      	cmp	r5, r6
 80051ba:	d11a      	bne.n	80051f2 <_printf_common+0xd2>
 80051bc:	2000      	movs	r0, #0
 80051be:	e008      	b.n	80051d2 <_printf_common+0xb2>
 80051c0:	2301      	movs	r3, #1
 80051c2:	4652      	mov	r2, sl
 80051c4:	4641      	mov	r1, r8
 80051c6:	4638      	mov	r0, r7
 80051c8:	47c8      	blx	r9
 80051ca:	3001      	adds	r0, #1
 80051cc:	d103      	bne.n	80051d6 <_printf_common+0xb6>
 80051ce:	f04f 30ff 	mov.w	r0, #4294967295
 80051d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d6:	3501      	adds	r5, #1
 80051d8:	e7c1      	b.n	800515e <_printf_common+0x3e>
 80051da:	2030      	movs	r0, #48	@ 0x30
 80051dc:	18e1      	adds	r1, r4, r3
 80051de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051e8:	4422      	add	r2, r4
 80051ea:	3302      	adds	r3, #2
 80051ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051f0:	e7c2      	b.n	8005178 <_printf_common+0x58>
 80051f2:	2301      	movs	r3, #1
 80051f4:	4622      	mov	r2, r4
 80051f6:	4641      	mov	r1, r8
 80051f8:	4638      	mov	r0, r7
 80051fa:	47c8      	blx	r9
 80051fc:	3001      	adds	r0, #1
 80051fe:	d0e6      	beq.n	80051ce <_printf_common+0xae>
 8005200:	3601      	adds	r6, #1
 8005202:	e7d9      	b.n	80051b8 <_printf_common+0x98>

08005204 <_printf_i>:
 8005204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005208:	7e0f      	ldrb	r7, [r1, #24]
 800520a:	4691      	mov	r9, r2
 800520c:	2f78      	cmp	r7, #120	@ 0x78
 800520e:	4680      	mov	r8, r0
 8005210:	460c      	mov	r4, r1
 8005212:	469a      	mov	sl, r3
 8005214:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005216:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800521a:	d807      	bhi.n	800522c <_printf_i+0x28>
 800521c:	2f62      	cmp	r7, #98	@ 0x62
 800521e:	d80a      	bhi.n	8005236 <_printf_i+0x32>
 8005220:	2f00      	cmp	r7, #0
 8005222:	f000 80d1 	beq.w	80053c8 <_printf_i+0x1c4>
 8005226:	2f58      	cmp	r7, #88	@ 0x58
 8005228:	f000 80b8 	beq.w	800539c <_printf_i+0x198>
 800522c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005230:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005234:	e03a      	b.n	80052ac <_printf_i+0xa8>
 8005236:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800523a:	2b15      	cmp	r3, #21
 800523c:	d8f6      	bhi.n	800522c <_printf_i+0x28>
 800523e:	a101      	add	r1, pc, #4	@ (adr r1, 8005244 <_printf_i+0x40>)
 8005240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005244:	0800529d 	.word	0x0800529d
 8005248:	080052b1 	.word	0x080052b1
 800524c:	0800522d 	.word	0x0800522d
 8005250:	0800522d 	.word	0x0800522d
 8005254:	0800522d 	.word	0x0800522d
 8005258:	0800522d 	.word	0x0800522d
 800525c:	080052b1 	.word	0x080052b1
 8005260:	0800522d 	.word	0x0800522d
 8005264:	0800522d 	.word	0x0800522d
 8005268:	0800522d 	.word	0x0800522d
 800526c:	0800522d 	.word	0x0800522d
 8005270:	080053af 	.word	0x080053af
 8005274:	080052db 	.word	0x080052db
 8005278:	08005369 	.word	0x08005369
 800527c:	0800522d 	.word	0x0800522d
 8005280:	0800522d 	.word	0x0800522d
 8005284:	080053d1 	.word	0x080053d1
 8005288:	0800522d 	.word	0x0800522d
 800528c:	080052db 	.word	0x080052db
 8005290:	0800522d 	.word	0x0800522d
 8005294:	0800522d 	.word	0x0800522d
 8005298:	08005371 	.word	0x08005371
 800529c:	6833      	ldr	r3, [r6, #0]
 800529e:	1d1a      	adds	r2, r3, #4
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6032      	str	r2, [r6, #0]
 80052a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80052ac:	2301      	movs	r3, #1
 80052ae:	e09c      	b.n	80053ea <_printf_i+0x1e6>
 80052b0:	6833      	ldr	r3, [r6, #0]
 80052b2:	6820      	ldr	r0, [r4, #0]
 80052b4:	1d19      	adds	r1, r3, #4
 80052b6:	6031      	str	r1, [r6, #0]
 80052b8:	0606      	lsls	r6, r0, #24
 80052ba:	d501      	bpl.n	80052c0 <_printf_i+0xbc>
 80052bc:	681d      	ldr	r5, [r3, #0]
 80052be:	e003      	b.n	80052c8 <_printf_i+0xc4>
 80052c0:	0645      	lsls	r5, r0, #25
 80052c2:	d5fb      	bpl.n	80052bc <_printf_i+0xb8>
 80052c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80052c8:	2d00      	cmp	r5, #0
 80052ca:	da03      	bge.n	80052d4 <_printf_i+0xd0>
 80052cc:	232d      	movs	r3, #45	@ 0x2d
 80052ce:	426d      	negs	r5, r5
 80052d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052d4:	230a      	movs	r3, #10
 80052d6:	4858      	ldr	r0, [pc, #352]	@ (8005438 <_printf_i+0x234>)
 80052d8:	e011      	b.n	80052fe <_printf_i+0xfa>
 80052da:	6821      	ldr	r1, [r4, #0]
 80052dc:	6833      	ldr	r3, [r6, #0]
 80052de:	0608      	lsls	r0, r1, #24
 80052e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80052e4:	d402      	bmi.n	80052ec <_printf_i+0xe8>
 80052e6:	0649      	lsls	r1, r1, #25
 80052e8:	bf48      	it	mi
 80052ea:	b2ad      	uxthmi	r5, r5
 80052ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80052ee:	6033      	str	r3, [r6, #0]
 80052f0:	bf14      	ite	ne
 80052f2:	230a      	movne	r3, #10
 80052f4:	2308      	moveq	r3, #8
 80052f6:	4850      	ldr	r0, [pc, #320]	@ (8005438 <_printf_i+0x234>)
 80052f8:	2100      	movs	r1, #0
 80052fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052fe:	6866      	ldr	r6, [r4, #4]
 8005300:	2e00      	cmp	r6, #0
 8005302:	60a6      	str	r6, [r4, #8]
 8005304:	db05      	blt.n	8005312 <_printf_i+0x10e>
 8005306:	6821      	ldr	r1, [r4, #0]
 8005308:	432e      	orrs	r6, r5
 800530a:	f021 0104 	bic.w	r1, r1, #4
 800530e:	6021      	str	r1, [r4, #0]
 8005310:	d04b      	beq.n	80053aa <_printf_i+0x1a6>
 8005312:	4616      	mov	r6, r2
 8005314:	fbb5 f1f3 	udiv	r1, r5, r3
 8005318:	fb03 5711 	mls	r7, r3, r1, r5
 800531c:	5dc7      	ldrb	r7, [r0, r7]
 800531e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005322:	462f      	mov	r7, r5
 8005324:	42bb      	cmp	r3, r7
 8005326:	460d      	mov	r5, r1
 8005328:	d9f4      	bls.n	8005314 <_printf_i+0x110>
 800532a:	2b08      	cmp	r3, #8
 800532c:	d10b      	bne.n	8005346 <_printf_i+0x142>
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	07df      	lsls	r7, r3, #31
 8005332:	d508      	bpl.n	8005346 <_printf_i+0x142>
 8005334:	6923      	ldr	r3, [r4, #16]
 8005336:	6861      	ldr	r1, [r4, #4]
 8005338:	4299      	cmp	r1, r3
 800533a:	bfde      	ittt	le
 800533c:	2330      	movle	r3, #48	@ 0x30
 800533e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005342:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005346:	1b92      	subs	r2, r2, r6
 8005348:	6122      	str	r2, [r4, #16]
 800534a:	464b      	mov	r3, r9
 800534c:	4621      	mov	r1, r4
 800534e:	4640      	mov	r0, r8
 8005350:	f8cd a000 	str.w	sl, [sp]
 8005354:	aa03      	add	r2, sp, #12
 8005356:	f7ff fee3 	bl	8005120 <_printf_common>
 800535a:	3001      	adds	r0, #1
 800535c:	d14a      	bne.n	80053f4 <_printf_i+0x1f0>
 800535e:	f04f 30ff 	mov.w	r0, #4294967295
 8005362:	b004      	add	sp, #16
 8005364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	f043 0320 	orr.w	r3, r3, #32
 800536e:	6023      	str	r3, [r4, #0]
 8005370:	2778      	movs	r7, #120	@ 0x78
 8005372:	4832      	ldr	r0, [pc, #200]	@ (800543c <_printf_i+0x238>)
 8005374:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	6831      	ldr	r1, [r6, #0]
 800537c:	061f      	lsls	r7, r3, #24
 800537e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005382:	d402      	bmi.n	800538a <_printf_i+0x186>
 8005384:	065f      	lsls	r7, r3, #25
 8005386:	bf48      	it	mi
 8005388:	b2ad      	uxthmi	r5, r5
 800538a:	6031      	str	r1, [r6, #0]
 800538c:	07d9      	lsls	r1, r3, #31
 800538e:	bf44      	itt	mi
 8005390:	f043 0320 	orrmi.w	r3, r3, #32
 8005394:	6023      	strmi	r3, [r4, #0]
 8005396:	b11d      	cbz	r5, 80053a0 <_printf_i+0x19c>
 8005398:	2310      	movs	r3, #16
 800539a:	e7ad      	b.n	80052f8 <_printf_i+0xf4>
 800539c:	4826      	ldr	r0, [pc, #152]	@ (8005438 <_printf_i+0x234>)
 800539e:	e7e9      	b.n	8005374 <_printf_i+0x170>
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	f023 0320 	bic.w	r3, r3, #32
 80053a6:	6023      	str	r3, [r4, #0]
 80053a8:	e7f6      	b.n	8005398 <_printf_i+0x194>
 80053aa:	4616      	mov	r6, r2
 80053ac:	e7bd      	b.n	800532a <_printf_i+0x126>
 80053ae:	6833      	ldr	r3, [r6, #0]
 80053b0:	6825      	ldr	r5, [r4, #0]
 80053b2:	1d18      	adds	r0, r3, #4
 80053b4:	6961      	ldr	r1, [r4, #20]
 80053b6:	6030      	str	r0, [r6, #0]
 80053b8:	062e      	lsls	r6, r5, #24
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	d501      	bpl.n	80053c2 <_printf_i+0x1be>
 80053be:	6019      	str	r1, [r3, #0]
 80053c0:	e002      	b.n	80053c8 <_printf_i+0x1c4>
 80053c2:	0668      	lsls	r0, r5, #25
 80053c4:	d5fb      	bpl.n	80053be <_printf_i+0x1ba>
 80053c6:	8019      	strh	r1, [r3, #0]
 80053c8:	2300      	movs	r3, #0
 80053ca:	4616      	mov	r6, r2
 80053cc:	6123      	str	r3, [r4, #16]
 80053ce:	e7bc      	b.n	800534a <_printf_i+0x146>
 80053d0:	6833      	ldr	r3, [r6, #0]
 80053d2:	2100      	movs	r1, #0
 80053d4:	1d1a      	adds	r2, r3, #4
 80053d6:	6032      	str	r2, [r6, #0]
 80053d8:	681e      	ldr	r6, [r3, #0]
 80053da:	6862      	ldr	r2, [r4, #4]
 80053dc:	4630      	mov	r0, r6
 80053de:	f000 f859 	bl	8005494 <memchr>
 80053e2:	b108      	cbz	r0, 80053e8 <_printf_i+0x1e4>
 80053e4:	1b80      	subs	r0, r0, r6
 80053e6:	6060      	str	r0, [r4, #4]
 80053e8:	6863      	ldr	r3, [r4, #4]
 80053ea:	6123      	str	r3, [r4, #16]
 80053ec:	2300      	movs	r3, #0
 80053ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053f2:	e7aa      	b.n	800534a <_printf_i+0x146>
 80053f4:	4632      	mov	r2, r6
 80053f6:	4649      	mov	r1, r9
 80053f8:	4640      	mov	r0, r8
 80053fa:	6923      	ldr	r3, [r4, #16]
 80053fc:	47d0      	blx	sl
 80053fe:	3001      	adds	r0, #1
 8005400:	d0ad      	beq.n	800535e <_printf_i+0x15a>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	079b      	lsls	r3, r3, #30
 8005406:	d413      	bmi.n	8005430 <_printf_i+0x22c>
 8005408:	68e0      	ldr	r0, [r4, #12]
 800540a:	9b03      	ldr	r3, [sp, #12]
 800540c:	4298      	cmp	r0, r3
 800540e:	bfb8      	it	lt
 8005410:	4618      	movlt	r0, r3
 8005412:	e7a6      	b.n	8005362 <_printf_i+0x15e>
 8005414:	2301      	movs	r3, #1
 8005416:	4632      	mov	r2, r6
 8005418:	4649      	mov	r1, r9
 800541a:	4640      	mov	r0, r8
 800541c:	47d0      	blx	sl
 800541e:	3001      	adds	r0, #1
 8005420:	d09d      	beq.n	800535e <_printf_i+0x15a>
 8005422:	3501      	adds	r5, #1
 8005424:	68e3      	ldr	r3, [r4, #12]
 8005426:	9903      	ldr	r1, [sp, #12]
 8005428:	1a5b      	subs	r3, r3, r1
 800542a:	42ab      	cmp	r3, r5
 800542c:	dcf2      	bgt.n	8005414 <_printf_i+0x210>
 800542e:	e7eb      	b.n	8005408 <_printf_i+0x204>
 8005430:	2500      	movs	r5, #0
 8005432:	f104 0619 	add.w	r6, r4, #25
 8005436:	e7f5      	b.n	8005424 <_printf_i+0x220>
 8005438:	08006ab7 	.word	0x08006ab7
 800543c:	08006ac8 	.word	0x08006ac8

08005440 <memmove>:
 8005440:	4288      	cmp	r0, r1
 8005442:	b510      	push	{r4, lr}
 8005444:	eb01 0402 	add.w	r4, r1, r2
 8005448:	d902      	bls.n	8005450 <memmove+0x10>
 800544a:	4284      	cmp	r4, r0
 800544c:	4623      	mov	r3, r4
 800544e:	d807      	bhi.n	8005460 <memmove+0x20>
 8005450:	1e43      	subs	r3, r0, #1
 8005452:	42a1      	cmp	r1, r4
 8005454:	d008      	beq.n	8005468 <memmove+0x28>
 8005456:	f811 2b01 	ldrb.w	r2, [r1], #1
 800545a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800545e:	e7f8      	b.n	8005452 <memmove+0x12>
 8005460:	4601      	mov	r1, r0
 8005462:	4402      	add	r2, r0
 8005464:	428a      	cmp	r2, r1
 8005466:	d100      	bne.n	800546a <memmove+0x2a>
 8005468:	bd10      	pop	{r4, pc}
 800546a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800546e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005472:	e7f7      	b.n	8005464 <memmove+0x24>

08005474 <_sbrk_r>:
 8005474:	b538      	push	{r3, r4, r5, lr}
 8005476:	2300      	movs	r3, #0
 8005478:	4d05      	ldr	r5, [pc, #20]	@ (8005490 <_sbrk_r+0x1c>)
 800547a:	4604      	mov	r4, r0
 800547c:	4608      	mov	r0, r1
 800547e:	602b      	str	r3, [r5, #0]
 8005480:	f7fc fe00 	bl	8002084 <_sbrk>
 8005484:	1c43      	adds	r3, r0, #1
 8005486:	d102      	bne.n	800548e <_sbrk_r+0x1a>
 8005488:	682b      	ldr	r3, [r5, #0]
 800548a:	b103      	cbz	r3, 800548e <_sbrk_r+0x1a>
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	bd38      	pop	{r3, r4, r5, pc}
 8005490:	20000784 	.word	0x20000784

08005494 <memchr>:
 8005494:	4603      	mov	r3, r0
 8005496:	b510      	push	{r4, lr}
 8005498:	b2c9      	uxtb	r1, r1
 800549a:	4402      	add	r2, r0
 800549c:	4293      	cmp	r3, r2
 800549e:	4618      	mov	r0, r3
 80054a0:	d101      	bne.n	80054a6 <memchr+0x12>
 80054a2:	2000      	movs	r0, #0
 80054a4:	e003      	b.n	80054ae <memchr+0x1a>
 80054a6:	7804      	ldrb	r4, [r0, #0]
 80054a8:	3301      	adds	r3, #1
 80054aa:	428c      	cmp	r4, r1
 80054ac:	d1f6      	bne.n	800549c <memchr+0x8>
 80054ae:	bd10      	pop	{r4, pc}

080054b0 <memcpy>:
 80054b0:	440a      	add	r2, r1
 80054b2:	4291      	cmp	r1, r2
 80054b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80054b8:	d100      	bne.n	80054bc <memcpy+0xc>
 80054ba:	4770      	bx	lr
 80054bc:	b510      	push	{r4, lr}
 80054be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054c2:	4291      	cmp	r1, r2
 80054c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054c8:	d1f9      	bne.n	80054be <memcpy+0xe>
 80054ca:	bd10      	pop	{r4, pc}

080054cc <_realloc_r>:
 80054cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054d0:	4607      	mov	r7, r0
 80054d2:	4614      	mov	r4, r2
 80054d4:	460d      	mov	r5, r1
 80054d6:	b921      	cbnz	r1, 80054e2 <_realloc_r+0x16>
 80054d8:	4611      	mov	r1, r2
 80054da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054de:	f7ff bc3b 	b.w	8004d58 <_malloc_r>
 80054e2:	b92a      	cbnz	r2, 80054f0 <_realloc_r+0x24>
 80054e4:	f7ff fbce 	bl	8004c84 <_free_r>
 80054e8:	4625      	mov	r5, r4
 80054ea:	4628      	mov	r0, r5
 80054ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054f0:	f000 f81a 	bl	8005528 <_malloc_usable_size_r>
 80054f4:	4284      	cmp	r4, r0
 80054f6:	4606      	mov	r6, r0
 80054f8:	d802      	bhi.n	8005500 <_realloc_r+0x34>
 80054fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80054fe:	d8f4      	bhi.n	80054ea <_realloc_r+0x1e>
 8005500:	4621      	mov	r1, r4
 8005502:	4638      	mov	r0, r7
 8005504:	f7ff fc28 	bl	8004d58 <_malloc_r>
 8005508:	4680      	mov	r8, r0
 800550a:	b908      	cbnz	r0, 8005510 <_realloc_r+0x44>
 800550c:	4645      	mov	r5, r8
 800550e:	e7ec      	b.n	80054ea <_realloc_r+0x1e>
 8005510:	42b4      	cmp	r4, r6
 8005512:	4622      	mov	r2, r4
 8005514:	4629      	mov	r1, r5
 8005516:	bf28      	it	cs
 8005518:	4632      	movcs	r2, r6
 800551a:	f7ff ffc9 	bl	80054b0 <memcpy>
 800551e:	4629      	mov	r1, r5
 8005520:	4638      	mov	r0, r7
 8005522:	f7ff fbaf 	bl	8004c84 <_free_r>
 8005526:	e7f1      	b.n	800550c <_realloc_r+0x40>

08005528 <_malloc_usable_size_r>:
 8005528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800552c:	1f18      	subs	r0, r3, #4
 800552e:	2b00      	cmp	r3, #0
 8005530:	bfbc      	itt	lt
 8005532:	580b      	ldrlt	r3, [r1, r0]
 8005534:	18c0      	addlt	r0, r0, r3
 8005536:	4770      	bx	lr

08005538 <_init>:
 8005538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553a:	bf00      	nop
 800553c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553e:	bc08      	pop	{r3}
 8005540:	469e      	mov	lr, r3
 8005542:	4770      	bx	lr

08005544 <_fini>:
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005546:	bf00      	nop
 8005548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554a:	bc08      	pop	{r3}
 800554c:	469e      	mov	lr, r3
 800554e:	4770      	bx	lr
