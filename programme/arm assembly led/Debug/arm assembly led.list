
arm assembly led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000000b8  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080001e8  080001e8  000011e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080001e8  080001e8  000011e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080001e8  080001e8  000011e8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080001e8  080001e8  000011e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000000  080001e8  080001e8  000011e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000000  080001e8  080001e8  000011e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000011e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000000  20000000  080001e8  00000000  2**0
                  ALLOC
 10 ._user_heap_stack 00000600  20000000  080001e8  00002000  2**0
                  ALLOC
 11 .ARM.attributes 00000021  00000000  00000000  000011e8  2**0
                  CONTENTS, READONLY
 12 .debug_line   000000ec  00000000  00000000  00001209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000005b  00000000  00000000  000012f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00000054  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000038  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000048  00000000  00000000  000013e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00000077  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000019  00000000  00000000  0000149f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <main>:
.equ GPIOB_ODR, 0x40010C0C  @ GPIOB Output Data Register (ODR)
.equ RCC_APB2ENR, 0x40021018 @ RCC APB2 peripheral clock enable register
.equ GPIOB_CRH, 0x40010C04   @ GPIOB Config Register High

main:
    LDR R0, =RCC_APB2ENR
 8000130:	4814      	ldr	r0, [pc, #80]	@ (8000184 <delay_loop+0x6>)
	LDR R1, [R0]
 8000132:	6801      	ldr	r1, [r0, #0]
	ORR R1, R1, #(1 << 3)     @ Enable GPIOB clock
 8000134:	f041 0108 	orr.w	r1, r1, #8
	STR R1, [R0]
 8000138:	6001      	str	r1, [r0, #0]
	LDR R1, [R0]              @ Read back to check
 800013a:	6801      	ldr	r1, [r0, #0]


    @ Configure PB8 & PB9 in CRH
	LDR R0, =GPIOB_CRH
 800013c:	4812      	ldr	r0, [pc, #72]	@ (8000188 <delay_loop+0xa>)
	LDR R1, [R0]
 800013e:	6801      	ldr	r1, [r0, #0]
	BIC R1, R1, #(0xFF << 0)  @ Clear PB8 & PB9 config (bits 0-7)
 8000140:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
	ORR R1, R1, #(0x33 << 0)  @ Set PB8 & PB9 as Output 50MHz
 8000144:	f041 0133 	orr.w	r1, r1, #51	@ 0x33
	STR R1, [R0]
 8000148:	6001      	str	r1, [r0, #0]

	@ Configure PB6 & PB7 in CRL
	LDR R0, =0x40010C00  @ GPIOB_CRL (for PB6 & PB7)
 800014a:	4810      	ldr	r0, [pc, #64]	@ (800018c <delay_loop+0xe>)
	LDR R1, [R0]
 800014c:	6801      	ldr	r1, [r0, #0]
	BIC R1, R1, #(0xFF << 24)  @ Clear PB6 & PB7 config (bits 24-31)
 800014e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
	ORR R1, R1, #(0x33 << 24)  @ Set PB6 & PB7 as Output 50MHz
 8000152:	f041 514c 	orr.w	r1, r1, #855638016	@ 0x33000000
	STR R1, [R0]
 8000156:	6001      	str	r1, [r0, #0]

08000158 <loop>:


loop:
    @ Set GPIOB Pins 9 & 7 HIGH, 8 & 6 LOW
    LDR R0, =GPIOB_ODR
 8000158:	480d      	ldr	r0, [pc, #52]	@ (8000190 <delay_loop+0x12>)
    LDR R1, [R0]              @ Read current GPIOB state
 800015a:	6801      	ldr	r1, [r0, #0]
    BIC R1, R1, #((1<<6) | (1<<8))   @ Clear PB6 and PB8
 800015c:	f421 71a0 	bic.w	r1, r1, #320	@ 0x140
    ORR R1, R1, #((1<<9) | (1<<7))   @ Set PB9 and PB7
 8000160:	f441 7120 	orr.w	r1, r1, #640	@ 0x280
    STR R1, [R0]              @ Write back to ODR
 8000164:	6001      	str	r1, [r0, #0]
    BL delay_300ms
 8000166:	f000 f809 	bl	800017c <delay_300ms>

    @ Set GPIOB Pins 9 & 7 LOW, 8 & 6 HIGH
    LDR R1, [R0]              @ Read current GPIOB state
 800016a:	6801      	ldr	r1, [r0, #0]
    BIC R1, R1, #((1<<9) | (1<<7))   @ Clear PB9 and PB7
 800016c:	f421 7120 	bic.w	r1, r1, #640	@ 0x280
    ORR R1, R1, #((1<<8) | (1<<6))   @ Set PB8 and PB6
 8000170:	f441 71a0 	orr.w	r1, r1, #320	@ 0x140
    STR R1, [R0]              @ Write back to ODR
 8000174:	6001      	str	r1, [r0, #0]
    BL delay_300ms
 8000176:	f000 f801 	bl	800017c <delay_300ms>

    B loop  @ Repeat forever
 800017a:	e7ed      	b.n	8000158 <loop>

0800017c <delay_300ms>:

delay_300ms:
    LDR R2, =2400000   @ Adjust based on system clock (Assuming 8MHz)
 800017c:	4a05      	ldr	r2, [pc, #20]	@ (8000194 <delay_loop+0x16>)

0800017e <delay_loop>:
delay_loop:
    SUBS R2, R2, #1
 800017e:	3a01      	subs	r2, #1
    BNE delay_loop
 8000180:	d1fd      	bne.n	800017e <delay_loop>
    BX LR
 8000182:	4770      	bx	lr
    LDR R0, =RCC_APB2ENR
 8000184:	40021018 	.word	0x40021018
	LDR R0, =GPIOB_CRH
 8000188:	40010c04 	.word	0x40010c04
	LDR R0, =0x40010C00  @ GPIOB_CRL (for PB6 & PB7)
 800018c:	40010c00 	.word	0x40010c00
    LDR R0, =GPIOB_ODR
 8000190:	40010c0c 	.word	0x40010c0c
    LDR R2, =2400000   @ Adjust based on system clock (Assuming 8MHz)
 8000194:	00249f00 	.word	0x00249f00

08000198 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000198:	480c      	ldr	r0, [pc, #48]	@ (80001cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800019a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800019c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001a0:	480b      	ldr	r0, [pc, #44]	@ (80001d0 <LoopForever+0x6>)
  ldr r1, =_edata
 80001a2:	490c      	ldr	r1, [pc, #48]	@ (80001d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001a4:	4a0c      	ldr	r2, [pc, #48]	@ (80001d8 <LoopForever+0xe>)
  movs r3, #0
 80001a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001a8:	e002      	b.n	80001b0 <LoopCopyDataInit>

080001aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001ae:	3304      	adds	r3, #4

080001b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001b4:	d3f9      	bcc.n	80001aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001b6:	4a09      	ldr	r2, [pc, #36]	@ (80001dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80001b8:	4c09      	ldr	r4, [pc, #36]	@ (80001e0 <LoopForever+0x16>)
  movs r3, #0
 80001ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001bc:	e001      	b.n	80001c2 <LoopFillZerobss>

080001be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001c0:	3204      	adds	r2, #4

080001c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001c4:	d3fb      	bcc.n	80001be <FillZerobss>

/* Call static constructors */
  //bl __libc_init_array
/* Call the application's entry point.*/
  bl main
 80001c6:	f7ff ffb3 	bl	8000130 <main>

080001ca <LoopForever>:

LoopForever:
  b LoopForever
 80001ca:	e7fe      	b.n	80001ca <LoopForever>
  ldr   r0, =_estack
 80001cc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80001d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001d4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80001d8:	080001e8 	.word	0x080001e8
  ldr r2, =_sbss
 80001dc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80001e0:	20000000 	.word	0x20000000

080001e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001e4:	e7fe      	b.n	80001e4 <ADC1_2_IRQHandler>
	...
