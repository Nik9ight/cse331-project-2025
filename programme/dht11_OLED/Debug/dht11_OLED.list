
dht11_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043d0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001560  080044dc  080044dc  000054dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a3c  08005a3c  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005a3c  08005a3c  0000706c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005a3c  08005a3c  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a3c  08005a3c  00006a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a40  08005a40  00006a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005a44  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000067c  2000006c  08005ab0  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006e8  08005ab0  000076e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b68e  00000000  00000000  00007095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d14  00000000  00000000  00012723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00014438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a55  00000000  00000000  00015168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f4f  00000000  00000000  00015bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb41  00000000  00000000  0002db0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ad6d  00000000  00000000  0003d64d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c83ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e7c  00000000  00000000  000c8400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000cc27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	080044c4 	.word	0x080044c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	080044c4 	.word	0x080044c4

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	@ 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	3a01      	subs	r2, #1
 8000a42:	bf28      	it	cs
 8000a44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a48:	d2ed      	bcs.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_fmul>:
 8000ba4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ba8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bac:	bf1e      	ittt	ne
 8000bae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb2:	ea92 0f0c 	teqne	r2, ip
 8000bb6:	ea93 0f0c 	teqne	r3, ip
 8000bba:	d06f      	beq.n	8000c9c <__aeabi_fmul+0xf8>
 8000bbc:	441a      	add	r2, r3
 8000bbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc2:	0240      	lsls	r0, r0, #9
 8000bc4:	bf18      	it	ne
 8000bc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bca:	d01e      	beq.n	8000c0a <__aeabi_fmul+0x66>
 8000bcc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000bd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000be0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000be4:	bf3e      	ittt	cc
 8000be6:	0049      	lslcc	r1, r1, #1
 8000be8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bec:	005b      	lslcc	r3, r3, #1
 8000bee:	ea40 0001 	orr.w	r0, r0, r1
 8000bf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000bf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000bf8:	d81d      	bhi.n	8000c36 <__aeabi_fmul+0x92>
 8000bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	4770      	bx	lr
 8000c0a:	f090 0f00 	teq	r0, #0
 8000c0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c12:	bf08      	it	eq
 8000c14:	0249      	lsleq	r1, r1, #9
 8000c16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000c20:	bfc2      	ittt	gt
 8000c22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2a:	4770      	bxgt	lr
 8000c2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	dc5d      	bgt.n	8000cf4 <__aeabi_fmul+0x150>
 8000c38:	f112 0f19 	cmn.w	r2, #25
 8000c3c:	bfdc      	itt	le
 8000c3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c42:	4770      	bxle	lr
 8000c44:	f1c2 0200 	rsb	r2, r2, #0
 8000c48:	0041      	lsls	r1, r0, #1
 8000c4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4e:	f1c2 0220 	rsb	r2, r2, #32
 8000c52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5a:	f140 0000 	adc.w	r0, r0, #0
 8000c5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c62:	bf08      	it	eq
 8000c64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c68:	4770      	bx	lr
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c72:	bf02      	ittt	eq
 8000c74:	0040      	lsleq	r0, r0, #1
 8000c76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c7a:	3a01      	subeq	r2, #1
 8000c7c:	d0f9      	beq.n	8000c72 <__aeabi_fmul+0xce>
 8000c7e:	ea40 000c 	orr.w	r0, r0, ip
 8000c82:	f093 0f00 	teq	r3, #0
 8000c86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0049      	lsleq	r1, r1, #1
 8000c8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c92:	3b01      	subeq	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xe6>
 8000c96:	ea41 010c 	orr.w	r1, r1, ip
 8000c9a:	e78f      	b.n	8000bbc <__aeabi_fmul+0x18>
 8000c9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	bf18      	it	ne
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d00a      	beq.n	8000cc2 <__aeabi_fmul+0x11e>
 8000cac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cb0:	bf18      	it	ne
 8000cb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cb6:	d1d8      	bne.n	8000c6a <__aeabi_fmul+0xc6>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f090 0f00 	teq	r0, #0
 8000cc6:	bf17      	itett	ne
 8000cc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	f091 0f00 	teqne	r1, #0
 8000cd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000cd6:	d014      	beq.n	8000d02 <__aeabi_fmul+0x15e>
 8000cd8:	ea92 0f0c 	teq	r2, ip
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_fmul+0x13e>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d10f      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000ce2:	ea93 0f0c 	teq	r3, ip
 8000ce6:	d103      	bne.n	8000cf0 <__aeabi_fmul+0x14c>
 8000ce8:	024b      	lsls	r3, r1, #9
 8000cea:	bf18      	it	ne
 8000cec:	4608      	movne	r0, r1
 8000cee:	d108      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000cf0:	ea80 0001 	eor.w	r0, r0, r1
 8000cf4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cf8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d00:	4770      	bx	lr
 8000d02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_fdiv>:
 8000d0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d14:	bf1e      	ittt	ne
 8000d16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1a:	ea92 0f0c 	teqne	r2, ip
 8000d1e:	ea93 0f0c 	teqne	r3, ip
 8000d22:	d069      	beq.n	8000df8 <__aeabi_fdiv+0xec>
 8000d24:	eba2 0203 	sub.w	r2, r2, r3
 8000d28:	ea80 0c01 	eor.w	ip, r0, r1
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d32:	d037      	beq.n	8000da4 <__aeabi_fdiv+0x98>
 8000d34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d44:	428b      	cmp	r3, r1
 8000d46:	bf38      	it	cc
 8000d48:	005b      	lslcc	r3, r3, #1
 8000d4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d52:	428b      	cmp	r3, r1
 8000d54:	bf24      	itt	cs
 8000d56:	1a5b      	subcs	r3, r3, r1
 8000d58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d60:	bf24      	itt	cs
 8000d62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6e:	bf24      	itt	cs
 8000d70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8e:	d1e0      	bne.n	8000d52 <__aeabi_fdiv+0x46>
 8000d90:	2afd      	cmp	r2, #253	@ 0xfd
 8000d92:	f63f af50 	bhi.w	8000c36 <__aeabi_fmul+0x92>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000da8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dac:	327f      	adds	r2, #127	@ 0x7f
 8000dae:	bfc2      	ittt	gt
 8000db0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db8:	4770      	bxgt	lr
 8000dba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	e737      	b.n	8000c36 <__aeabi_fmul+0x92>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0040      	lsleq	r0, r0, #1
 8000dd2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dd6:	3a01      	subeq	r2, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fdiv+0xc2>
 8000dda:	ea40 000c 	orr.w	r0, r0, ip
 8000dde:	f093 0f00 	teq	r3, #0
 8000de2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0049      	lsleq	r1, r1, #1
 8000dea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dee:	3b01      	subeq	r3, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xda>
 8000df2:	ea41 010c 	orr.w	r1, r1, ip
 8000df6:	e795      	b.n	8000d24 <__aeabi_fdiv+0x18>
 8000df8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d108      	bne.n	8000e14 <__aeabi_fdiv+0x108>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	f47f af7d 	bne.w	8000d02 <__aeabi_fmul+0x15e>
 8000e08:	ea93 0f0c 	teq	r3, ip
 8000e0c:	f47f af70 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e776      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e14:	ea93 0f0c 	teq	r3, ip
 8000e18:	d104      	bne.n	8000e24 <__aeabi_fdiv+0x118>
 8000e1a:	024b      	lsls	r3, r1, #9
 8000e1c:	f43f af4c 	beq.w	8000cb8 <__aeabi_fmul+0x114>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e76e      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e2e:	d1ca      	bne.n	8000dc6 <__aeabi_fdiv+0xba>
 8000e30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e34:	f47f af5c 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e3c:	f47f af3c 	bne.w	8000cb8 <__aeabi_fmul+0x114>
 8000e40:	e75f      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e42:	bf00      	nop

08000e44 <microDelay>:
uint8_t TFD = 0;
char strCopy1[40];
char strCopy2[40];

void microDelay (uint16_t delay)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000e4e:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <microDelay+0x2c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2200      	movs	r2, #0
 8000e54:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000e56:	bf00      	nop
 8000e58:	4b05      	ldr	r3, [pc, #20]	@ (8000e70 <microDelay+0x2c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d3f9      	bcc.n	8000e58 <microDelay+0x14>
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	200000dc 	.word	0x200000dc

08000e74 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000e8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000e90:	2301      	movs	r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2302      	movs	r3, #2
 8000e96:	613b      	str	r3, [r7, #16]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	482c      	ldr	r0, [pc, #176]	@ (8000f54 <DHT11_Start+0xe0>)
 8000ea2:	f001 f821 	bl	8001ee8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eac:	4829      	ldr	r0, [pc, #164]	@ (8000f54 <DHT11_Start+0xe0>)
 8000eae:	f001 f9b6 	bl	800221e <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8000eb2:	2014      	movs	r0, #20
 8000eb4:	f000 ff10 	bl	8001cd8 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ebe:	4825      	ldr	r0, [pc, #148]	@ (8000f54 <DHT11_Start+0xe0>)
 8000ec0:	f001 f9ad 	bl	800221e <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8000ec4:	201e      	movs	r0, #30
 8000ec6:	f7ff ffbd 	bl	8000e44 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	481f      	ldr	r0, [pc, #124]	@ (8000f54 <DHT11_Start+0xe0>)
 8000ed8:	f001 f806 	bl	8001ee8 <HAL_GPIO_Init>
  microDelay (40);
 8000edc:	2028      	movs	r0, #40	@ 0x28
 8000ede:	f7ff ffb1 	bl	8000e44 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000ee2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ee6:	481b      	ldr	r0, [pc, #108]	@ (8000f54 <DHT11_Start+0xe0>)
 8000ee8:	f001 f982 	bl	80021f0 <HAL_GPIO_ReadPin>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10c      	bne.n	8000f0c <DHT11_Start+0x98>
  {
    microDelay (80);
 8000ef2:	2050      	movs	r0, #80	@ 0x50
 8000ef4:	f7ff ffa6 	bl	8000e44 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000ef8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000efc:	4815      	ldr	r0, [pc, #84]	@ (8000f54 <DHT11_Start+0xe0>)
 8000efe:	f001 f977 	bl	80021f0 <HAL_GPIO_ReadPin>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <DHT11_Start+0x98>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8000f0c:	f000 feda 	bl	8001cc4 <HAL_GetTick>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4a11      	ldr	r2, [pc, #68]	@ (8000f58 <DHT11_Start+0xe4>)
 8000f14:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8000f16:	f000 fed5 	bl	8001cc4 <HAL_GetTick>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a0f      	ldr	r2, [pc, #60]	@ (8000f5c <DHT11_Start+0xe8>)
 8000f1e:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000f20:	e004      	b.n	8000f2c <DHT11_Start+0xb8>
  {
    cMillis = HAL_GetTick();
 8000f22:	f000 fecf 	bl	8001cc4 <HAL_GetTick>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4a0c      	ldr	r2, [pc, #48]	@ (8000f5c <DHT11_Start+0xe8>)
 8000f2a:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000f2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f30:	4808      	ldr	r0, [pc, #32]	@ (8000f54 <DHT11_Start+0xe0>)
 8000f32:	f001 f95d 	bl	80021f0 <HAL_GPIO_ReadPin>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d006      	beq.n	8000f4a <DHT11_Start+0xd6>
 8000f3c:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <DHT11_Start+0xe4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	1c9a      	adds	r2, r3, #2
 8000f42:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <DHT11_Start+0xe8>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d8eb      	bhi.n	8000f22 <DHT11_Start+0xae>
  }
  return Response;
 8000f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40010c00 	.word	0x40010c00
 8000f58:	2000012c 	.word	0x2000012c
 8000f5c:	20000130 	.word	0x20000130

08000f60 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	71fb      	strb	r3, [r7, #7]
 8000f6a:	e066      	b.n	800103a <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 8000f6c:	f000 feaa 	bl	8001cc4 <HAL_GetTick>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a36      	ldr	r2, [pc, #216]	@ (800104c <DHT11_Read+0xec>)
 8000f74:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000f76:	f000 fea5 	bl	8001cc4 <HAL_GetTick>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a34      	ldr	r2, [pc, #208]	@ (8001050 <DHT11_Read+0xf0>)
 8000f7e:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000f80:	e004      	b.n	8000f8c <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8000f82:	f000 fe9f 	bl	8001cc4 <HAL_GetTick>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4a31      	ldr	r2, [pc, #196]	@ (8001050 <DHT11_Read+0xf0>)
 8000f8a:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000f8c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f90:	4830      	ldr	r0, [pc, #192]	@ (8001054 <DHT11_Read+0xf4>)
 8000f92:	f001 f92d 	bl	80021f0 <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d106      	bne.n	8000faa <DHT11_Read+0x4a>
 8000f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800104c <DHT11_Read+0xec>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	1c9a      	adds	r2, r3, #2
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8001050 <DHT11_Read+0xf0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d8eb      	bhi.n	8000f82 <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 8000faa:	2028      	movs	r0, #40	@ 0x28
 8000fac:	f7ff ff4a 	bl	8000e44 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000fb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fb4:	4827      	ldr	r0, [pc, #156]	@ (8001054 <DHT11_Read+0xf4>)
 8000fb6:	f001 f91b 	bl	80021f0 <HAL_GPIO_ReadPin>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d10e      	bne.n	8000fde <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f1c3 0307 	rsb	r3, r3, #7
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	b25b      	sxtb	r3, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	b25a      	sxtb	r2, r3
 8000fd2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	71bb      	strb	r3, [r7, #6]
 8000fdc:	e00b      	b.n	8000ff6 <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f1c3 0307 	rsb	r3, r3, #7
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	b25a      	sxtb	r2, r3
 8000fec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b25b      	sxtb	r3, r3
 8000ff4:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8000ff6:	f000 fe65 	bl	8001cc4 <HAL_GetTick>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a13      	ldr	r2, [pc, #76]	@ (800104c <DHT11_Read+0xec>)
 8000ffe:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001000:	f000 fe60 	bl	8001cc4 <HAL_GetTick>
 8001004:	4603      	mov	r3, r0
 8001006:	4a12      	ldr	r2, [pc, #72]	@ (8001050 <DHT11_Read+0xf0>)
 8001008:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800100a:	e004      	b.n	8001016 <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 800100c:	f000 fe5a 	bl	8001cc4 <HAL_GetTick>
 8001010:	4603      	mov	r3, r0
 8001012:	4a0f      	ldr	r2, [pc, #60]	@ (8001050 <DHT11_Read+0xf0>)
 8001014:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001016:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800101a:	480e      	ldr	r0, [pc, #56]	@ (8001054 <DHT11_Read+0xf4>)
 800101c:	f001 f8e8 	bl	80021f0 <HAL_GPIO_ReadPin>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d006      	beq.n	8001034 <DHT11_Read+0xd4>
 8001026:	4b09      	ldr	r3, [pc, #36]	@ (800104c <DHT11_Read+0xec>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	1c9a      	adds	r2, r3, #2
 800102c:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <DHT11_Read+0xf0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	429a      	cmp	r2, r3
 8001032:	d8eb      	bhi.n	800100c <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	3301      	adds	r3, #1
 8001038:	71fb      	strb	r3, [r7, #7]
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	2b07      	cmp	r3, #7
 800103e:	d995      	bls.n	8000f6c <DHT11_Read+0xc>
    }
  }
  return b;
 8001040:	79bb      	ldrb	r3, [r7, #6]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000012c 	.word	0x2000012c
 8001050:	20000130 	.word	0x20000130
 8001054:	40010c00 	.word	0x40010c00

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b598      	push	{r3, r4, r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105c:	f000 fdda 	bl	8001c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001060:	f000 f902 	bl	8001268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001064:	f000 f9c4 	bl	80013f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001068:	f000 f944 	bl	80012f4 <MX_I2C1_Init>
  MX_TIM1_Init();
 800106c:	f000 f970 	bl	8001350 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001070:	4869      	ldr	r0, [pc, #420]	@ (8001218 <main+0x1c0>)
 8001072:	f002 fb03 	bl	800367c <HAL_TIM_Base_Start>
  SSD1306_Init();  // initialize the OLED
 8001076:	f000 f9ef 	bl	8001458 <SSD1306_Init>

  SSD1306_GotoXY (0, 0);
 800107a:	2100      	movs	r1, #0
 800107c:	2000      	movs	r0, #0
 800107e:	f000 fb53 	bl	8001728 <SSD1306_GotoXY>
  SSD1306_Puts("Welcome", &Font_11x18, 1);
 8001082:	2201      	movs	r2, #1
 8001084:	4965      	ldr	r1, [pc, #404]	@ (800121c <main+0x1c4>)
 8001086:	4866      	ldr	r0, [pc, #408]	@ (8001220 <main+0x1c8>)
 8001088:	f000 fbe2 	bl	8001850 <SSD1306_Puts>
  SSD1306_GotoXY (0, 30);
 800108c:	211e      	movs	r1, #30
 800108e:	2000      	movs	r0, #0
 8001090:	f000 fb4a 	bl	8001728 <SSD1306_GotoXY>
  SSD1306_Puts("to CSE331", &Font_11x18, 1);
 8001094:	2201      	movs	r2, #1
 8001096:	4961      	ldr	r1, [pc, #388]	@ (800121c <main+0x1c4>)
 8001098:	4862      	ldr	r0, [pc, #392]	@ (8001224 <main+0x1cc>)
 800109a:	f000 fbd9 	bl	8001850 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 800109e:	f000 fa9f 	bl	80015e0 <SSD1306_UpdateScreen>
  HAL_Delay(2000);
 80010a2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010a6:	f000 fe17 	bl	8001cd8 <HAL_Delay>
  SSD1306_Clear();
 80010aa:	f000 fbf6 	bl	800189a <SSD1306_Clear>
 while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(DHT11_Start())
 80010ae:	f7ff fee1 	bl	8000e74 <DHT11_Start>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 80a9 	beq.w	800120c <main+0x1b4>
	      {
	        RHI = DHT11_Read(); // Relative humidity integral
 80010ba:	f7ff ff51 	bl	8000f60 <DHT11_Read>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b59      	ldr	r3, [pc, #356]	@ (8001228 <main+0x1d0>)
 80010c4:	701a      	strb	r2, [r3, #0]
	        RHD = DHT11_Read(); // Relative humidity decimal
 80010c6:	f7ff ff4b 	bl	8000f60 <DHT11_Read>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b57      	ldr	r3, [pc, #348]	@ (800122c <main+0x1d4>)
 80010d0:	701a      	strb	r2, [r3, #0]
	        TCI = DHT11_Read(); // Celsius integral
 80010d2:	f7ff ff45 	bl	8000f60 <DHT11_Read>
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	4b55      	ldr	r3, [pc, #340]	@ (8001230 <main+0x1d8>)
 80010dc:	701a      	strb	r2, [r3, #0]
	        TCD = DHT11_Read(); // Celsius decimal
 80010de:	f7ff ff3f 	bl	8000f60 <DHT11_Read>
 80010e2:	4603      	mov	r3, r0
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b53      	ldr	r3, [pc, #332]	@ (8001234 <main+0x1dc>)
 80010e8:	701a      	strb	r2, [r3, #0]
	        SUM = DHT11_Read(); // Check sum
 80010ea:	f7ff ff39 	bl	8000f60 <DHT11_Read>
 80010ee:	4603      	mov	r3, r0
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b51      	ldr	r3, [pc, #324]	@ (8001238 <main+0x1e0>)
 80010f4:	701a      	strb	r2, [r3, #0]
	        if (RHI + RHD + TCI + TCD == SUM)
 80010f6:	4b4c      	ldr	r3, [pc, #304]	@ (8001228 <main+0x1d0>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b4b      	ldr	r3, [pc, #300]	@ (800122c <main+0x1d4>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4413      	add	r3, r2
 8001102:	4a4b      	ldr	r2, [pc, #300]	@ (8001230 <main+0x1d8>)
 8001104:	7812      	ldrb	r2, [r2, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a4a      	ldr	r2, [pc, #296]	@ (8001234 <main+0x1dc>)
 800110a:	7812      	ldrb	r2, [r2, #0]
 800110c:	4413      	add	r3, r2
 800110e:	4a4a      	ldr	r2, [pc, #296]	@ (8001238 <main+0x1e0>)
 8001110:	7812      	ldrb	r2, [r2, #0]
 8001112:	4293      	cmp	r3, r2
 8001114:	d17a      	bne.n	800120c <main+0x1b4>
	        {

	          tCelsius = (float)TCI + (float)(TCD/10.0);
 8001116:	4b46      	ldr	r3, [pc, #280]	@ (8001230 <main+0x1d8>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fcea 	bl	8000af4 <__aeabi_ui2f>
 8001120:	4604      	mov	r4, r0
 8001122:	4b44      	ldr	r3, [pc, #272]	@ (8001234 <main+0x1dc>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff f962 	bl	80003f0 <__aeabi_i2d>
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	4b42      	ldr	r3, [pc, #264]	@ (800123c <main+0x1e4>)
 8001132:	f7ff faf1 	bl	8000718 <__aeabi_ddiv>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	4610      	mov	r0, r2
 800113c:	4619      	mov	r1, r3
 800113e:	f7ff fbd3 	bl	80008e8 <__aeabi_d2f>
 8001142:	4603      	mov	r3, r0
 8001144:	4619      	mov	r1, r3
 8001146:	4620      	mov	r0, r4
 8001148:	f7ff fc24 	bl	8000994 <__addsf3>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	4b3b      	ldr	r3, [pc, #236]	@ (8001240 <main+0x1e8>)
 8001152:	601a      	str	r2, [r3, #0]
	          tFahrenheit = tCelsius * 9/5 + 32;
 8001154:	4b3a      	ldr	r3, [pc, #232]	@ (8001240 <main+0x1e8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	493a      	ldr	r1, [pc, #232]	@ (8001244 <main+0x1ec>)
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fd22 	bl	8000ba4 <__aeabi_fmul>
 8001160:	4603      	mov	r3, r0
 8001162:	4939      	ldr	r1, [pc, #228]	@ (8001248 <main+0x1f0>)
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fdd1 	bl	8000d0c <__aeabi_fdiv>
 800116a:	4603      	mov	r3, r0
 800116c:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fc0f 	bl	8000994 <__addsf3>
 8001176:	4603      	mov	r3, r0
 8001178:	461a      	mov	r2, r3
 800117a:	4b34      	ldr	r3, [pc, #208]	@ (800124c <main+0x1f4>)
 800117c:	601a      	str	r2, [r3, #0]
	          RH = (float)RHI + (float)(RHD/10.0);
 800117e:	4b2a      	ldr	r3, [pc, #168]	@ (8001228 <main+0x1d0>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fcb6 	bl	8000af4 <__aeabi_ui2f>
 8001188:	4604      	mov	r4, r0
 800118a:	4b28      	ldr	r3, [pc, #160]	@ (800122c <main+0x1d4>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f92e 	bl	80003f0 <__aeabi_i2d>
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b28      	ldr	r3, [pc, #160]	@ (800123c <main+0x1e4>)
 800119a:	f7ff fabd 	bl	8000718 <__aeabi_ddiv>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f7ff fb9f 	bl	80008e8 <__aeabi_d2f>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4619      	mov	r1, r3
 80011ae:	4620      	mov	r0, r4
 80011b0:	f7ff fbf0 	bl	8000994 <__addsf3>
 80011b4:	4603      	mov	r3, r0
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b25      	ldr	r3, [pc, #148]	@ (8001250 <main+0x1f8>)
 80011ba:	601a      	str	r2, [r3, #0]


	          SSD1306_Clear();
 80011bc:	f000 fb6d 	bl	800189a <SSD1306_Clear>

	                  sprintf(strCopy1,"Temp: %d.%d C", TCI, TCD);
 80011c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001230 <main+0x1d8>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <main+0x1dc>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	4922      	ldr	r1, [pc, #136]	@ (8001254 <main+0x1fc>)
 80011cc:	4822      	ldr	r0, [pc, #136]	@ (8001258 <main+0x200>)
 80011ce:	f002 fcc9 	bl	8003b64 <siprintf>
	                  SSD1306_GotoXY(0, 0);
 80011d2:	2100      	movs	r1, #0
 80011d4:	2000      	movs	r0, #0
 80011d6:	f000 faa7 	bl	8001728 <SSD1306_GotoXY>
	                  SSD1306_Puts(strCopy1, &Font_7x10, 1);
 80011da:	2201      	movs	r2, #1
 80011dc:	491f      	ldr	r1, [pc, #124]	@ (800125c <main+0x204>)
 80011de:	481e      	ldr	r0, [pc, #120]	@ (8001258 <main+0x200>)
 80011e0:	f000 fb36 	bl	8001850 <SSD1306_Puts>

	                  sprintf(strCopy2,"Humidity: %d.%d %%", RHI, RHD);
 80011e4:	4b10      	ldr	r3, [pc, #64]	@ (8001228 <main+0x1d0>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b10      	ldr	r3, [pc, #64]	@ (800122c <main+0x1d4>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	491c      	ldr	r1, [pc, #112]	@ (8001260 <main+0x208>)
 80011f0:	481c      	ldr	r0, [pc, #112]	@ (8001264 <main+0x20c>)
 80011f2:	f002 fcb7 	bl	8003b64 <siprintf>
	                  SSD1306_GotoXY(0, 20);
 80011f6:	2114      	movs	r1, #20
 80011f8:	2000      	movs	r0, #0
 80011fa:	f000 fa95 	bl	8001728 <SSD1306_GotoXY>
	                  SSD1306_Puts(strCopy2, &Font_7x10, 1);
 80011fe:	2201      	movs	r2, #1
 8001200:	4916      	ldr	r1, [pc, #88]	@ (800125c <main+0x204>)
 8001202:	4818      	ldr	r0, [pc, #96]	@ (8001264 <main+0x20c>)
 8001204:	f000 fb24 	bl	8001850 <SSD1306_Puts>

	                  SSD1306_UpdateScreen();
 8001208:	f000 f9ea 	bl	80015e0 <SSD1306_UpdateScreen>

	        }

	      }
	      HAL_Delay(2000);
 800120c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001210:	f000 fd62 	bl	8001cd8 <HAL_Delay>
	  if(DHT11_Start())
 8001214:	e74b      	b.n	80010ae <main+0x56>
 8001216:	bf00      	nop
 8001218:	200000dc 	.word	0x200000dc
 800121c:	20000008 	.word	0x20000008
 8001220:	080044dc 	.word	0x080044dc
 8001224:	080044e4 	.word	0x080044e4
 8001228:	20000124 	.word	0x20000124
 800122c:	20000125 	.word	0x20000125
 8001230:	20000126 	.word	0x20000126
 8001234:	20000127 	.word	0x20000127
 8001238:	20000128 	.word	0x20000128
 800123c:	40240000 	.word	0x40240000
 8001240:	20000134 	.word	0x20000134
 8001244:	41100000 	.word	0x41100000
 8001248:	40a00000 	.word	0x40a00000
 800124c:	20000138 	.word	0x20000138
 8001250:	2000013c 	.word	0x2000013c
 8001254:	080044f0 	.word	0x080044f0
 8001258:	20000140 	.word	0x20000140
 800125c:	20000000 	.word	0x20000000
 8001260:	08004500 	.word	0x08004500
 8001264:	20000168 	.word	0x20000168

08001268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b090      	sub	sp, #64	@ 0x40
 800126c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126e:	f107 0318 	add.w	r3, r7, #24
 8001272:	2228      	movs	r2, #40	@ 0x28
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f002 fc96 	bl	8003ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800128a:	2301      	movs	r3, #1
 800128c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800128e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001292:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001298:	2301      	movs	r3, #1
 800129a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129c:	2302      	movs	r3, #2
 800129e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012a6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80012aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ac:	f107 0318 	add.w	r3, r7, #24
 80012b0:	4618      	mov	r0, r3
 80012b2:	f001 fd97 	bl	8002de4 <HAL_RCC_OscConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012bc:	f000 f8c6 	bl	800144c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c0:	230f      	movs	r3, #15
 80012c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c4:	2302      	movs	r3, #2
 80012c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	2102      	movs	r1, #2
 80012da:	4618      	mov	r0, r3
 80012dc:	f002 f804 	bl	80032e8 <HAL_RCC_ClockConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012e6:	f000 f8b1 	bl	800144c <Error_Handler>
  }
}
 80012ea:	bf00      	nop
 80012ec:	3740      	adds	r7, #64	@ 0x40
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012f8:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <MX_I2C1_Init+0x50>)
 80012fa:	4a13      	ldr	r2, [pc, #76]	@ (8001348 <MX_I2C1_Init+0x54>)
 80012fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012fe:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <MX_I2C1_Init+0x50>)
 8001300:	4a12      	ldr	r2, [pc, #72]	@ (800134c <MX_I2C1_Init+0x58>)
 8001302:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001304:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <MX_I2C1_Init+0x50>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <MX_I2C1_Init+0x50>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001310:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <MX_I2C1_Init+0x50>)
 8001312:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001316:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001318:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <MX_I2C1_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800131e:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <MX_I2C1_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001324:	4b07      	ldr	r3, [pc, #28]	@ (8001344 <MX_I2C1_Init+0x50>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <MX_I2C1_Init+0x50>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001330:	4804      	ldr	r0, [pc, #16]	@ (8001344 <MX_I2C1_Init+0x50>)
 8001332:	f000 ff8d 	bl	8002250 <HAL_I2C_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800133c:	f000 f886 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000088 	.word	0x20000088
 8001348:	40005400 	.word	0x40005400
 800134c:	00061a80 	.word	0x00061a80

08001350 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001364:	463b      	mov	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800136c:	4b1e      	ldr	r3, [pc, #120]	@ (80013e8 <MX_TIM1_Init+0x98>)
 800136e:	4a1f      	ldr	r2, [pc, #124]	@ (80013ec <MX_TIM1_Init+0x9c>)
 8001370:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001372:	4b1d      	ldr	r3, [pc, #116]	@ (80013e8 <MX_TIM1_Init+0x98>)
 8001374:	2247      	movs	r2, #71	@ 0x47
 8001376:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001378:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <MX_TIM1_Init+0x98>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800137e:	4b1a      	ldr	r3, [pc, #104]	@ (80013e8 <MX_TIM1_Init+0x98>)
 8001380:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001384:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001386:	4b18      	ldr	r3, [pc, #96]	@ (80013e8 <MX_TIM1_Init+0x98>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800138c:	4b16      	ldr	r3, [pc, #88]	@ (80013e8 <MX_TIM1_Init+0x98>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001392:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <MX_TIM1_Init+0x98>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001398:	4813      	ldr	r0, [pc, #76]	@ (80013e8 <MX_TIM1_Init+0x98>)
 800139a:	f002 f91f 	bl	80035dc <HAL_TIM_Base_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80013a4:	f000 f852 	bl	800144c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013ae:	f107 0308 	add.w	r3, r7, #8
 80013b2:	4619      	mov	r1, r3
 80013b4:	480c      	ldr	r0, [pc, #48]	@ (80013e8 <MX_TIM1_Init+0x98>)
 80013b6:	f002 f9ab 	bl	8003710 <HAL_TIM_ConfigClockSource>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80013c0:	f000 f844 	bl	800144c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c4:	2300      	movs	r3, #0
 80013c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013cc:	463b      	mov	r3, r7
 80013ce:	4619      	mov	r1, r3
 80013d0:	4805      	ldr	r0, [pc, #20]	@ (80013e8 <MX_TIM1_Init+0x98>)
 80013d2:	f002 fb69 	bl	8003aa8 <HAL_TIMEx_MasterConfigSynchronization>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013dc:	f000 f836 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	200000dc 	.word	0x200000dc
 80013ec:	40012c00 	.word	0x40012c00

080013f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f6:	4b14      	ldr	r3, [pc, #80]	@ (8001448 <MX_GPIO_Init+0x58>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	4a13      	ldr	r2, [pc, #76]	@ (8001448 <MX_GPIO_Init+0x58>)
 80013fc:	f043 0320 	orr.w	r3, r3, #32
 8001400:	6193      	str	r3, [r2, #24]
 8001402:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <MX_GPIO_Init+0x58>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	f003 0320 	and.w	r3, r3, #32
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <MX_GPIO_Init+0x58>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	4a0d      	ldr	r2, [pc, #52]	@ (8001448 <MX_GPIO_Init+0x58>)
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	6193      	str	r3, [r2, #24]
 800141a:	4b0b      	ldr	r3, [pc, #44]	@ (8001448 <MX_GPIO_Init+0x58>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <MX_GPIO_Init+0x58>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	4a07      	ldr	r2, [pc, #28]	@ (8001448 <MX_GPIO_Init+0x58>)
 800142c:	f043 0308 	orr.w	r3, r3, #8
 8001430:	6193      	str	r3, [r2, #24]
 8001432:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <MX_GPIO_Init+0x58>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	40021000 	.word	0x40021000

0800144c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001450:	b672      	cpsid	i
}
 8001452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <Error_Handler+0x8>

08001458 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800145e:	f000 fa25 	bl	80018ac <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001462:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001466:	2201      	movs	r2, #1
 8001468:	2178      	movs	r1, #120	@ 0x78
 800146a:	485b      	ldr	r0, [pc, #364]	@ (80015d8 <SSD1306_Init+0x180>)
 800146c:	f001 f932 	bl	80026d4 <HAL_I2C_IsDeviceReady>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001476:	2300      	movs	r3, #0
 8001478:	e0a9      	b.n	80015ce <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800147a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800147e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001480:	e002      	b.n	8001488 <SSD1306_Init+0x30>
		p--;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3b01      	subs	r3, #1
 8001486:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f9      	bne.n	8001482 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800148e:	22ae      	movs	r2, #174	@ 0xae
 8001490:	2100      	movs	r1, #0
 8001492:	2078      	movs	r0, #120	@ 0x78
 8001494:	f000 fa84 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001498:	2220      	movs	r2, #32
 800149a:	2100      	movs	r1, #0
 800149c:	2078      	movs	r0, #120	@ 0x78
 800149e:	f000 fa7f 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80014a2:	2210      	movs	r2, #16
 80014a4:	2100      	movs	r1, #0
 80014a6:	2078      	movs	r0, #120	@ 0x78
 80014a8:	f000 fa7a 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80014ac:	22b0      	movs	r2, #176	@ 0xb0
 80014ae:	2100      	movs	r1, #0
 80014b0:	2078      	movs	r0, #120	@ 0x78
 80014b2:	f000 fa75 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80014b6:	22c8      	movs	r2, #200	@ 0xc8
 80014b8:	2100      	movs	r1, #0
 80014ba:	2078      	movs	r0, #120	@ 0x78
 80014bc:	f000 fa70 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80014c0:	2200      	movs	r2, #0
 80014c2:	2100      	movs	r1, #0
 80014c4:	2078      	movs	r0, #120	@ 0x78
 80014c6:	f000 fa6b 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80014ca:	2210      	movs	r2, #16
 80014cc:	2100      	movs	r1, #0
 80014ce:	2078      	movs	r0, #120	@ 0x78
 80014d0:	f000 fa66 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80014d4:	2240      	movs	r2, #64	@ 0x40
 80014d6:	2100      	movs	r1, #0
 80014d8:	2078      	movs	r0, #120	@ 0x78
 80014da:	f000 fa61 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80014de:	2281      	movs	r2, #129	@ 0x81
 80014e0:	2100      	movs	r1, #0
 80014e2:	2078      	movs	r0, #120	@ 0x78
 80014e4:	f000 fa5c 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80014e8:	22ff      	movs	r2, #255	@ 0xff
 80014ea:	2100      	movs	r1, #0
 80014ec:	2078      	movs	r0, #120	@ 0x78
 80014ee:	f000 fa57 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80014f2:	22a1      	movs	r2, #161	@ 0xa1
 80014f4:	2100      	movs	r1, #0
 80014f6:	2078      	movs	r0, #120	@ 0x78
 80014f8:	f000 fa52 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80014fc:	22a6      	movs	r2, #166	@ 0xa6
 80014fe:	2100      	movs	r1, #0
 8001500:	2078      	movs	r0, #120	@ 0x78
 8001502:	f000 fa4d 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001506:	22a8      	movs	r2, #168	@ 0xa8
 8001508:	2100      	movs	r1, #0
 800150a:	2078      	movs	r0, #120	@ 0x78
 800150c:	f000 fa48 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001510:	223f      	movs	r2, #63	@ 0x3f
 8001512:	2100      	movs	r1, #0
 8001514:	2078      	movs	r0, #120	@ 0x78
 8001516:	f000 fa43 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800151a:	22a4      	movs	r2, #164	@ 0xa4
 800151c:	2100      	movs	r1, #0
 800151e:	2078      	movs	r0, #120	@ 0x78
 8001520:	f000 fa3e 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001524:	22d3      	movs	r2, #211	@ 0xd3
 8001526:	2100      	movs	r1, #0
 8001528:	2078      	movs	r0, #120	@ 0x78
 800152a:	f000 fa39 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	2078      	movs	r0, #120	@ 0x78
 8001534:	f000 fa34 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001538:	22d5      	movs	r2, #213	@ 0xd5
 800153a:	2100      	movs	r1, #0
 800153c:	2078      	movs	r0, #120	@ 0x78
 800153e:	f000 fa2f 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001542:	22f0      	movs	r2, #240	@ 0xf0
 8001544:	2100      	movs	r1, #0
 8001546:	2078      	movs	r0, #120	@ 0x78
 8001548:	f000 fa2a 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800154c:	22d9      	movs	r2, #217	@ 0xd9
 800154e:	2100      	movs	r1, #0
 8001550:	2078      	movs	r0, #120	@ 0x78
 8001552:	f000 fa25 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001556:	2222      	movs	r2, #34	@ 0x22
 8001558:	2100      	movs	r1, #0
 800155a:	2078      	movs	r0, #120	@ 0x78
 800155c:	f000 fa20 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001560:	22da      	movs	r2, #218	@ 0xda
 8001562:	2100      	movs	r1, #0
 8001564:	2078      	movs	r0, #120	@ 0x78
 8001566:	f000 fa1b 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800156a:	2212      	movs	r2, #18
 800156c:	2100      	movs	r1, #0
 800156e:	2078      	movs	r0, #120	@ 0x78
 8001570:	f000 fa16 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001574:	22db      	movs	r2, #219	@ 0xdb
 8001576:	2100      	movs	r1, #0
 8001578:	2078      	movs	r0, #120	@ 0x78
 800157a:	f000 fa11 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800157e:	2220      	movs	r2, #32
 8001580:	2100      	movs	r1, #0
 8001582:	2078      	movs	r0, #120	@ 0x78
 8001584:	f000 fa0c 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001588:	228d      	movs	r2, #141	@ 0x8d
 800158a:	2100      	movs	r1, #0
 800158c:	2078      	movs	r0, #120	@ 0x78
 800158e:	f000 fa07 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001592:	2214      	movs	r2, #20
 8001594:	2100      	movs	r1, #0
 8001596:	2078      	movs	r0, #120	@ 0x78
 8001598:	f000 fa02 	bl	80019a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800159c:	22af      	movs	r2, #175	@ 0xaf
 800159e:	2100      	movs	r1, #0
 80015a0:	2078      	movs	r0, #120	@ 0x78
 80015a2:	f000 f9fd 	bl	80019a0 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80015a6:	222e      	movs	r2, #46	@ 0x2e
 80015a8:	2100      	movs	r1, #0
 80015aa:	2078      	movs	r0, #120	@ 0x78
 80015ac:	f000 f9f8 	bl	80019a0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80015b0:	2000      	movs	r0, #0
 80015b2:	f000 f843 	bl	800163c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80015b6:	f000 f813 	bl	80015e0 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80015ba:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <SSD1306_Init+0x184>)
 80015bc:	2200      	movs	r2, #0
 80015be:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <SSD1306_Init+0x184>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80015c6:	4b05      	ldr	r3, [pc, #20]	@ (80015dc <SSD1306_Init+0x184>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80015cc:	2301      	movs	r3, #1
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000088 	.word	0x20000088
 80015dc:	20000590 	.word	0x20000590

080015e0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80015e6:	2300      	movs	r3, #0
 80015e8:	71fb      	strb	r3, [r7, #7]
 80015ea:	e01d      	b.n	8001628 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	3b50      	subs	r3, #80	@ 0x50
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	2100      	movs	r1, #0
 80015f6:	2078      	movs	r0, #120	@ 0x78
 80015f8:	f000 f9d2 	bl	80019a0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2100      	movs	r1, #0
 8001600:	2078      	movs	r0, #120	@ 0x78
 8001602:	f000 f9cd 	bl	80019a0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001606:	2210      	movs	r2, #16
 8001608:	2100      	movs	r1, #0
 800160a:	2078      	movs	r0, #120	@ 0x78
 800160c:	f000 f9c8 	bl	80019a0 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	01db      	lsls	r3, r3, #7
 8001614:	4a08      	ldr	r2, [pc, #32]	@ (8001638 <SSD1306_UpdateScreen+0x58>)
 8001616:	441a      	add	r2, r3
 8001618:	2380      	movs	r3, #128	@ 0x80
 800161a:	2140      	movs	r1, #64	@ 0x40
 800161c:	2078      	movs	r0, #120	@ 0x78
 800161e:	f000 f959 	bl	80018d4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	3301      	adds	r3, #1
 8001626:	71fb      	strb	r3, [r7, #7]
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	2b07      	cmp	r3, #7
 800162c:	d9de      	bls.n	80015ec <SSD1306_UpdateScreen+0xc>
	}
}
 800162e:	bf00      	nop
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000190 	.word	0x20000190

0800163c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <SSD1306_Fill+0x14>
 800164c:	2300      	movs	r3, #0
 800164e:	e000      	b.n	8001652 <SSD1306_Fill+0x16>
 8001650:	23ff      	movs	r3, #255	@ 0xff
 8001652:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001656:	4619      	mov	r1, r3
 8001658:	4803      	ldr	r0, [pc, #12]	@ (8001668 <SSD1306_Fill+0x2c>)
 800165a:	f002 faa5 	bl	8003ba8 <memset>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000190 	.word	0x20000190

0800166c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	80fb      	strh	r3, [r7, #6]
 8001676:	460b      	mov	r3, r1
 8001678:	80bb      	strh	r3, [r7, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	70fb      	strb	r3, [r7, #3]
	if (
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	2b7f      	cmp	r3, #127	@ 0x7f
 8001682:	d848      	bhi.n	8001716 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001684:	88bb      	ldrh	r3, [r7, #4]
 8001686:	2b3f      	cmp	r3, #63	@ 0x3f
 8001688:	d845      	bhi.n	8001716 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800168a:	4b25      	ldr	r3, [pc, #148]	@ (8001720 <SSD1306_DrawPixel+0xb4>)
 800168c:	791b      	ldrb	r3, [r3, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d006      	beq.n	80016a0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	2b00      	cmp	r3, #0
 8001696:	bf0c      	ite	eq
 8001698:	2301      	moveq	r3, #1
 800169a:	2300      	movne	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d11a      	bne.n	80016dc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80016a6:	88fa      	ldrh	r2, [r7, #6]
 80016a8:	88bb      	ldrh	r3, [r7, #4]
 80016aa:	08db      	lsrs	r3, r3, #3
 80016ac:	b298      	uxth	r0, r3
 80016ae:	4603      	mov	r3, r0
 80016b0:	01db      	lsls	r3, r3, #7
 80016b2:	4413      	add	r3, r2
 80016b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001724 <SSD1306_DrawPixel+0xb8>)
 80016b6:	5cd3      	ldrb	r3, [r2, r3]
 80016b8:	b25a      	sxtb	r2, r3
 80016ba:	88bb      	ldrh	r3, [r7, #4]
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	2101      	movs	r1, #1
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	b25b      	sxtb	r3, r3
 80016c8:	4313      	orrs	r3, r2
 80016ca:	b259      	sxtb	r1, r3
 80016cc:	88fa      	ldrh	r2, [r7, #6]
 80016ce:	4603      	mov	r3, r0
 80016d0:	01db      	lsls	r3, r3, #7
 80016d2:	4413      	add	r3, r2
 80016d4:	b2c9      	uxtb	r1, r1
 80016d6:	4a13      	ldr	r2, [pc, #76]	@ (8001724 <SSD1306_DrawPixel+0xb8>)
 80016d8:	54d1      	strb	r1, [r2, r3]
 80016da:	e01d      	b.n	8001718 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80016dc:	88fa      	ldrh	r2, [r7, #6]
 80016de:	88bb      	ldrh	r3, [r7, #4]
 80016e0:	08db      	lsrs	r3, r3, #3
 80016e2:	b298      	uxth	r0, r3
 80016e4:	4603      	mov	r3, r0
 80016e6:	01db      	lsls	r3, r3, #7
 80016e8:	4413      	add	r3, r2
 80016ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001724 <SSD1306_DrawPixel+0xb8>)
 80016ec:	5cd3      	ldrb	r3, [r2, r3]
 80016ee:	b25a      	sxtb	r2, r3
 80016f0:	88bb      	ldrh	r3, [r7, #4]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	2101      	movs	r1, #1
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	b25b      	sxtb	r3, r3
 8001702:	4013      	ands	r3, r2
 8001704:	b259      	sxtb	r1, r3
 8001706:	88fa      	ldrh	r2, [r7, #6]
 8001708:	4603      	mov	r3, r0
 800170a:	01db      	lsls	r3, r3, #7
 800170c:	4413      	add	r3, r2
 800170e:	b2c9      	uxtb	r1, r1
 8001710:	4a04      	ldr	r2, [pc, #16]	@ (8001724 <SSD1306_DrawPixel+0xb8>)
 8001712:	54d1      	strb	r1, [r2, r3]
 8001714:	e000      	b.n	8001718 <SSD1306_DrawPixel+0xac>
		return;
 8001716:	bf00      	nop
	}
}
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	20000590 	.word	0x20000590
 8001724:	20000190 	.word	0x20000190

08001728 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	460a      	mov	r2, r1
 8001732:	80fb      	strh	r3, [r7, #6]
 8001734:	4613      	mov	r3, r2
 8001736:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001738:	4a05      	ldr	r2, [pc, #20]	@ (8001750 <SSD1306_GotoXY+0x28>)
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800173e:	4a04      	ldr	r2, [pc, #16]	@ (8001750 <SSD1306_GotoXY+0x28>)
 8001740:	88bb      	ldrh	r3, [r7, #4]
 8001742:	8053      	strh	r3, [r2, #2]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20000590 	.word	0x20000590

08001754 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	71fb      	strb	r3, [r7, #7]
 8001760:	4613      	mov	r3, r2
 8001762:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001764:	4b39      	ldr	r3, [pc, #228]	@ (800184c <SSD1306_Putc+0xf8>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	4413      	add	r3, r2
	if (
 8001770:	2b7f      	cmp	r3, #127	@ 0x7f
 8001772:	dc07      	bgt.n	8001784 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001774:	4b35      	ldr	r3, [pc, #212]	@ (800184c <SSD1306_Putc+0xf8>)
 8001776:	885b      	ldrh	r3, [r3, #2]
 8001778:	461a      	mov	r2, r3
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	785b      	ldrb	r3, [r3, #1]
 800177e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001780:	2b3f      	cmp	r3, #63	@ 0x3f
 8001782:	dd01      	ble.n	8001788 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001784:	2300      	movs	r3, #0
 8001786:	e05d      	b.n	8001844 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	e04b      	b.n	8001826 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	3b20      	subs	r3, #32
 8001796:	6839      	ldr	r1, [r7, #0]
 8001798:	7849      	ldrb	r1, [r1, #1]
 800179a:	fb01 f303 	mul.w	r3, r1, r3
 800179e:	4619      	mov	r1, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	440b      	add	r3, r1
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80017ac:	2300      	movs	r3, #0
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	e030      	b.n	8001814 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d010      	beq.n	80017e4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80017c2:	4b22      	ldr	r3, [pc, #136]	@ (800184c <SSD1306_Putc+0xf8>)
 80017c4:	881a      	ldrh	r2, [r3, #0]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	4413      	add	r3, r2
 80017cc:	b298      	uxth	r0, r3
 80017ce:	4b1f      	ldr	r3, [pc, #124]	@ (800184c <SSD1306_Putc+0xf8>)
 80017d0:	885a      	ldrh	r2, [r3, #2]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	4413      	add	r3, r2
 80017d8:	b29b      	uxth	r3, r3
 80017da:	79ba      	ldrb	r2, [r7, #6]
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff ff45 	bl	800166c <SSD1306_DrawPixel>
 80017e2:	e014      	b.n	800180e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80017e4:	4b19      	ldr	r3, [pc, #100]	@ (800184c <SSD1306_Putc+0xf8>)
 80017e6:	881a      	ldrh	r2, [r3, #0]
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	4413      	add	r3, r2
 80017ee:	b298      	uxth	r0, r3
 80017f0:	4b16      	ldr	r3, [pc, #88]	@ (800184c <SSD1306_Putc+0xf8>)
 80017f2:	885a      	ldrh	r2, [r3, #2]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	4413      	add	r3, r2
 80017fa:	b299      	uxth	r1, r3
 80017fc:	79bb      	ldrb	r3, [r7, #6]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	bf0c      	ite	eq
 8001802:	2301      	moveq	r3, #1
 8001804:	2300      	movne	r3, #0
 8001806:	b2db      	uxtb	r3, r3
 8001808:	461a      	mov	r2, r3
 800180a:	f7ff ff2f 	bl	800166c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	3301      	adds	r3, #1
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4293      	cmp	r3, r2
 800181e:	d3c8      	bcc.n	80017b2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	3301      	adds	r3, #1
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	785b      	ldrb	r3, [r3, #1]
 800182a:	461a      	mov	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	4293      	cmp	r3, r2
 8001830:	d3ad      	bcc.n	800178e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001832:	4b06      	ldr	r3, [pc, #24]	@ (800184c <SSD1306_Putc+0xf8>)
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	7812      	ldrb	r2, [r2, #0]
 800183a:	4413      	add	r3, r2
 800183c:	b29a      	uxth	r2, r3
 800183e:	4b03      	ldr	r3, [pc, #12]	@ (800184c <SSD1306_Putc+0xf8>)
 8001840:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001842:	79fb      	ldrb	r3, [r7, #7]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000590 	.word	0x20000590

08001850 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	4613      	mov	r3, r2
 800185c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800185e:	e012      	b.n	8001886 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	79fa      	ldrb	r2, [r7, #7]
 8001866:	68b9      	ldr	r1, [r7, #8]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff73 	bl	8001754 <SSD1306_Putc>
 800186e:	4603      	mov	r3, r0
 8001870:	461a      	mov	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d002      	beq.n	8001880 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	e008      	b.n	8001892 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3301      	adds	r3, #1
 8001884:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1e8      	bne.n	8001860 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	781b      	ldrb	r3, [r3, #0]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800189e:	2000      	movs	r0, #0
 80018a0:	f7ff fecc 	bl	800163c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80018a4:	f7ff fe9c 	bl	80015e0 <SSD1306_UpdateScreen>
}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}

080018ac <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80018b2:	4b07      	ldr	r3, [pc, #28]	@ (80018d0 <ssd1306_I2C_Init+0x24>)
 80018b4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018b6:	e002      	b.n	80018be <ssd1306_I2C_Init+0x12>
		p--;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1f9      	bne.n	80018b8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	0003d090 	.word	0x0003d090

080018d4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80018d4:	b590      	push	{r4, r7, lr}
 80018d6:	b0c7      	sub	sp, #284	@ 0x11c
 80018d8:	af02      	add	r7, sp, #8
 80018da:	4604      	mov	r4, r0
 80018dc:	4608      	mov	r0, r1
 80018de:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80018e2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80018e6:	600a      	str	r2, [r1, #0]
 80018e8:	4619      	mov	r1, r3
 80018ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018ee:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80018f2:	4622      	mov	r2, r4
 80018f4:	701a      	strb	r2, [r3, #0]
 80018f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018fa:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80018fe:	4602      	mov	r2, r0
 8001900:	701a      	strb	r2, [r3, #0]
 8001902:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001906:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800190a:	460a      	mov	r2, r1
 800190c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800190e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001912:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001916:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800191a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800191e:	7812      	ldrb	r2, [r2, #0]
 8001920:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001922:	2300      	movs	r3, #0
 8001924:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001928:	e015      	b.n	8001956 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800192a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800192e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001932:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	441a      	add	r2, r3
 800193a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800193e:	3301      	adds	r3, #1
 8001940:	7811      	ldrb	r1, [r2, #0]
 8001942:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001946:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800194a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800194c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001950:	3301      	adds	r3, #1
 8001952:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001956:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800195a:	b29b      	uxth	r3, r3
 800195c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001960:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001964:	8812      	ldrh	r2, [r2, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d8df      	bhi.n	800192a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800196a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800196e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	b299      	uxth	r1, r3
 8001976:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800197a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	3301      	adds	r3, #1
 8001982:	b29b      	uxth	r3, r3
 8001984:	f107 020c 	add.w	r2, r7, #12
 8001988:	200a      	movs	r0, #10
 800198a:	9000      	str	r0, [sp, #0]
 800198c:	4803      	ldr	r0, [pc, #12]	@ (800199c <ssd1306_I2C_WriteMulti+0xc8>)
 800198e:	f000 fda3 	bl	80024d8 <HAL_I2C_Master_Transmit>
}
 8001992:	bf00      	nop
 8001994:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001998:	46bd      	mov	sp, r7
 800199a:	bd90      	pop	{r4, r7, pc}
 800199c:	20000088 	.word	0x20000088

080019a0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af02      	add	r7, sp, #8
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
 80019aa:	460b      	mov	r3, r1
 80019ac:	71bb      	strb	r3, [r7, #6]
 80019ae:	4613      	mov	r3, r2
 80019b0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80019b2:	79bb      	ldrb	r3, [r7, #6]
 80019b4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80019b6:	797b      	ldrb	r3, [r7, #5]
 80019b8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	b299      	uxth	r1, r3
 80019be:	f107 020c 	add.w	r2, r7, #12
 80019c2:	230a      	movs	r3, #10
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	2302      	movs	r3, #2
 80019c8:	4803      	ldr	r0, [pc, #12]	@ (80019d8 <ssd1306_I2C_Write+0x38>)
 80019ca:	f000 fd85 	bl	80024d8 <HAL_I2C_Master_Transmit>
}
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000088 	.word	0x20000088

080019dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019e2:	4b15      	ldr	r3, [pc, #84]	@ (8001a38 <HAL_MspInit+0x5c>)
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	4a14      	ldr	r2, [pc, #80]	@ (8001a38 <HAL_MspInit+0x5c>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6193      	str	r3, [r2, #24]
 80019ee:	4b12      	ldr	r3, [pc, #72]	@ (8001a38 <HAL_MspInit+0x5c>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001a38 <HAL_MspInit+0x5c>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001a38 <HAL_MspInit+0x5c>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a04:	61d3      	str	r3, [r2, #28]
 8001a06:	4b0c      	ldr	r3, [pc, #48]	@ (8001a38 <HAL_MspInit+0x5c>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a12:	4b0a      	ldr	r3, [pc, #40]	@ (8001a3c <HAL_MspInit+0x60>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	4a04      	ldr	r2, [pc, #16]	@ (8001a3c <HAL_MspInit+0x60>)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40010000 	.word	0x40010000

08001a40 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 0310 	add.w	r3, r7, #16
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a15      	ldr	r2, [pc, #84]	@ (8001ab0 <HAL_I2C_MspInit+0x70>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d123      	bne.n	8001aa8 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a60:	4b14      	ldr	r3, [pc, #80]	@ (8001ab4 <HAL_I2C_MspInit+0x74>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	4a13      	ldr	r2, [pc, #76]	@ (8001ab4 <HAL_I2C_MspInit+0x74>)
 8001a66:	f043 0308 	orr.w	r3, r3, #8
 8001a6a:	6193      	str	r3, [r2, #24]
 8001a6c:	4b11      	ldr	r3, [pc, #68]	@ (8001ab4 <HAL_I2C_MspInit+0x74>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a78:	23c0      	movs	r3, #192	@ 0xc0
 8001a7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a7c:	2312      	movs	r3, #18
 8001a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a80:	2303      	movs	r3, #3
 8001a82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a84:	f107 0310 	add.w	r3, r7, #16
 8001a88:	4619      	mov	r1, r3
 8001a8a:	480b      	ldr	r0, [pc, #44]	@ (8001ab8 <HAL_I2C_MspInit+0x78>)
 8001a8c:	f000 fa2c 	bl	8001ee8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a90:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <HAL_I2C_MspInit+0x74>)
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	4a07      	ldr	r2, [pc, #28]	@ (8001ab4 <HAL_I2C_MspInit+0x74>)
 8001a96:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a9a:	61d3      	str	r3, [r2, #28]
 8001a9c:	4b05      	ldr	r3, [pc, #20]	@ (8001ab4 <HAL_I2C_MspInit+0x74>)
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001aa8:	bf00      	nop
 8001aaa:	3720      	adds	r7, #32
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40005400 	.word	0x40005400
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40010c00 	.word	0x40010c00

08001abc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a09      	ldr	r2, [pc, #36]	@ (8001af0 <HAL_TIM_Base_MspInit+0x34>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d10b      	bne.n	8001ae6 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ace:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <HAL_TIM_Base_MspInit+0x38>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	4a08      	ldr	r2, [pc, #32]	@ (8001af4 <HAL_TIM_Base_MspInit+0x38>)
 8001ad4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ad8:	6193      	str	r3, [r2, #24]
 8001ada:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <HAL_TIM_Base_MspInit+0x38>)
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001ae6:	bf00      	nop
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	40012c00 	.word	0x40012c00
 8001af4:	40021000 	.word	0x40021000

08001af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <NMI_Handler+0x4>

08001b00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <HardFault_Handler+0x4>

08001b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <MemManage_Handler+0x4>

08001b10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <BusFault_Handler+0x4>

08001b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <UsageFault_Handler+0x4>

08001b20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b48:	f000 f8aa 	bl	8001ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b58:	4a14      	ldr	r2, [pc, #80]	@ (8001bac <_sbrk+0x5c>)
 8001b5a:	4b15      	ldr	r3, [pc, #84]	@ (8001bb0 <_sbrk+0x60>)
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b64:	4b13      	ldr	r3, [pc, #76]	@ (8001bb4 <_sbrk+0x64>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d102      	bne.n	8001b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	@ (8001bb4 <_sbrk+0x64>)
 8001b6e:	4a12      	ldr	r2, [pc, #72]	@ (8001bb8 <_sbrk+0x68>)
 8001b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b72:	4b10      	ldr	r3, [pc, #64]	@ (8001bb4 <_sbrk+0x64>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d207      	bcs.n	8001b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b80:	f002 f81a 	bl	8003bb8 <__errno>
 8001b84:	4603      	mov	r3, r0
 8001b86:	220c      	movs	r2, #12
 8001b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8e:	e009      	b.n	8001ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b90:	4b08      	ldr	r3, [pc, #32]	@ (8001bb4 <_sbrk+0x64>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b96:	4b07      	ldr	r3, [pc, #28]	@ (8001bb4 <_sbrk+0x64>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	4a05      	ldr	r2, [pc, #20]	@ (8001bb4 <_sbrk+0x64>)
 8001ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20005000 	.word	0x20005000
 8001bb0:	00000400 	.word	0x00000400
 8001bb4:	20000598 	.word	0x20000598
 8001bb8:	200006e8 	.word	0x200006e8

08001bbc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bc8:	f7ff fff8 	bl	8001bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bcc:	480b      	ldr	r0, [pc, #44]	@ (8001bfc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bce:	490c      	ldr	r1, [pc, #48]	@ (8001c00 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8001c04 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd4:	e002      	b.n	8001bdc <LoopCopyDataInit>

08001bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bda:	3304      	adds	r3, #4

08001bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be0:	d3f9      	bcc.n	8001bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be2:	4a09      	ldr	r2, [pc, #36]	@ (8001c08 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001be4:	4c09      	ldr	r4, [pc, #36]	@ (8001c0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be8:	e001      	b.n	8001bee <LoopFillZerobss>

08001bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bec:	3204      	adds	r2, #4

08001bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf0:	d3fb      	bcc.n	8001bea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bf2:	f001 ffe7 	bl	8003bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bf6:	f7ff fa2f 	bl	8001058 <main>
  bx lr
 8001bfa:	4770      	bx	lr
  ldr r0, =_sdata
 8001bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c00:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001c04:	08005a44 	.word	0x08005a44
  ldr r2, =_sbss
 8001c08:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001c0c:	200006e8 	.word	0x200006e8

08001c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c10:	e7fe      	b.n	8001c10 <ADC1_2_IRQHandler>
	...

08001c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c18:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <HAL_Init+0x28>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a07      	ldr	r2, [pc, #28]	@ (8001c3c <HAL_Init+0x28>)
 8001c1e:	f043 0310 	orr.w	r3, r3, #16
 8001c22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c24:	2003      	movs	r0, #3
 8001c26:	f000 f92b 	bl	8001e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2a:	200f      	movs	r0, #15
 8001c2c:	f000 f808 	bl	8001c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c30:	f7ff fed4 	bl	80019dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40022000 	.word	0x40022000

08001c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c48:	4b12      	ldr	r3, [pc, #72]	@ (8001c94 <HAL_InitTick+0x54>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b12      	ldr	r3, [pc, #72]	@ (8001c98 <HAL_InitTick+0x58>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4619      	mov	r1, r3
 8001c52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f935 	bl	8001ece <HAL_SYSTICK_Config>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00e      	b.n	8001c8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b0f      	cmp	r3, #15
 8001c72:	d80a      	bhi.n	8001c8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c74:	2200      	movs	r2, #0
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7c:	f000 f90b 	bl	8001e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c80:	4a06      	ldr	r2, [pc, #24]	@ (8001c9c <HAL_InitTick+0x5c>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e000      	b.n	8001c8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000010 	.word	0x20000010
 8001c98:	20000018 	.word	0x20000018
 8001c9c:	20000014 	.word	0x20000014

08001ca0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca4:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <HAL_IncTick+0x1c>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b05      	ldr	r3, [pc, #20]	@ (8001cc0 <HAL_IncTick+0x20>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	4a03      	ldr	r2, [pc, #12]	@ (8001cc0 <HAL_IncTick+0x20>)
 8001cb2:	6013      	str	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	20000018 	.word	0x20000018
 8001cc0:	2000059c 	.word	0x2000059c

08001cc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc8:	4b02      	ldr	r3, [pc, #8]	@ (8001cd4 <HAL_GetTick+0x10>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	2000059c 	.word	0x2000059c

08001cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce0:	f7ff fff0 	bl	8001cc4 <HAL_GetTick>
 8001ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf0:	d005      	beq.n	8001cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d1c <HAL_Delay+0x44>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cfe:	bf00      	nop
 8001d00:	f7ff ffe0 	bl	8001cc4 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d8f7      	bhi.n	8001d00 <HAL_Delay+0x28>
  {
  }
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000018 	.word	0x20000018

08001d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d30:	4b0c      	ldr	r3, [pc, #48]	@ (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d52:	4a04      	ldr	r2, [pc, #16]	@ (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	60d3      	str	r3, [r2, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d6c:	4b04      	ldr	r3, [pc, #16]	@ (8001d80 <__NVIC_GetPriorityGrouping+0x18>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	f003 0307 	and.w	r3, r3, #7
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	db0a      	blt.n	8001dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	490c      	ldr	r1, [pc, #48]	@ (8001dd0 <__NVIC_SetPriority+0x4c>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	0112      	lsls	r2, r2, #4
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dac:	e00a      	b.n	8001dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4908      	ldr	r1, [pc, #32]	@ (8001dd4 <__NVIC_SetPriority+0x50>)
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	3b04      	subs	r3, #4
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	761a      	strb	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000e100 	.word	0xe000e100
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	@ 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f1c3 0307 	rsb	r3, r3, #7
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	bf28      	it	cs
 8001df6:	2304      	movcs	r3, #4
 8001df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d902      	bls.n	8001e08 <NVIC_EncodePriority+0x30>
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3b03      	subs	r3, #3
 8001e06:	e000      	b.n	8001e0a <NVIC_EncodePriority+0x32>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43d9      	mvns	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	4313      	orrs	r3, r2
         );
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3724      	adds	r7, #36	@ 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e4c:	d301      	bcc.n	8001e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00f      	b.n	8001e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e52:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <SysTick_Config+0x40>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5a:	210f      	movs	r1, #15
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f7ff ff90 	bl	8001d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e64:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <SysTick_Config+0x40>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6a:	4b04      	ldr	r3, [pc, #16]	@ (8001e7c <SysTick_Config+0x40>)
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	e000e010 	.word	0xe000e010

08001e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ff49 	bl	8001d20 <__NVIC_SetPriorityGrouping>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea8:	f7ff ff5e 	bl	8001d68 <__NVIC_GetPriorityGrouping>
 8001eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	6978      	ldr	r0, [r7, #20]
 8001eb4:	f7ff ff90 	bl	8001dd8 <NVIC_EncodePriority>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff5f 	bl	8001d84 <__NVIC_SetPriority>
}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff ffb0 	bl	8001e3c <SysTick_Config>
 8001edc:	4603      	mov	r3, r0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b08b      	sub	sp, #44	@ 0x2c
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001efa:	e169      	b.n	80021d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001efc:	2201      	movs	r2, #1
 8001efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	69fa      	ldr	r2, [r7, #28]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	f040 8158 	bne.w	80021ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	4a9a      	ldr	r2, [pc, #616]	@ (8002188 <HAL_GPIO_Init+0x2a0>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d05e      	beq.n	8001fe2 <HAL_GPIO_Init+0xfa>
 8001f24:	4a98      	ldr	r2, [pc, #608]	@ (8002188 <HAL_GPIO_Init+0x2a0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d875      	bhi.n	8002016 <HAL_GPIO_Init+0x12e>
 8001f2a:	4a98      	ldr	r2, [pc, #608]	@ (800218c <HAL_GPIO_Init+0x2a4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d058      	beq.n	8001fe2 <HAL_GPIO_Init+0xfa>
 8001f30:	4a96      	ldr	r2, [pc, #600]	@ (800218c <HAL_GPIO_Init+0x2a4>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d86f      	bhi.n	8002016 <HAL_GPIO_Init+0x12e>
 8001f36:	4a96      	ldr	r2, [pc, #600]	@ (8002190 <HAL_GPIO_Init+0x2a8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d052      	beq.n	8001fe2 <HAL_GPIO_Init+0xfa>
 8001f3c:	4a94      	ldr	r2, [pc, #592]	@ (8002190 <HAL_GPIO_Init+0x2a8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d869      	bhi.n	8002016 <HAL_GPIO_Init+0x12e>
 8001f42:	4a94      	ldr	r2, [pc, #592]	@ (8002194 <HAL_GPIO_Init+0x2ac>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d04c      	beq.n	8001fe2 <HAL_GPIO_Init+0xfa>
 8001f48:	4a92      	ldr	r2, [pc, #584]	@ (8002194 <HAL_GPIO_Init+0x2ac>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d863      	bhi.n	8002016 <HAL_GPIO_Init+0x12e>
 8001f4e:	4a92      	ldr	r2, [pc, #584]	@ (8002198 <HAL_GPIO_Init+0x2b0>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d046      	beq.n	8001fe2 <HAL_GPIO_Init+0xfa>
 8001f54:	4a90      	ldr	r2, [pc, #576]	@ (8002198 <HAL_GPIO_Init+0x2b0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d85d      	bhi.n	8002016 <HAL_GPIO_Init+0x12e>
 8001f5a:	2b12      	cmp	r3, #18
 8001f5c:	d82a      	bhi.n	8001fb4 <HAL_GPIO_Init+0xcc>
 8001f5e:	2b12      	cmp	r3, #18
 8001f60:	d859      	bhi.n	8002016 <HAL_GPIO_Init+0x12e>
 8001f62:	a201      	add	r2, pc, #4	@ (adr r2, 8001f68 <HAL_GPIO_Init+0x80>)
 8001f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f68:	08001fe3 	.word	0x08001fe3
 8001f6c:	08001fbd 	.word	0x08001fbd
 8001f70:	08001fcf 	.word	0x08001fcf
 8001f74:	08002011 	.word	0x08002011
 8001f78:	08002017 	.word	0x08002017
 8001f7c:	08002017 	.word	0x08002017
 8001f80:	08002017 	.word	0x08002017
 8001f84:	08002017 	.word	0x08002017
 8001f88:	08002017 	.word	0x08002017
 8001f8c:	08002017 	.word	0x08002017
 8001f90:	08002017 	.word	0x08002017
 8001f94:	08002017 	.word	0x08002017
 8001f98:	08002017 	.word	0x08002017
 8001f9c:	08002017 	.word	0x08002017
 8001fa0:	08002017 	.word	0x08002017
 8001fa4:	08002017 	.word	0x08002017
 8001fa8:	08002017 	.word	0x08002017
 8001fac:	08001fc5 	.word	0x08001fc5
 8001fb0:	08001fd9 	.word	0x08001fd9
 8001fb4:	4a79      	ldr	r2, [pc, #484]	@ (800219c <HAL_GPIO_Init+0x2b4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d013      	beq.n	8001fe2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fba:	e02c      	b.n	8002016 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	623b      	str	r3, [r7, #32]
          break;
 8001fc2:	e029      	b.n	8002018 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	623b      	str	r3, [r7, #32]
          break;
 8001fcc:	e024      	b.n	8002018 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	3308      	adds	r3, #8
 8001fd4:	623b      	str	r3, [r7, #32]
          break;
 8001fd6:	e01f      	b.n	8002018 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	330c      	adds	r3, #12
 8001fde:	623b      	str	r3, [r7, #32]
          break;
 8001fe0:	e01a      	b.n	8002018 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d102      	bne.n	8001ff0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fea:	2304      	movs	r3, #4
 8001fec:	623b      	str	r3, [r7, #32]
          break;
 8001fee:	e013      	b.n	8002018 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d105      	bne.n	8002004 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ff8:	2308      	movs	r3, #8
 8001ffa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	611a      	str	r2, [r3, #16]
          break;
 8002002:	e009      	b.n	8002018 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002004:	2308      	movs	r3, #8
 8002006:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69fa      	ldr	r2, [r7, #28]
 800200c:	615a      	str	r2, [r3, #20]
          break;
 800200e:	e003      	b.n	8002018 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002010:	2300      	movs	r3, #0
 8002012:	623b      	str	r3, [r7, #32]
          break;
 8002014:	e000      	b.n	8002018 <HAL_GPIO_Init+0x130>
          break;
 8002016:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	2bff      	cmp	r3, #255	@ 0xff
 800201c:	d801      	bhi.n	8002022 <HAL_GPIO_Init+0x13a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	e001      	b.n	8002026 <HAL_GPIO_Init+0x13e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3304      	adds	r3, #4
 8002026:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	2bff      	cmp	r3, #255	@ 0xff
 800202c:	d802      	bhi.n	8002034 <HAL_GPIO_Init+0x14c>
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	e002      	b.n	800203a <HAL_GPIO_Init+0x152>
 8002034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002036:	3b08      	subs	r3, #8
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	210f      	movs	r1, #15
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	fa01 f303 	lsl.w	r3, r1, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	401a      	ands	r2, r3
 800204c:	6a39      	ldr	r1, [r7, #32]
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	fa01 f303 	lsl.w	r3, r1, r3
 8002054:	431a      	orrs	r2, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 80b1 	beq.w	80021ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002068:	4b4d      	ldr	r3, [pc, #308]	@ (80021a0 <HAL_GPIO_Init+0x2b8>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	4a4c      	ldr	r2, [pc, #304]	@ (80021a0 <HAL_GPIO_Init+0x2b8>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	6193      	str	r3, [r2, #24]
 8002074:	4b4a      	ldr	r3, [pc, #296]	@ (80021a0 <HAL_GPIO_Init+0x2b8>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002080:	4a48      	ldr	r2, [pc, #288]	@ (80021a4 <HAL_GPIO_Init+0x2bc>)
 8002082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	3302      	adds	r3, #2
 8002088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	220f      	movs	r2, #15
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4013      	ands	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a40      	ldr	r2, [pc, #256]	@ (80021a8 <HAL_GPIO_Init+0x2c0>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d013      	beq.n	80020d4 <HAL_GPIO_Init+0x1ec>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a3f      	ldr	r2, [pc, #252]	@ (80021ac <HAL_GPIO_Init+0x2c4>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d00d      	beq.n	80020d0 <HAL_GPIO_Init+0x1e8>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a3e      	ldr	r2, [pc, #248]	@ (80021b0 <HAL_GPIO_Init+0x2c8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d007      	beq.n	80020cc <HAL_GPIO_Init+0x1e4>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a3d      	ldr	r2, [pc, #244]	@ (80021b4 <HAL_GPIO_Init+0x2cc>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d101      	bne.n	80020c8 <HAL_GPIO_Init+0x1e0>
 80020c4:	2303      	movs	r3, #3
 80020c6:	e006      	b.n	80020d6 <HAL_GPIO_Init+0x1ee>
 80020c8:	2304      	movs	r3, #4
 80020ca:	e004      	b.n	80020d6 <HAL_GPIO_Init+0x1ee>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e002      	b.n	80020d6 <HAL_GPIO_Init+0x1ee>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <HAL_GPIO_Init+0x1ee>
 80020d4:	2300      	movs	r3, #0
 80020d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020d8:	f002 0203 	and.w	r2, r2, #3
 80020dc:	0092      	lsls	r2, r2, #2
 80020de:	4093      	lsls	r3, r2
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020e6:	492f      	ldr	r1, [pc, #188]	@ (80021a4 <HAL_GPIO_Init+0x2bc>)
 80020e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ea:	089b      	lsrs	r3, r3, #2
 80020ec:	3302      	adds	r3, #2
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d006      	beq.n	800210e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002100:	4b2d      	ldr	r3, [pc, #180]	@ (80021b8 <HAL_GPIO_Init+0x2d0>)
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	492c      	ldr	r1, [pc, #176]	@ (80021b8 <HAL_GPIO_Init+0x2d0>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	608b      	str	r3, [r1, #8]
 800210c:	e006      	b.n	800211c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800210e:	4b2a      	ldr	r3, [pc, #168]	@ (80021b8 <HAL_GPIO_Init+0x2d0>)
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	43db      	mvns	r3, r3
 8002116:	4928      	ldr	r1, [pc, #160]	@ (80021b8 <HAL_GPIO_Init+0x2d0>)
 8002118:	4013      	ands	r3, r2
 800211a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d006      	beq.n	8002136 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002128:	4b23      	ldr	r3, [pc, #140]	@ (80021b8 <HAL_GPIO_Init+0x2d0>)
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	4922      	ldr	r1, [pc, #136]	@ (80021b8 <HAL_GPIO_Init+0x2d0>)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	60cb      	str	r3, [r1, #12]
 8002134:	e006      	b.n	8002144 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002136:	4b20      	ldr	r3, [pc, #128]	@ (80021b8 <HAL_GPIO_Init+0x2d0>)
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	43db      	mvns	r3, r3
 800213e:	491e      	ldr	r1, [pc, #120]	@ (80021b8 <HAL_GPIO_Init+0x2d0>)
 8002140:	4013      	ands	r3, r2
 8002142:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d006      	beq.n	800215e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002150:	4b19      	ldr	r3, [pc, #100]	@ (80021b8 <HAL_GPIO_Init+0x2d0>)
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	4918      	ldr	r1, [pc, #96]	@ (80021b8 <HAL_GPIO_Init+0x2d0>)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	604b      	str	r3, [r1, #4]
 800215c:	e006      	b.n	800216c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800215e:	4b16      	ldr	r3, [pc, #88]	@ (80021b8 <HAL_GPIO_Init+0x2d0>)
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	43db      	mvns	r3, r3
 8002166:	4914      	ldr	r1, [pc, #80]	@ (80021b8 <HAL_GPIO_Init+0x2d0>)
 8002168:	4013      	ands	r3, r2
 800216a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d021      	beq.n	80021bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002178:	4b0f      	ldr	r3, [pc, #60]	@ (80021b8 <HAL_GPIO_Init+0x2d0>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	490e      	ldr	r1, [pc, #56]	@ (80021b8 <HAL_GPIO_Init+0x2d0>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	4313      	orrs	r3, r2
 8002182:	600b      	str	r3, [r1, #0]
 8002184:	e021      	b.n	80021ca <HAL_GPIO_Init+0x2e2>
 8002186:	bf00      	nop
 8002188:	10320000 	.word	0x10320000
 800218c:	10310000 	.word	0x10310000
 8002190:	10220000 	.word	0x10220000
 8002194:	10210000 	.word	0x10210000
 8002198:	10120000 	.word	0x10120000
 800219c:	10110000 	.word	0x10110000
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40010000 	.word	0x40010000
 80021a8:	40010800 	.word	0x40010800
 80021ac:	40010c00 	.word	0x40010c00
 80021b0:	40011000 	.word	0x40011000
 80021b4:	40011400 	.word	0x40011400
 80021b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021bc:	4b0b      	ldr	r3, [pc, #44]	@ (80021ec <HAL_GPIO_Init+0x304>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	43db      	mvns	r3, r3
 80021c4:	4909      	ldr	r1, [pc, #36]	@ (80021ec <HAL_GPIO_Init+0x304>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021cc:	3301      	adds	r3, #1
 80021ce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d6:	fa22 f303 	lsr.w	r3, r2, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f47f ae8e 	bne.w	8001efc <HAL_GPIO_Init+0x14>
  }
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	372c      	adds	r7, #44	@ 0x2c
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr
 80021ec:	40010400 	.word	0x40010400

080021f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	887b      	ldrh	r3, [r7, #2]
 8002202:	4013      	ands	r3, r2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d002      	beq.n	800220e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002208:	2301      	movs	r3, #1
 800220a:	73fb      	strb	r3, [r7, #15]
 800220c:	e001      	b.n	8002212 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800220e:	2300      	movs	r3, #0
 8002210:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002212:	7bfb      	ldrb	r3, [r7, #15]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr

0800221e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	807b      	strh	r3, [r7, #2]
 800222a:	4613      	mov	r3, r2
 800222c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800222e:	787b      	ldrb	r3, [r7, #1]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002234:	887a      	ldrh	r2, [r7, #2]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800223a:	e003      	b.n	8002244 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800223c:	887b      	ldrh	r3, [r7, #2]
 800223e:	041a      	lsls	r2, r3, #16
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	611a      	str	r2, [r3, #16]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
	...

08002250 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e12b      	b.n	80024ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d106      	bne.n	800227c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff fbe2 	bl	8001a40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2224      	movs	r2, #36	@ 0x24
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0201 	bic.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022b4:	f001 f960 	bl	8003578 <HAL_RCC_GetPCLK1Freq>
 80022b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4a81      	ldr	r2, [pc, #516]	@ (80024c4 <HAL_I2C_Init+0x274>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d807      	bhi.n	80022d4 <HAL_I2C_Init+0x84>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4a80      	ldr	r2, [pc, #512]	@ (80024c8 <HAL_I2C_Init+0x278>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	bf94      	ite	ls
 80022cc:	2301      	movls	r3, #1
 80022ce:	2300      	movhi	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	e006      	b.n	80022e2 <HAL_I2C_Init+0x92>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4a7d      	ldr	r2, [pc, #500]	@ (80024cc <HAL_I2C_Init+0x27c>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	bf94      	ite	ls
 80022dc:	2301      	movls	r3, #1
 80022de:	2300      	movhi	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e0e7      	b.n	80024ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4a78      	ldr	r2, [pc, #480]	@ (80024d0 <HAL_I2C_Init+0x280>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	0c9b      	lsrs	r3, r3, #18
 80022f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	430a      	orrs	r2, r1
 8002308:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	4a6a      	ldr	r2, [pc, #424]	@ (80024c4 <HAL_I2C_Init+0x274>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d802      	bhi.n	8002324 <HAL_I2C_Init+0xd4>
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	3301      	adds	r3, #1
 8002322:	e009      	b.n	8002338 <HAL_I2C_Init+0xe8>
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800232a:	fb02 f303 	mul.w	r3, r2, r3
 800232e:	4a69      	ldr	r2, [pc, #420]	@ (80024d4 <HAL_I2C_Init+0x284>)
 8002330:	fba2 2303 	umull	r2, r3, r2, r3
 8002334:	099b      	lsrs	r3, r3, #6
 8002336:	3301      	adds	r3, #1
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	430b      	orrs	r3, r1
 800233e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800234a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	495c      	ldr	r1, [pc, #368]	@ (80024c4 <HAL_I2C_Init+0x274>)
 8002354:	428b      	cmp	r3, r1
 8002356:	d819      	bhi.n	800238c <HAL_I2C_Init+0x13c>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1e59      	subs	r1, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	fbb1 f3f3 	udiv	r3, r1, r3
 8002366:	1c59      	adds	r1, r3, #1
 8002368:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800236c:	400b      	ands	r3, r1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00a      	beq.n	8002388 <HAL_I2C_Init+0x138>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1e59      	subs	r1, r3, #1
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002380:	3301      	adds	r3, #1
 8002382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002386:	e051      	b.n	800242c <HAL_I2C_Init+0x1dc>
 8002388:	2304      	movs	r3, #4
 800238a:	e04f      	b.n	800242c <HAL_I2C_Init+0x1dc>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d111      	bne.n	80023b8 <HAL_I2C_Init+0x168>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	1e58      	subs	r0, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6859      	ldr	r1, [r3, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	440b      	add	r3, r1
 80023a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023a6:	3301      	adds	r3, #1
 80023a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	bf0c      	ite	eq
 80023b0:	2301      	moveq	r3, #1
 80023b2:	2300      	movne	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	e012      	b.n	80023de <HAL_I2C_Init+0x18e>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1e58      	subs	r0, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6859      	ldr	r1, [r3, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	0099      	lsls	r1, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ce:	3301      	adds	r3, #1
 80023d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	bf0c      	ite	eq
 80023d8:	2301      	moveq	r3, #1
 80023da:	2300      	movne	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_I2C_Init+0x196>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e022      	b.n	800242c <HAL_I2C_Init+0x1dc>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10e      	bne.n	800240c <HAL_I2C_Init+0x1bc>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1e58      	subs	r0, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6859      	ldr	r1, [r3, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	440b      	add	r3, r1
 80023fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002400:	3301      	adds	r3, #1
 8002402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002406:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800240a:	e00f      	b.n	800242c <HAL_I2C_Init+0x1dc>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	1e58      	subs	r0, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	0099      	lsls	r1, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002422:	3301      	adds	r3, #1
 8002424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002428:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	6809      	ldr	r1, [r1, #0]
 8002430:	4313      	orrs	r3, r2
 8002432:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69da      	ldr	r2, [r3, #28]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800245a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6911      	ldr	r1, [r2, #16]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68d2      	ldr	r2, [r2, #12]
 8002466:	4311      	orrs	r1, r2
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	430b      	orrs	r3, r1
 800246e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695a      	ldr	r2, [r3, #20]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2220      	movs	r2, #32
 80024a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	000186a0 	.word	0x000186a0
 80024c8:	001e847f 	.word	0x001e847f
 80024cc:	003d08ff 	.word	0x003d08ff
 80024d0:	431bde83 	.word	0x431bde83
 80024d4:	10624dd3 	.word	0x10624dd3

080024d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af02      	add	r7, sp, #8
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	607a      	str	r2, [r7, #4]
 80024e2:	461a      	mov	r2, r3
 80024e4:	460b      	mov	r3, r1
 80024e6:	817b      	strh	r3, [r7, #10]
 80024e8:	4613      	mov	r3, r2
 80024ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024ec:	f7ff fbea 	bl	8001cc4 <HAL_GetTick>
 80024f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b20      	cmp	r3, #32
 80024fc:	f040 80e0 	bne.w	80026c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	2319      	movs	r3, #25
 8002506:	2201      	movs	r2, #1
 8002508:	4970      	ldr	r1, [pc, #448]	@ (80026cc <HAL_I2C_Master_Transmit+0x1f4>)
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 fa92 	bl	8002a34 <I2C_WaitOnFlagUntilTimeout>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002516:	2302      	movs	r3, #2
 8002518:	e0d3      	b.n	80026c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_I2C_Master_Transmit+0x50>
 8002524:	2302      	movs	r3, #2
 8002526:	e0cc      	b.n	80026c2 <HAL_I2C_Master_Transmit+0x1ea>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b01      	cmp	r3, #1
 800253c:	d007      	beq.n	800254e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f042 0201 	orr.w	r2, r2, #1
 800254c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800255c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2221      	movs	r2, #33	@ 0x21
 8002562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2210      	movs	r2, #16
 800256a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	893a      	ldrh	r2, [r7, #8]
 800257e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4a50      	ldr	r2, [pc, #320]	@ (80026d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800258e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002590:	8979      	ldrh	r1, [r7, #10]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	6a3a      	ldr	r2, [r7, #32]
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 f9ca 	bl	8002930 <I2C_MasterRequestWrite>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e08d      	b.n	80026c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025bc:	e066      	b.n	800268c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	6a39      	ldr	r1, [r7, #32]
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 fb50 	bl	8002c68 <I2C_WaitOnTXEFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00d      	beq.n	80025ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d107      	bne.n	80025e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e06b      	b.n	80026c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ee:	781a      	ldrb	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b04      	cmp	r3, #4
 8002626:	d11b      	bne.n	8002660 <HAL_I2C_Master_Transmit+0x188>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262c:	2b00      	cmp	r3, #0
 800262e:	d017      	beq.n	8002660 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002634:	781a      	ldrb	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002640:	1c5a      	adds	r2, r3, #1
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800264a:	b29b      	uxth	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	6a39      	ldr	r1, [r7, #32]
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 fb47 	bl	8002cf8 <I2C_WaitOnBTFFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00d      	beq.n	800268c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002674:	2b04      	cmp	r3, #4
 8002676:	d107      	bne.n	8002688 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002686:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e01a      	b.n	80026c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002690:	2b00      	cmp	r3, #0
 8002692:	d194      	bne.n	80025be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2220      	movs	r2, #32
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	e000      	b.n	80026c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026c0:	2302      	movs	r3, #2
  }
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	00100002 	.word	0x00100002
 80026d0:	ffff0000 	.word	0xffff0000

080026d4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	@ 0x28
 80026d8:	af02      	add	r7, sp, #8
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	607a      	str	r2, [r7, #4]
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	460b      	mov	r3, r1
 80026e2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80026e4:	f7ff faee 	bl	8001cc4 <HAL_GetTick>
 80026e8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b20      	cmp	r3, #32
 80026f8:	f040 8111 	bne.w	800291e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	2319      	movs	r3, #25
 8002702:	2201      	movs	r2, #1
 8002704:	4988      	ldr	r1, [pc, #544]	@ (8002928 <HAL_I2C_IsDeviceReady+0x254>)
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f994 	bl	8002a34 <I2C_WaitOnFlagUntilTimeout>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002712:	2302      	movs	r3, #2
 8002714:	e104      	b.n	8002920 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_I2C_IsDeviceReady+0x50>
 8002720:	2302      	movs	r3, #2
 8002722:	e0fd      	b.n	8002920 <HAL_I2C_IsDeviceReady+0x24c>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b01      	cmp	r3, #1
 8002738:	d007      	beq.n	800274a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0201 	orr.w	r2, r2, #1
 8002748:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002758:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2224      	movs	r2, #36	@ 0x24
 800275e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4a70      	ldr	r2, [pc, #448]	@ (800292c <HAL_I2C_IsDeviceReady+0x258>)
 800276c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800277c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2200      	movs	r2, #0
 8002786:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 f952 	bl	8002a34 <I2C_WaitOnFlagUntilTimeout>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00d      	beq.n	80027b2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027a4:	d103      	bne.n	80027ae <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027ac:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e0b6      	b.n	8002920 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027b2:	897b      	ldrh	r3, [r7, #10]
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	461a      	mov	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027c0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80027c2:	f7ff fa7f 	bl	8001cc4 <HAL_GetTick>
 80027c6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	bf0c      	ite	eq
 80027d6:	2301      	moveq	r3, #1
 80027d8:	2300      	movne	r3, #0
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ec:	bf0c      	ite	eq
 80027ee:	2301      	moveq	r3, #1
 80027f0:	2300      	movne	r3, #0
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027f6:	e025      	b.n	8002844 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027f8:	f7ff fa64 	bl	8001cc4 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d302      	bcc.n	800280e <HAL_I2C_IsDeviceReady+0x13a>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d103      	bne.n	8002816 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	22a0      	movs	r2, #160	@ 0xa0
 8002812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b02      	cmp	r3, #2
 8002822:	bf0c      	ite	eq
 8002824:	2301      	moveq	r3, #1
 8002826:	2300      	movne	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002836:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800283a:	bf0c      	ite	eq
 800283c:	2301      	moveq	r3, #1
 800283e:	2300      	movne	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2ba0      	cmp	r3, #160	@ 0xa0
 800284e:	d005      	beq.n	800285c <HAL_I2C_IsDeviceReady+0x188>
 8002850:	7dfb      	ldrb	r3, [r7, #23]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d102      	bne.n	800285c <HAL_I2C_IsDeviceReady+0x188>
 8002856:	7dbb      	ldrb	r3, [r7, #22]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0cd      	beq.n	80027f8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b02      	cmp	r3, #2
 8002870:	d129      	bne.n	80028c6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002880:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002882:	2300      	movs	r3, #0
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	2319      	movs	r3, #25
 800289e:	2201      	movs	r2, #1
 80028a0:	4921      	ldr	r1, [pc, #132]	@ (8002928 <HAL_I2C_IsDeviceReady+0x254>)
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f8c6 	bl	8002a34 <I2C_WaitOnFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e036      	b.n	8002920 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	e02c      	b.n	8002920 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028d4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028de:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	2319      	movs	r3, #25
 80028e6:	2201      	movs	r2, #1
 80028e8:	490f      	ldr	r1, [pc, #60]	@ (8002928 <HAL_I2C_IsDeviceReady+0x254>)
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 f8a2 	bl	8002a34 <I2C_WaitOnFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e012      	b.n	8002920 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	3301      	adds	r3, #1
 80028fe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	429a      	cmp	r2, r3
 8002906:	f4ff af32 	bcc.w	800276e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2220      	movs	r2, #32
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800291e:	2302      	movs	r3, #2
  }
}
 8002920:	4618      	mov	r0, r3
 8002922:	3720      	adds	r7, #32
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	00100002 	.word	0x00100002
 800292c:	ffff0000 	.word	0xffff0000

08002930 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af02      	add	r7, sp, #8
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	607a      	str	r2, [r7, #4]
 800293a:	603b      	str	r3, [r7, #0]
 800293c:	460b      	mov	r3, r1
 800293e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002944:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b08      	cmp	r3, #8
 800294a:	d006      	beq.n	800295a <I2C_MasterRequestWrite+0x2a>
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d003      	beq.n	800295a <I2C_MasterRequestWrite+0x2a>
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002958:	d108      	bne.n	800296c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	e00b      	b.n	8002984 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002970:	2b12      	cmp	r3, #18
 8002972:	d107      	bne.n	8002984 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002982:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 f84f 	bl	8002a34 <I2C_WaitOnFlagUntilTimeout>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00d      	beq.n	80029b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029aa:	d103      	bne.n	80029b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e035      	b.n	8002a24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029c0:	d108      	bne.n	80029d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029c2:	897b      	ldrh	r3, [r7, #10]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029d0:	611a      	str	r2, [r3, #16]
 80029d2:	e01b      	b.n	8002a0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029d4:	897b      	ldrh	r3, [r7, #10]
 80029d6:	11db      	asrs	r3, r3, #7
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	f003 0306 	and.w	r3, r3, #6
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	f063 030f 	orn	r3, r3, #15
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	490e      	ldr	r1, [pc, #56]	@ (8002a2c <I2C_MasterRequestWrite+0xfc>)
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f898 	bl	8002b28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e010      	b.n	8002a24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a02:	897b      	ldrh	r3, [r7, #10]
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	4907      	ldr	r1, [pc, #28]	@ (8002a30 <I2C_MasterRequestWrite+0x100>)
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 f888 	bl	8002b28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	00010008 	.word	0x00010008
 8002a30:	00010002 	.word	0x00010002

08002a34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	4613      	mov	r3, r2
 8002a42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a44:	e048      	b.n	8002ad8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4c:	d044      	beq.n	8002ad8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a4e:	f7ff f939 	bl	8001cc4 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d302      	bcc.n	8002a64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d139      	bne.n	8002ad8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	0c1b      	lsrs	r3, r3, #16
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d10d      	bne.n	8002a8a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	43da      	mvns	r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	bf0c      	ite	eq
 8002a80:	2301      	moveq	r3, #1
 8002a82:	2300      	movne	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	461a      	mov	r2, r3
 8002a88:	e00c      	b.n	8002aa4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	43da      	mvns	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	4013      	ands	r3, r2
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf0c      	ite	eq
 8002a9c:	2301      	moveq	r3, #1
 8002a9e:	2300      	movne	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d116      	bne.n	8002ad8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac4:	f043 0220 	orr.w	r2, r3, #32
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e023      	b.n	8002b20 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	0c1b      	lsrs	r3, r3, #16
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d10d      	bne.n	8002afe <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	43da      	mvns	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	4013      	ands	r3, r2
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	bf0c      	ite	eq
 8002af4:	2301      	moveq	r3, #1
 8002af6:	2300      	movne	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	461a      	mov	r2, r3
 8002afc:	e00c      	b.n	8002b18 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	43da      	mvns	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	461a      	mov	r2, r3
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d093      	beq.n	8002a46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b36:	e071      	b.n	8002c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b46:	d123      	bne.n	8002b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b56:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7c:	f043 0204 	orr.w	r2, r3, #4
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e067      	b.n	8002c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b96:	d041      	beq.n	8002c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b98:	f7ff f894 	bl	8001cc4 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d302      	bcc.n	8002bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d136      	bne.n	8002c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	0c1b      	lsrs	r3, r3, #16
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d10c      	bne.n	8002bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	bf14      	ite	ne
 8002bca:	2301      	movne	r3, #1
 8002bcc:	2300      	moveq	r3, #0
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	e00b      	b.n	8002bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	43da      	mvns	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	bf14      	ite	ne
 8002be4:	2301      	movne	r3, #1
 8002be6:	2300      	moveq	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d016      	beq.n	8002c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c08:	f043 0220 	orr.w	r2, r3, #32
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e021      	b.n	8002c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	0c1b      	lsrs	r3, r3, #16
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d10c      	bne.n	8002c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	43da      	mvns	r2, r3
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	4013      	ands	r3, r2
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bf14      	ite	ne
 8002c38:	2301      	movne	r3, #1
 8002c3a:	2300      	moveq	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	e00b      	b.n	8002c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	43da      	mvns	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	bf14      	ite	ne
 8002c52:	2301      	movne	r3, #1
 8002c54:	2300      	moveq	r3, #0
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f47f af6d 	bne.w	8002b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c74:	e034      	b.n	8002ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f886 	bl	8002d88 <I2C_IsAcknowledgeFailed>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e034      	b.n	8002cf0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8c:	d028      	beq.n	8002ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c8e:	f7ff f819 	bl	8001cc4 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d302      	bcc.n	8002ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d11d      	bne.n	8002ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cae:	2b80      	cmp	r3, #128	@ 0x80
 8002cb0:	d016      	beq.n	8002ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ccc:	f043 0220 	orr.w	r2, r3, #32
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e007      	b.n	8002cf0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cea:	2b80      	cmp	r3, #128	@ 0x80
 8002cec:	d1c3      	bne.n	8002c76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d04:	e034      	b.n	8002d70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f83e 	bl	8002d88 <I2C_IsAcknowledgeFailed>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e034      	b.n	8002d80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1c:	d028      	beq.n	8002d70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d1e:	f7fe ffd1 	bl	8001cc4 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d302      	bcc.n	8002d34 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d11d      	bne.n	8002d70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d016      	beq.n	8002d70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5c:	f043 0220 	orr.w	r2, r3, #32
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e007      	b.n	8002d80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d1c3      	bne.n	8002d06 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d9e:	d11b      	bne.n	8002dd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002da8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc4:	f043 0204 	orr.w	r2, r3, #4
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e000      	b.n	8002dda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e272      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 8087 	beq.w	8002f12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e04:	4b92      	ldr	r3, [pc, #584]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 030c 	and.w	r3, r3, #12
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d00c      	beq.n	8002e2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e10:	4b8f      	ldr	r3, [pc, #572]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 030c 	and.w	r3, r3, #12
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d112      	bne.n	8002e42 <HAL_RCC_OscConfig+0x5e>
 8002e1c:	4b8c      	ldr	r3, [pc, #560]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e28:	d10b      	bne.n	8002e42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e2a:	4b89      	ldr	r3, [pc, #548]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d06c      	beq.n	8002f10 <HAL_RCC_OscConfig+0x12c>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d168      	bne.n	8002f10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e24c      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e4a:	d106      	bne.n	8002e5a <HAL_RCC_OscConfig+0x76>
 8002e4c:	4b80      	ldr	r3, [pc, #512]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a7f      	ldr	r2, [pc, #508]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e56:	6013      	str	r3, [r2, #0]
 8002e58:	e02e      	b.n	8002eb8 <HAL_RCC_OscConfig+0xd4>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10c      	bne.n	8002e7c <HAL_RCC_OscConfig+0x98>
 8002e62:	4b7b      	ldr	r3, [pc, #492]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a7a      	ldr	r2, [pc, #488]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	4b78      	ldr	r3, [pc, #480]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a77      	ldr	r2, [pc, #476]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	e01d      	b.n	8002eb8 <HAL_RCC_OscConfig+0xd4>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0xbc>
 8002e86:	4b72      	ldr	r3, [pc, #456]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a71      	ldr	r2, [pc, #452]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	4b6f      	ldr	r3, [pc, #444]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a6e      	ldr	r2, [pc, #440]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	e00b      	b.n	8002eb8 <HAL_RCC_OscConfig+0xd4>
 8002ea0:	4b6b      	ldr	r3, [pc, #428]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a6a      	ldr	r2, [pc, #424]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eaa:	6013      	str	r3, [r2, #0]
 8002eac:	4b68      	ldr	r3, [pc, #416]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a67      	ldr	r2, [pc, #412]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002eb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d013      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7fe ff00 	bl	8001cc4 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec8:	f7fe fefc 	bl	8001cc4 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b64      	cmp	r3, #100	@ 0x64
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e200      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eda:	4b5d      	ldr	r3, [pc, #372]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f0      	beq.n	8002ec8 <HAL_RCC_OscConfig+0xe4>
 8002ee6:	e014      	b.n	8002f12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7fe feec 	bl	8001cc4 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef0:	f7fe fee8 	bl	8001cc4 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b64      	cmp	r3, #100	@ 0x64
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e1ec      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f02:	4b53      	ldr	r3, [pc, #332]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x10c>
 8002f0e:	e000      	b.n	8002f12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d063      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f1e:	4b4c      	ldr	r3, [pc, #304]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00b      	beq.n	8002f42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f2a:	4b49      	ldr	r3, [pc, #292]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d11c      	bne.n	8002f70 <HAL_RCC_OscConfig+0x18c>
 8002f36:	4b46      	ldr	r3, [pc, #280]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d116      	bne.n	8002f70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f42:	4b43      	ldr	r3, [pc, #268]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d005      	beq.n	8002f5a <HAL_RCC_OscConfig+0x176>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d001      	beq.n	8002f5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e1c0      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5a:	4b3d      	ldr	r3, [pc, #244]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4939      	ldr	r1, [pc, #228]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f6e:	e03a      	b.n	8002fe6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d020      	beq.n	8002fba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f78:	4b36      	ldr	r3, [pc, #216]	@ (8003054 <HAL_RCC_OscConfig+0x270>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7e:	f7fe fea1 	bl	8001cc4 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f86:	f7fe fe9d 	bl	8001cc4 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e1a1      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f98:	4b2d      	ldr	r3, [pc, #180]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa4:	4b2a      	ldr	r3, [pc, #168]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4927      	ldr	r1, [pc, #156]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	600b      	str	r3, [r1, #0]
 8002fb8:	e015      	b.n	8002fe6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fba:	4b26      	ldr	r3, [pc, #152]	@ (8003054 <HAL_RCC_OscConfig+0x270>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7fe fe80 	bl	8001cc4 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fc8:	f7fe fe7c 	bl	8001cc4 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e180      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fda:	4b1d      	ldr	r3, [pc, #116]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d03a      	beq.n	8003068 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d019      	beq.n	800302e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ffa:	4b17      	ldr	r3, [pc, #92]	@ (8003058 <HAL_RCC_OscConfig+0x274>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003000:	f7fe fe60 	bl	8001cc4 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003008:	f7fe fe5c 	bl	8001cc4 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e160      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301a:	4b0d      	ldr	r3, [pc, #52]	@ (8003050 <HAL_RCC_OscConfig+0x26c>)
 800301c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003026:	2001      	movs	r0, #1
 8003028:	f000 faba 	bl	80035a0 <RCC_Delay>
 800302c:	e01c      	b.n	8003068 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800302e:	4b0a      	ldr	r3, [pc, #40]	@ (8003058 <HAL_RCC_OscConfig+0x274>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003034:	f7fe fe46 	bl	8001cc4 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800303a:	e00f      	b.n	800305c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800303c:	f7fe fe42 	bl	8001cc4 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d908      	bls.n	800305c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e146      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000
 8003054:	42420000 	.word	0x42420000
 8003058:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800305c:	4b92      	ldr	r3, [pc, #584]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 800305e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1e9      	bne.n	800303c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80a6 	beq.w	80031c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003076:	2300      	movs	r3, #0
 8003078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800307a:	4b8b      	ldr	r3, [pc, #556]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10d      	bne.n	80030a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003086:	4b88      	ldr	r3, [pc, #544]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	4a87      	ldr	r2, [pc, #540]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 800308c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003090:	61d3      	str	r3, [r2, #28]
 8003092:	4b85      	ldr	r3, [pc, #532]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800309a:	60bb      	str	r3, [r7, #8]
 800309c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800309e:	2301      	movs	r3, #1
 80030a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a2:	4b82      	ldr	r3, [pc, #520]	@ (80032ac <HAL_RCC_OscConfig+0x4c8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d118      	bne.n	80030e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ae:	4b7f      	ldr	r3, [pc, #508]	@ (80032ac <HAL_RCC_OscConfig+0x4c8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a7e      	ldr	r2, [pc, #504]	@ (80032ac <HAL_RCC_OscConfig+0x4c8>)
 80030b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ba:	f7fe fe03 	bl	8001cc4 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c2:	f7fe fdff 	bl	8001cc4 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b64      	cmp	r3, #100	@ 0x64
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e103      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d4:	4b75      	ldr	r3, [pc, #468]	@ (80032ac <HAL_RCC_OscConfig+0x4c8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d106      	bne.n	80030f6 <HAL_RCC_OscConfig+0x312>
 80030e8:	4b6f      	ldr	r3, [pc, #444]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	4a6e      	ldr	r2, [pc, #440]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	6213      	str	r3, [r2, #32]
 80030f4:	e02d      	b.n	8003152 <HAL_RCC_OscConfig+0x36e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10c      	bne.n	8003118 <HAL_RCC_OscConfig+0x334>
 80030fe:	4b6a      	ldr	r3, [pc, #424]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	4a69      	ldr	r2, [pc, #420]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003104:	f023 0301 	bic.w	r3, r3, #1
 8003108:	6213      	str	r3, [r2, #32]
 800310a:	4b67      	ldr	r3, [pc, #412]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	4a66      	ldr	r2, [pc, #408]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003110:	f023 0304 	bic.w	r3, r3, #4
 8003114:	6213      	str	r3, [r2, #32]
 8003116:	e01c      	b.n	8003152 <HAL_RCC_OscConfig+0x36e>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	2b05      	cmp	r3, #5
 800311e:	d10c      	bne.n	800313a <HAL_RCC_OscConfig+0x356>
 8003120:	4b61      	ldr	r3, [pc, #388]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	4a60      	ldr	r2, [pc, #384]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003126:	f043 0304 	orr.w	r3, r3, #4
 800312a:	6213      	str	r3, [r2, #32]
 800312c:	4b5e      	ldr	r3, [pc, #376]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	4a5d      	ldr	r2, [pc, #372]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003132:	f043 0301 	orr.w	r3, r3, #1
 8003136:	6213      	str	r3, [r2, #32]
 8003138:	e00b      	b.n	8003152 <HAL_RCC_OscConfig+0x36e>
 800313a:	4b5b      	ldr	r3, [pc, #364]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	4a5a      	ldr	r2, [pc, #360]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003140:	f023 0301 	bic.w	r3, r3, #1
 8003144:	6213      	str	r3, [r2, #32]
 8003146:	4b58      	ldr	r3, [pc, #352]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	4a57      	ldr	r2, [pc, #348]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 800314c:	f023 0304 	bic.w	r3, r3, #4
 8003150:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d015      	beq.n	8003186 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315a:	f7fe fdb3 	bl	8001cc4 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003160:	e00a      	b.n	8003178 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003162:	f7fe fdaf 	bl	8001cc4 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003170:	4293      	cmp	r3, r2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e0b1      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003178:	4b4b      	ldr	r3, [pc, #300]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0ee      	beq.n	8003162 <HAL_RCC_OscConfig+0x37e>
 8003184:	e014      	b.n	80031b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003186:	f7fe fd9d 	bl	8001cc4 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800318c:	e00a      	b.n	80031a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318e:	f7fe fd99 	bl	8001cc4 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	f241 3288 	movw	r2, #5000	@ 0x1388
 800319c:	4293      	cmp	r3, r2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e09b      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a4:	4b40      	ldr	r3, [pc, #256]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1ee      	bne.n	800318e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031b0:	7dfb      	ldrb	r3, [r7, #23]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d105      	bne.n	80031c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b6:	4b3c      	ldr	r3, [pc, #240]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	4a3b      	ldr	r2, [pc, #236]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 80031bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 8087 	beq.w	80032da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031cc:	4b36      	ldr	r3, [pc, #216]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 030c 	and.w	r3, r3, #12
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d061      	beq.n	800329c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d146      	bne.n	800326e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e0:	4b33      	ldr	r3, [pc, #204]	@ (80032b0 <HAL_RCC_OscConfig+0x4cc>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e6:	f7fe fd6d 	bl	8001cc4 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ee:	f7fe fd69 	bl	8001cc4 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e06d      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003200:	4b29      	ldr	r3, [pc, #164]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1f0      	bne.n	80031ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003214:	d108      	bne.n	8003228 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003216:	4b24      	ldr	r3, [pc, #144]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	4921      	ldr	r1, [pc, #132]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003224:	4313      	orrs	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003228:	4b1f      	ldr	r3, [pc, #124]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a19      	ldr	r1, [r3, #32]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003238:	430b      	orrs	r3, r1
 800323a:	491b      	ldr	r1, [pc, #108]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 800323c:	4313      	orrs	r3, r2
 800323e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003240:	4b1b      	ldr	r3, [pc, #108]	@ (80032b0 <HAL_RCC_OscConfig+0x4cc>)
 8003242:	2201      	movs	r2, #1
 8003244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003246:	f7fe fd3d 	bl	8001cc4 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800324e:	f7fe fd39 	bl	8001cc4 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e03d      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003260:	4b11      	ldr	r3, [pc, #68]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f0      	beq.n	800324e <HAL_RCC_OscConfig+0x46a>
 800326c:	e035      	b.n	80032da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326e:	4b10      	ldr	r3, [pc, #64]	@ (80032b0 <HAL_RCC_OscConfig+0x4cc>)
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7fe fd26 	bl	8001cc4 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327c:	f7fe fd22 	bl	8001cc4 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e026      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800328e:	4b06      	ldr	r3, [pc, #24]	@ (80032a8 <HAL_RCC_OscConfig+0x4c4>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0x498>
 800329a:	e01e      	b.n	80032da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d107      	bne.n	80032b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e019      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40007000 	.word	0x40007000
 80032b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032b4:	4b0b      	ldr	r3, [pc, #44]	@ (80032e4 <HAL_RCC_OscConfig+0x500>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d106      	bne.n	80032d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d001      	beq.n	80032da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40021000 	.word	0x40021000

080032e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0d0      	b.n	800349e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032fc:	4b6a      	ldr	r3, [pc, #424]	@ (80034a8 <HAL_RCC_ClockConfig+0x1c0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d910      	bls.n	800332c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330a:	4b67      	ldr	r3, [pc, #412]	@ (80034a8 <HAL_RCC_ClockConfig+0x1c0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f023 0207 	bic.w	r2, r3, #7
 8003312:	4965      	ldr	r1, [pc, #404]	@ (80034a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	4313      	orrs	r3, r2
 8003318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800331a:	4b63      	ldr	r3, [pc, #396]	@ (80034a8 <HAL_RCC_ClockConfig+0x1c0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d001      	beq.n	800332c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e0b8      	b.n	800349e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d020      	beq.n	800337a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003344:	4b59      	ldr	r3, [pc, #356]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	4a58      	ldr	r2, [pc, #352]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800334e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800335c:	4b53      	ldr	r3, [pc, #332]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	4a52      	ldr	r2, [pc, #328]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003366:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003368:	4b50      	ldr	r3, [pc, #320]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	494d      	ldr	r1, [pc, #308]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 8003376:	4313      	orrs	r3, r2
 8003378:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d040      	beq.n	8003408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d107      	bne.n	800339e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338e:	4b47      	ldr	r3, [pc, #284]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d115      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e07f      	b.n	800349e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d107      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a6:	4b41      	ldr	r3, [pc, #260]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d109      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e073      	b.n	800349e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b6:	4b3d      	ldr	r3, [pc, #244]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e06b      	b.n	800349e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033c6:	4b39      	ldr	r3, [pc, #228]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f023 0203 	bic.w	r2, r3, #3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	4936      	ldr	r1, [pc, #216]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033d8:	f7fe fc74 	bl	8001cc4 <HAL_GetTick>
 80033dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033de:	e00a      	b.n	80033f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e0:	f7fe fc70 	bl	8001cc4 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e053      	b.n	800349e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f6:	4b2d      	ldr	r3, [pc, #180]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 020c 	and.w	r2, r3, #12
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	429a      	cmp	r2, r3
 8003406:	d1eb      	bne.n	80033e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003408:	4b27      	ldr	r3, [pc, #156]	@ (80034a8 <HAL_RCC_ClockConfig+0x1c0>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d210      	bcs.n	8003438 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003416:	4b24      	ldr	r3, [pc, #144]	@ (80034a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 0207 	bic.w	r2, r3, #7
 800341e:	4922      	ldr	r1, [pc, #136]	@ (80034a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	4313      	orrs	r3, r2
 8003424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003426:	4b20      	ldr	r3, [pc, #128]	@ (80034a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d001      	beq.n	8003438 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e032      	b.n	800349e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d008      	beq.n	8003456 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003444:	4b19      	ldr	r3, [pc, #100]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	4916      	ldr	r1, [pc, #88]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 8003452:	4313      	orrs	r3, r2
 8003454:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d009      	beq.n	8003476 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003462:	4b12      	ldr	r3, [pc, #72]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	490e      	ldr	r1, [pc, #56]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 8003472:	4313      	orrs	r3, r2
 8003474:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003476:	f000 f821 	bl	80034bc <HAL_RCC_GetSysClockFreq>
 800347a:	4602      	mov	r2, r0
 800347c:	4b0b      	ldr	r3, [pc, #44]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	091b      	lsrs	r3, r3, #4
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	490a      	ldr	r1, [pc, #40]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003488:	5ccb      	ldrb	r3, [r1, r3]
 800348a:	fa22 f303 	lsr.w	r3, r2, r3
 800348e:	4a09      	ldr	r2, [pc, #36]	@ (80034b4 <HAL_RCC_ClockConfig+0x1cc>)
 8003490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003492:	4b09      	ldr	r3, [pc, #36]	@ (80034b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f7fe fbd2 	bl	8001c40 <HAL_InitTick>

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40022000 	.word	0x40022000
 80034ac:	40021000 	.word	0x40021000
 80034b0:	080059dc 	.word	0x080059dc
 80034b4:	20000010 	.word	0x20000010
 80034b8:	20000014 	.word	0x20000014

080034bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	2300      	movs	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	2300      	movs	r3, #0
 80034d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x94>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d002      	beq.n	80034ec <HAL_RCC_GetSysClockFreq+0x30>
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d003      	beq.n	80034f2 <HAL_RCC_GetSysClockFreq+0x36>
 80034ea:	e027      	b.n	800353c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034ec:	4b19      	ldr	r3, [pc, #100]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x98>)
 80034ee:	613b      	str	r3, [r7, #16]
      break;
 80034f0:	e027      	b.n	8003542 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	0c9b      	lsrs	r3, r3, #18
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	4a17      	ldr	r2, [pc, #92]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034fc:	5cd3      	ldrb	r3, [r2, r3]
 80034fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d010      	beq.n	800352c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800350a:	4b11      	ldr	r3, [pc, #68]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x94>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	0c5b      	lsrs	r3, r3, #17
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	4a11      	ldr	r2, [pc, #68]	@ (800355c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003516:	5cd3      	ldrb	r3, [r2, r3]
 8003518:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a0d      	ldr	r2, [pc, #52]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x98>)
 800351e:	fb03 f202 	mul.w	r2, r3, r2
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	fbb2 f3f3 	udiv	r3, r2, r3
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	e004      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a0c      	ldr	r2, [pc, #48]	@ (8003560 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003530:	fb02 f303 	mul.w	r3, r2, r3
 8003534:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	613b      	str	r3, [r7, #16]
      break;
 800353a:	e002      	b.n	8003542 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800353c:	4b05      	ldr	r3, [pc, #20]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x98>)
 800353e:	613b      	str	r3, [r7, #16]
      break;
 8003540:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003542:	693b      	ldr	r3, [r7, #16]
}
 8003544:	4618      	mov	r0, r3
 8003546:	371c      	adds	r7, #28
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40021000 	.word	0x40021000
 8003554:	007a1200 	.word	0x007a1200
 8003558:	080059f4 	.word	0x080059f4
 800355c:	08005a04 	.word	0x08005a04
 8003560:	003d0900 	.word	0x003d0900

08003564 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003568:	4b02      	ldr	r3, [pc, #8]	@ (8003574 <HAL_RCC_GetHCLKFreq+0x10>)
 800356a:	681b      	ldr	r3, [r3, #0]
}
 800356c:	4618      	mov	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr
 8003574:	20000010 	.word	0x20000010

08003578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800357c:	f7ff fff2 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 8003580:	4602      	mov	r2, r0
 8003582:	4b05      	ldr	r3, [pc, #20]	@ (8003598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	0a1b      	lsrs	r3, r3, #8
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	4903      	ldr	r1, [pc, #12]	@ (800359c <HAL_RCC_GetPCLK1Freq+0x24>)
 800358e:	5ccb      	ldrb	r3, [r1, r3]
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003594:	4618      	mov	r0, r3
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40021000 	.word	0x40021000
 800359c:	080059ec 	.word	0x080059ec

080035a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035a8:	4b0a      	ldr	r3, [pc, #40]	@ (80035d4 <RCC_Delay+0x34>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a0a      	ldr	r2, [pc, #40]	@ (80035d8 <RCC_Delay+0x38>)
 80035ae:	fba2 2303 	umull	r2, r3, r2, r3
 80035b2:	0a5b      	lsrs	r3, r3, #9
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	fb02 f303 	mul.w	r3, r2, r3
 80035ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035bc:	bf00      	nop
  }
  while (Delay --);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1e5a      	subs	r2, r3, #1
 80035c2:	60fa      	str	r2, [r7, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1f9      	bne.n	80035bc <RCC_Delay+0x1c>
}
 80035c8:	bf00      	nop
 80035ca:	bf00      	nop
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr
 80035d4:	20000010 	.word	0x20000010
 80035d8:	10624dd3 	.word	0x10624dd3

080035dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e041      	b.n	8003672 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d106      	bne.n	8003608 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7fe fa5a 	bl	8001abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3304      	adds	r3, #4
 8003618:	4619      	mov	r1, r3
 800361a:	4610      	mov	r0, r2
 800361c:	f000 f940 	bl	80038a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b01      	cmp	r3, #1
 800368e:	d001      	beq.n	8003694 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e032      	b.n	80036fa <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a18      	ldr	r2, [pc, #96]	@ (8003704 <HAL_TIM_Base_Start+0x88>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00e      	beq.n	80036c4 <HAL_TIM_Base_Start+0x48>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ae:	d009      	beq.n	80036c4 <HAL_TIM_Base_Start+0x48>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a14      	ldr	r2, [pc, #80]	@ (8003708 <HAL_TIM_Base_Start+0x8c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d004      	beq.n	80036c4 <HAL_TIM_Base_Start+0x48>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a13      	ldr	r2, [pc, #76]	@ (800370c <HAL_TIM_Base_Start+0x90>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d111      	bne.n	80036e8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2b06      	cmp	r3, #6
 80036d4:	d010      	beq.n	80036f8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 0201 	orr.w	r2, r2, #1
 80036e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e6:	e007      	b.n	80036f8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr
 8003704:	40012c00 	.word	0x40012c00
 8003708:	40000400 	.word	0x40000400
 800370c:	40000800 	.word	0x40000800

08003710 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <HAL_TIM_ConfigClockSource+0x1c>
 8003728:	2302      	movs	r3, #2
 800372a:	e0b4      	b.n	8003896 <HAL_TIM_ConfigClockSource+0x186>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800374a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003752:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003764:	d03e      	beq.n	80037e4 <HAL_TIM_ConfigClockSource+0xd4>
 8003766:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800376a:	f200 8087 	bhi.w	800387c <HAL_TIM_ConfigClockSource+0x16c>
 800376e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003772:	f000 8086 	beq.w	8003882 <HAL_TIM_ConfigClockSource+0x172>
 8003776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800377a:	d87f      	bhi.n	800387c <HAL_TIM_ConfigClockSource+0x16c>
 800377c:	2b70      	cmp	r3, #112	@ 0x70
 800377e:	d01a      	beq.n	80037b6 <HAL_TIM_ConfigClockSource+0xa6>
 8003780:	2b70      	cmp	r3, #112	@ 0x70
 8003782:	d87b      	bhi.n	800387c <HAL_TIM_ConfigClockSource+0x16c>
 8003784:	2b60      	cmp	r3, #96	@ 0x60
 8003786:	d050      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x11a>
 8003788:	2b60      	cmp	r3, #96	@ 0x60
 800378a:	d877      	bhi.n	800387c <HAL_TIM_ConfigClockSource+0x16c>
 800378c:	2b50      	cmp	r3, #80	@ 0x50
 800378e:	d03c      	beq.n	800380a <HAL_TIM_ConfigClockSource+0xfa>
 8003790:	2b50      	cmp	r3, #80	@ 0x50
 8003792:	d873      	bhi.n	800387c <HAL_TIM_ConfigClockSource+0x16c>
 8003794:	2b40      	cmp	r3, #64	@ 0x40
 8003796:	d058      	beq.n	800384a <HAL_TIM_ConfigClockSource+0x13a>
 8003798:	2b40      	cmp	r3, #64	@ 0x40
 800379a:	d86f      	bhi.n	800387c <HAL_TIM_ConfigClockSource+0x16c>
 800379c:	2b30      	cmp	r3, #48	@ 0x30
 800379e:	d064      	beq.n	800386a <HAL_TIM_ConfigClockSource+0x15a>
 80037a0:	2b30      	cmp	r3, #48	@ 0x30
 80037a2:	d86b      	bhi.n	800387c <HAL_TIM_ConfigClockSource+0x16c>
 80037a4:	2b20      	cmp	r3, #32
 80037a6:	d060      	beq.n	800386a <HAL_TIM_ConfigClockSource+0x15a>
 80037a8:	2b20      	cmp	r3, #32
 80037aa:	d867      	bhi.n	800387c <HAL_TIM_ConfigClockSource+0x16c>
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d05c      	beq.n	800386a <HAL_TIM_ConfigClockSource+0x15a>
 80037b0:	2b10      	cmp	r3, #16
 80037b2:	d05a      	beq.n	800386a <HAL_TIM_ConfigClockSource+0x15a>
 80037b4:	e062      	b.n	800387c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037c6:	f000 f950 	bl	8003a6a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80037d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	609a      	str	r2, [r3, #8]
      break;
 80037e2:	e04f      	b.n	8003884 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037f4:	f000 f939 	bl	8003a6a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003806:	609a      	str	r2, [r3, #8]
      break;
 8003808:	e03c      	b.n	8003884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003816:	461a      	mov	r2, r3
 8003818:	f000 f8b0 	bl	800397c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2150      	movs	r1, #80	@ 0x50
 8003822:	4618      	mov	r0, r3
 8003824:	f000 f907 	bl	8003a36 <TIM_ITRx_SetConfig>
      break;
 8003828:	e02c      	b.n	8003884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003836:	461a      	mov	r2, r3
 8003838:	f000 f8ce 	bl	80039d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2160      	movs	r1, #96	@ 0x60
 8003842:	4618      	mov	r0, r3
 8003844:	f000 f8f7 	bl	8003a36 <TIM_ITRx_SetConfig>
      break;
 8003848:	e01c      	b.n	8003884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003856:	461a      	mov	r2, r3
 8003858:	f000 f890 	bl	800397c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2140      	movs	r1, #64	@ 0x40
 8003862:	4618      	mov	r0, r3
 8003864:	f000 f8e7 	bl	8003a36 <TIM_ITRx_SetConfig>
      break;
 8003868:	e00c      	b.n	8003884 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4619      	mov	r1, r3
 8003874:	4610      	mov	r0, r2
 8003876:	f000 f8de 	bl	8003a36 <TIM_ITRx_SetConfig>
      break;
 800387a:	e003      	b.n	8003884 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	73fb      	strb	r3, [r7, #15]
      break;
 8003880:	e000      	b.n	8003884 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003882:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003894:	7bfb      	ldrb	r3, [r7, #15]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a2f      	ldr	r2, [pc, #188]	@ (8003970 <TIM_Base_SetConfig+0xd0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00b      	beq.n	80038d0 <TIM_Base_SetConfig+0x30>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038be:	d007      	beq.n	80038d0 <TIM_Base_SetConfig+0x30>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003974 <TIM_Base_SetConfig+0xd4>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d003      	beq.n	80038d0 <TIM_Base_SetConfig+0x30>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a2b      	ldr	r2, [pc, #172]	@ (8003978 <TIM_Base_SetConfig+0xd8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d108      	bne.n	80038e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a22      	ldr	r2, [pc, #136]	@ (8003970 <TIM_Base_SetConfig+0xd0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00b      	beq.n	8003902 <TIM_Base_SetConfig+0x62>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f0:	d007      	beq.n	8003902 <TIM_Base_SetConfig+0x62>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003974 <TIM_Base_SetConfig+0xd4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d003      	beq.n	8003902 <TIM_Base_SetConfig+0x62>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003978 <TIM_Base_SetConfig+0xd8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d108      	bne.n	8003914 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4313      	orrs	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a0d      	ldr	r2, [pc, #52]	@ (8003970 <TIM_Base_SetConfig+0xd0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d103      	bne.n	8003948 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d005      	beq.n	8003966 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f023 0201 	bic.w	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	611a      	str	r2, [r3, #16]
  }
}
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr
 8003970:	40012c00 	.word	0x40012c00
 8003974:	40000400 	.word	0x40000400
 8003978:	40000800 	.word	0x40000800

0800397c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f023 0201 	bic.w	r2, r3, #1
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f023 030a 	bic.w	r3, r3, #10
 80039b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	621a      	str	r2, [r3, #32]
}
 80039ce:	bf00      	nop
 80039d0:	371c      	adds	r7, #28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr

080039d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	f023 0210 	bic.w	r2, r3, #16
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	031b      	lsls	r3, r3, #12
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a14:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	621a      	str	r2, [r3, #32]
}
 8003a2c:	bf00      	nop
 8003a2e:	371c      	adds	r7, #28
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr

08003a36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b085      	sub	sp, #20
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f043 0307 	orr.w	r3, r3, #7
 8003a58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	609a      	str	r2, [r3, #8]
}
 8003a60:	bf00      	nop
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr

08003a6a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b087      	sub	sp, #28
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	607a      	str	r2, [r7, #4]
 8003a76:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a84:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	021a      	lsls	r2, r3, #8
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	609a      	str	r2, [r3, #8]
}
 8003a9e:	bf00      	nop
 8003aa0:	371c      	adds	r7, #28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e046      	b.n	8003b4e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a16      	ldr	r2, [pc, #88]	@ (8003b58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00e      	beq.n	8003b22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b0c:	d009      	beq.n	8003b22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a12      	ldr	r2, [pc, #72]	@ (8003b5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d004      	beq.n	8003b22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a10      	ldr	r2, [pc, #64]	@ (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d10c      	bne.n	8003b3c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr
 8003b58:	40012c00 	.word	0x40012c00
 8003b5c:	40000400 	.word	0x40000400
 8003b60:	40000800 	.word	0x40000800

08003b64 <siprintf>:
 8003b64:	b40e      	push	{r1, r2, r3}
 8003b66:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003b6a:	b510      	push	{r4, lr}
 8003b6c:	2400      	movs	r4, #0
 8003b6e:	b09d      	sub	sp, #116	@ 0x74
 8003b70:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003b72:	9002      	str	r0, [sp, #8]
 8003b74:	9006      	str	r0, [sp, #24]
 8003b76:	9107      	str	r1, [sp, #28]
 8003b78:	9104      	str	r1, [sp, #16]
 8003b7a:	4809      	ldr	r0, [pc, #36]	@ (8003ba0 <siprintf+0x3c>)
 8003b7c:	4909      	ldr	r1, [pc, #36]	@ (8003ba4 <siprintf+0x40>)
 8003b7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b82:	9105      	str	r1, [sp, #20]
 8003b84:	6800      	ldr	r0, [r0, #0]
 8003b86:	a902      	add	r1, sp, #8
 8003b88:	9301      	str	r3, [sp, #4]
 8003b8a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003b8c:	f000 f992 	bl	8003eb4 <_svfiprintf_r>
 8003b90:	9b02      	ldr	r3, [sp, #8]
 8003b92:	701c      	strb	r4, [r3, #0]
 8003b94:	b01d      	add	sp, #116	@ 0x74
 8003b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b9a:	b003      	add	sp, #12
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	2000001c 	.word	0x2000001c
 8003ba4:	ffff0208 	.word	0xffff0208

08003ba8 <memset>:
 8003ba8:	4603      	mov	r3, r0
 8003baa:	4402      	add	r2, r0
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d100      	bne.n	8003bb2 <memset+0xa>
 8003bb0:	4770      	bx	lr
 8003bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8003bb6:	e7f9      	b.n	8003bac <memset+0x4>

08003bb8 <__errno>:
 8003bb8:	4b01      	ldr	r3, [pc, #4]	@ (8003bc0 <__errno+0x8>)
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	2000001c 	.word	0x2000001c

08003bc4 <__libc_init_array>:
 8003bc4:	b570      	push	{r4, r5, r6, lr}
 8003bc6:	2600      	movs	r6, #0
 8003bc8:	4d0c      	ldr	r5, [pc, #48]	@ (8003bfc <__libc_init_array+0x38>)
 8003bca:	4c0d      	ldr	r4, [pc, #52]	@ (8003c00 <__libc_init_array+0x3c>)
 8003bcc:	1b64      	subs	r4, r4, r5
 8003bce:	10a4      	asrs	r4, r4, #2
 8003bd0:	42a6      	cmp	r6, r4
 8003bd2:	d109      	bne.n	8003be8 <__libc_init_array+0x24>
 8003bd4:	f000 fc76 	bl	80044c4 <_init>
 8003bd8:	2600      	movs	r6, #0
 8003bda:	4d0a      	ldr	r5, [pc, #40]	@ (8003c04 <__libc_init_array+0x40>)
 8003bdc:	4c0a      	ldr	r4, [pc, #40]	@ (8003c08 <__libc_init_array+0x44>)
 8003bde:	1b64      	subs	r4, r4, r5
 8003be0:	10a4      	asrs	r4, r4, #2
 8003be2:	42a6      	cmp	r6, r4
 8003be4:	d105      	bne.n	8003bf2 <__libc_init_array+0x2e>
 8003be6:	bd70      	pop	{r4, r5, r6, pc}
 8003be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bec:	4798      	blx	r3
 8003bee:	3601      	adds	r6, #1
 8003bf0:	e7ee      	b.n	8003bd0 <__libc_init_array+0xc>
 8003bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bf6:	4798      	blx	r3
 8003bf8:	3601      	adds	r6, #1
 8003bfa:	e7f2      	b.n	8003be2 <__libc_init_array+0x1e>
 8003bfc:	08005a3c 	.word	0x08005a3c
 8003c00:	08005a3c 	.word	0x08005a3c
 8003c04:	08005a3c 	.word	0x08005a3c
 8003c08:	08005a40 	.word	0x08005a40

08003c0c <__retarget_lock_acquire_recursive>:
 8003c0c:	4770      	bx	lr

08003c0e <__retarget_lock_release_recursive>:
 8003c0e:	4770      	bx	lr

08003c10 <_free_r>:
 8003c10:	b538      	push	{r3, r4, r5, lr}
 8003c12:	4605      	mov	r5, r0
 8003c14:	2900      	cmp	r1, #0
 8003c16:	d040      	beq.n	8003c9a <_free_r+0x8a>
 8003c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c1c:	1f0c      	subs	r4, r1, #4
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	bfb8      	it	lt
 8003c22:	18e4      	addlt	r4, r4, r3
 8003c24:	f000 f8de 	bl	8003de4 <__malloc_lock>
 8003c28:	4a1c      	ldr	r2, [pc, #112]	@ (8003c9c <_free_r+0x8c>)
 8003c2a:	6813      	ldr	r3, [r2, #0]
 8003c2c:	b933      	cbnz	r3, 8003c3c <_free_r+0x2c>
 8003c2e:	6063      	str	r3, [r4, #4]
 8003c30:	6014      	str	r4, [r2, #0]
 8003c32:	4628      	mov	r0, r5
 8003c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c38:	f000 b8da 	b.w	8003df0 <__malloc_unlock>
 8003c3c:	42a3      	cmp	r3, r4
 8003c3e:	d908      	bls.n	8003c52 <_free_r+0x42>
 8003c40:	6820      	ldr	r0, [r4, #0]
 8003c42:	1821      	adds	r1, r4, r0
 8003c44:	428b      	cmp	r3, r1
 8003c46:	bf01      	itttt	eq
 8003c48:	6819      	ldreq	r1, [r3, #0]
 8003c4a:	685b      	ldreq	r3, [r3, #4]
 8003c4c:	1809      	addeq	r1, r1, r0
 8003c4e:	6021      	streq	r1, [r4, #0]
 8003c50:	e7ed      	b.n	8003c2e <_free_r+0x1e>
 8003c52:	461a      	mov	r2, r3
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	b10b      	cbz	r3, 8003c5c <_free_r+0x4c>
 8003c58:	42a3      	cmp	r3, r4
 8003c5a:	d9fa      	bls.n	8003c52 <_free_r+0x42>
 8003c5c:	6811      	ldr	r1, [r2, #0]
 8003c5e:	1850      	adds	r0, r2, r1
 8003c60:	42a0      	cmp	r0, r4
 8003c62:	d10b      	bne.n	8003c7c <_free_r+0x6c>
 8003c64:	6820      	ldr	r0, [r4, #0]
 8003c66:	4401      	add	r1, r0
 8003c68:	1850      	adds	r0, r2, r1
 8003c6a:	4283      	cmp	r3, r0
 8003c6c:	6011      	str	r1, [r2, #0]
 8003c6e:	d1e0      	bne.n	8003c32 <_free_r+0x22>
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	4408      	add	r0, r1
 8003c76:	6010      	str	r0, [r2, #0]
 8003c78:	6053      	str	r3, [r2, #4]
 8003c7a:	e7da      	b.n	8003c32 <_free_r+0x22>
 8003c7c:	d902      	bls.n	8003c84 <_free_r+0x74>
 8003c7e:	230c      	movs	r3, #12
 8003c80:	602b      	str	r3, [r5, #0]
 8003c82:	e7d6      	b.n	8003c32 <_free_r+0x22>
 8003c84:	6820      	ldr	r0, [r4, #0]
 8003c86:	1821      	adds	r1, r4, r0
 8003c88:	428b      	cmp	r3, r1
 8003c8a:	bf01      	itttt	eq
 8003c8c:	6819      	ldreq	r1, [r3, #0]
 8003c8e:	685b      	ldreq	r3, [r3, #4]
 8003c90:	1809      	addeq	r1, r1, r0
 8003c92:	6021      	streq	r1, [r4, #0]
 8003c94:	6063      	str	r3, [r4, #4]
 8003c96:	6054      	str	r4, [r2, #4]
 8003c98:	e7cb      	b.n	8003c32 <_free_r+0x22>
 8003c9a:	bd38      	pop	{r3, r4, r5, pc}
 8003c9c:	200006e4 	.word	0x200006e4

08003ca0 <sbrk_aligned>:
 8003ca0:	b570      	push	{r4, r5, r6, lr}
 8003ca2:	4e0f      	ldr	r6, [pc, #60]	@ (8003ce0 <sbrk_aligned+0x40>)
 8003ca4:	460c      	mov	r4, r1
 8003ca6:	6831      	ldr	r1, [r6, #0]
 8003ca8:	4605      	mov	r5, r0
 8003caa:	b911      	cbnz	r1, 8003cb2 <sbrk_aligned+0x12>
 8003cac:	f000 fba8 	bl	8004400 <_sbrk_r>
 8003cb0:	6030      	str	r0, [r6, #0]
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	4628      	mov	r0, r5
 8003cb6:	f000 fba3 	bl	8004400 <_sbrk_r>
 8003cba:	1c43      	adds	r3, r0, #1
 8003cbc:	d103      	bne.n	8003cc6 <sbrk_aligned+0x26>
 8003cbe:	f04f 34ff 	mov.w	r4, #4294967295
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	bd70      	pop	{r4, r5, r6, pc}
 8003cc6:	1cc4      	adds	r4, r0, #3
 8003cc8:	f024 0403 	bic.w	r4, r4, #3
 8003ccc:	42a0      	cmp	r0, r4
 8003cce:	d0f8      	beq.n	8003cc2 <sbrk_aligned+0x22>
 8003cd0:	1a21      	subs	r1, r4, r0
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	f000 fb94 	bl	8004400 <_sbrk_r>
 8003cd8:	3001      	adds	r0, #1
 8003cda:	d1f2      	bne.n	8003cc2 <sbrk_aligned+0x22>
 8003cdc:	e7ef      	b.n	8003cbe <sbrk_aligned+0x1e>
 8003cde:	bf00      	nop
 8003ce0:	200006e0 	.word	0x200006e0

08003ce4 <_malloc_r>:
 8003ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ce8:	1ccd      	adds	r5, r1, #3
 8003cea:	f025 0503 	bic.w	r5, r5, #3
 8003cee:	3508      	adds	r5, #8
 8003cf0:	2d0c      	cmp	r5, #12
 8003cf2:	bf38      	it	cc
 8003cf4:	250c      	movcc	r5, #12
 8003cf6:	2d00      	cmp	r5, #0
 8003cf8:	4606      	mov	r6, r0
 8003cfa:	db01      	blt.n	8003d00 <_malloc_r+0x1c>
 8003cfc:	42a9      	cmp	r1, r5
 8003cfe:	d904      	bls.n	8003d0a <_malloc_r+0x26>
 8003d00:	230c      	movs	r3, #12
 8003d02:	6033      	str	r3, [r6, #0]
 8003d04:	2000      	movs	r0, #0
 8003d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003de0 <_malloc_r+0xfc>
 8003d0e:	f000 f869 	bl	8003de4 <__malloc_lock>
 8003d12:	f8d8 3000 	ldr.w	r3, [r8]
 8003d16:	461c      	mov	r4, r3
 8003d18:	bb44      	cbnz	r4, 8003d6c <_malloc_r+0x88>
 8003d1a:	4629      	mov	r1, r5
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	f7ff ffbf 	bl	8003ca0 <sbrk_aligned>
 8003d22:	1c43      	adds	r3, r0, #1
 8003d24:	4604      	mov	r4, r0
 8003d26:	d158      	bne.n	8003dda <_malloc_r+0xf6>
 8003d28:	f8d8 4000 	ldr.w	r4, [r8]
 8003d2c:	4627      	mov	r7, r4
 8003d2e:	2f00      	cmp	r7, #0
 8003d30:	d143      	bne.n	8003dba <_malloc_r+0xd6>
 8003d32:	2c00      	cmp	r4, #0
 8003d34:	d04b      	beq.n	8003dce <_malloc_r+0xea>
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	4639      	mov	r1, r7
 8003d3a:	4630      	mov	r0, r6
 8003d3c:	eb04 0903 	add.w	r9, r4, r3
 8003d40:	f000 fb5e 	bl	8004400 <_sbrk_r>
 8003d44:	4581      	cmp	r9, r0
 8003d46:	d142      	bne.n	8003dce <_malloc_r+0xea>
 8003d48:	6821      	ldr	r1, [r4, #0]
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	1a6d      	subs	r5, r5, r1
 8003d4e:	4629      	mov	r1, r5
 8003d50:	f7ff ffa6 	bl	8003ca0 <sbrk_aligned>
 8003d54:	3001      	adds	r0, #1
 8003d56:	d03a      	beq.n	8003dce <_malloc_r+0xea>
 8003d58:	6823      	ldr	r3, [r4, #0]
 8003d5a:	442b      	add	r3, r5
 8003d5c:	6023      	str	r3, [r4, #0]
 8003d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	bb62      	cbnz	r2, 8003dc0 <_malloc_r+0xdc>
 8003d66:	f8c8 7000 	str.w	r7, [r8]
 8003d6a:	e00f      	b.n	8003d8c <_malloc_r+0xa8>
 8003d6c:	6822      	ldr	r2, [r4, #0]
 8003d6e:	1b52      	subs	r2, r2, r5
 8003d70:	d420      	bmi.n	8003db4 <_malloc_r+0xd0>
 8003d72:	2a0b      	cmp	r2, #11
 8003d74:	d917      	bls.n	8003da6 <_malloc_r+0xc2>
 8003d76:	1961      	adds	r1, r4, r5
 8003d78:	42a3      	cmp	r3, r4
 8003d7a:	6025      	str	r5, [r4, #0]
 8003d7c:	bf18      	it	ne
 8003d7e:	6059      	strne	r1, [r3, #4]
 8003d80:	6863      	ldr	r3, [r4, #4]
 8003d82:	bf08      	it	eq
 8003d84:	f8c8 1000 	streq.w	r1, [r8]
 8003d88:	5162      	str	r2, [r4, r5]
 8003d8a:	604b      	str	r3, [r1, #4]
 8003d8c:	4630      	mov	r0, r6
 8003d8e:	f000 f82f 	bl	8003df0 <__malloc_unlock>
 8003d92:	f104 000b 	add.w	r0, r4, #11
 8003d96:	1d23      	adds	r3, r4, #4
 8003d98:	f020 0007 	bic.w	r0, r0, #7
 8003d9c:	1ac2      	subs	r2, r0, r3
 8003d9e:	bf1c      	itt	ne
 8003da0:	1a1b      	subne	r3, r3, r0
 8003da2:	50a3      	strne	r3, [r4, r2]
 8003da4:	e7af      	b.n	8003d06 <_malloc_r+0x22>
 8003da6:	6862      	ldr	r2, [r4, #4]
 8003da8:	42a3      	cmp	r3, r4
 8003daa:	bf0c      	ite	eq
 8003dac:	f8c8 2000 	streq.w	r2, [r8]
 8003db0:	605a      	strne	r2, [r3, #4]
 8003db2:	e7eb      	b.n	8003d8c <_malloc_r+0xa8>
 8003db4:	4623      	mov	r3, r4
 8003db6:	6864      	ldr	r4, [r4, #4]
 8003db8:	e7ae      	b.n	8003d18 <_malloc_r+0x34>
 8003dba:	463c      	mov	r4, r7
 8003dbc:	687f      	ldr	r7, [r7, #4]
 8003dbe:	e7b6      	b.n	8003d2e <_malloc_r+0x4a>
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	42a3      	cmp	r3, r4
 8003dc6:	d1fb      	bne.n	8003dc0 <_malloc_r+0xdc>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	6053      	str	r3, [r2, #4]
 8003dcc:	e7de      	b.n	8003d8c <_malloc_r+0xa8>
 8003dce:	230c      	movs	r3, #12
 8003dd0:	4630      	mov	r0, r6
 8003dd2:	6033      	str	r3, [r6, #0]
 8003dd4:	f000 f80c 	bl	8003df0 <__malloc_unlock>
 8003dd8:	e794      	b.n	8003d04 <_malloc_r+0x20>
 8003dda:	6005      	str	r5, [r0, #0]
 8003ddc:	e7d6      	b.n	8003d8c <_malloc_r+0xa8>
 8003dde:	bf00      	nop
 8003de0:	200006e4 	.word	0x200006e4

08003de4 <__malloc_lock>:
 8003de4:	4801      	ldr	r0, [pc, #4]	@ (8003dec <__malloc_lock+0x8>)
 8003de6:	f7ff bf11 	b.w	8003c0c <__retarget_lock_acquire_recursive>
 8003dea:	bf00      	nop
 8003dec:	200006dc 	.word	0x200006dc

08003df0 <__malloc_unlock>:
 8003df0:	4801      	ldr	r0, [pc, #4]	@ (8003df8 <__malloc_unlock+0x8>)
 8003df2:	f7ff bf0c 	b.w	8003c0e <__retarget_lock_release_recursive>
 8003df6:	bf00      	nop
 8003df8:	200006dc 	.word	0x200006dc

08003dfc <__ssputs_r>:
 8003dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e00:	461f      	mov	r7, r3
 8003e02:	688e      	ldr	r6, [r1, #8]
 8003e04:	4682      	mov	sl, r0
 8003e06:	42be      	cmp	r6, r7
 8003e08:	460c      	mov	r4, r1
 8003e0a:	4690      	mov	r8, r2
 8003e0c:	680b      	ldr	r3, [r1, #0]
 8003e0e:	d82d      	bhi.n	8003e6c <__ssputs_r+0x70>
 8003e10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003e18:	d026      	beq.n	8003e68 <__ssputs_r+0x6c>
 8003e1a:	6965      	ldr	r5, [r4, #20]
 8003e1c:	6909      	ldr	r1, [r1, #16]
 8003e1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e22:	eba3 0901 	sub.w	r9, r3, r1
 8003e26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e2a:	1c7b      	adds	r3, r7, #1
 8003e2c:	444b      	add	r3, r9
 8003e2e:	106d      	asrs	r5, r5, #1
 8003e30:	429d      	cmp	r5, r3
 8003e32:	bf38      	it	cc
 8003e34:	461d      	movcc	r5, r3
 8003e36:	0553      	lsls	r3, r2, #21
 8003e38:	d527      	bpl.n	8003e8a <__ssputs_r+0x8e>
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	f7ff ff52 	bl	8003ce4 <_malloc_r>
 8003e40:	4606      	mov	r6, r0
 8003e42:	b360      	cbz	r0, 8003e9e <__ssputs_r+0xa2>
 8003e44:	464a      	mov	r2, r9
 8003e46:	6921      	ldr	r1, [r4, #16]
 8003e48:	f000 faf8 	bl	800443c <memcpy>
 8003e4c:	89a3      	ldrh	r3, [r4, #12]
 8003e4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e56:	81a3      	strh	r3, [r4, #12]
 8003e58:	6126      	str	r6, [r4, #16]
 8003e5a:	444e      	add	r6, r9
 8003e5c:	6026      	str	r6, [r4, #0]
 8003e5e:	463e      	mov	r6, r7
 8003e60:	6165      	str	r5, [r4, #20]
 8003e62:	eba5 0509 	sub.w	r5, r5, r9
 8003e66:	60a5      	str	r5, [r4, #8]
 8003e68:	42be      	cmp	r6, r7
 8003e6a:	d900      	bls.n	8003e6e <__ssputs_r+0x72>
 8003e6c:	463e      	mov	r6, r7
 8003e6e:	4632      	mov	r2, r6
 8003e70:	4641      	mov	r1, r8
 8003e72:	6820      	ldr	r0, [r4, #0]
 8003e74:	f000 faaa 	bl	80043cc <memmove>
 8003e78:	2000      	movs	r0, #0
 8003e7a:	68a3      	ldr	r3, [r4, #8]
 8003e7c:	1b9b      	subs	r3, r3, r6
 8003e7e:	60a3      	str	r3, [r4, #8]
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	4433      	add	r3, r6
 8003e84:	6023      	str	r3, [r4, #0]
 8003e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e8a:	462a      	mov	r2, r5
 8003e8c:	f000 fae4 	bl	8004458 <_realloc_r>
 8003e90:	4606      	mov	r6, r0
 8003e92:	2800      	cmp	r0, #0
 8003e94:	d1e0      	bne.n	8003e58 <__ssputs_r+0x5c>
 8003e96:	4650      	mov	r0, sl
 8003e98:	6921      	ldr	r1, [r4, #16]
 8003e9a:	f7ff feb9 	bl	8003c10 <_free_r>
 8003e9e:	230c      	movs	r3, #12
 8003ea0:	f8ca 3000 	str.w	r3, [sl]
 8003ea4:	89a3      	ldrh	r3, [r4, #12]
 8003ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003eae:	81a3      	strh	r3, [r4, #12]
 8003eb0:	e7e9      	b.n	8003e86 <__ssputs_r+0x8a>
	...

08003eb4 <_svfiprintf_r>:
 8003eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eb8:	4698      	mov	r8, r3
 8003eba:	898b      	ldrh	r3, [r1, #12]
 8003ebc:	4607      	mov	r7, r0
 8003ebe:	061b      	lsls	r3, r3, #24
 8003ec0:	460d      	mov	r5, r1
 8003ec2:	4614      	mov	r4, r2
 8003ec4:	b09d      	sub	sp, #116	@ 0x74
 8003ec6:	d510      	bpl.n	8003eea <_svfiprintf_r+0x36>
 8003ec8:	690b      	ldr	r3, [r1, #16]
 8003eca:	b973      	cbnz	r3, 8003eea <_svfiprintf_r+0x36>
 8003ecc:	2140      	movs	r1, #64	@ 0x40
 8003ece:	f7ff ff09 	bl	8003ce4 <_malloc_r>
 8003ed2:	6028      	str	r0, [r5, #0]
 8003ed4:	6128      	str	r0, [r5, #16]
 8003ed6:	b930      	cbnz	r0, 8003ee6 <_svfiprintf_r+0x32>
 8003ed8:	230c      	movs	r3, #12
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee0:	b01d      	add	sp, #116	@ 0x74
 8003ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ee6:	2340      	movs	r3, #64	@ 0x40
 8003ee8:	616b      	str	r3, [r5, #20]
 8003eea:	2300      	movs	r3, #0
 8003eec:	9309      	str	r3, [sp, #36]	@ 0x24
 8003eee:	2320      	movs	r3, #32
 8003ef0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ef4:	2330      	movs	r3, #48	@ 0x30
 8003ef6:	f04f 0901 	mov.w	r9, #1
 8003efa:	f8cd 800c 	str.w	r8, [sp, #12]
 8003efe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004098 <_svfiprintf_r+0x1e4>
 8003f02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f06:	4623      	mov	r3, r4
 8003f08:	469a      	mov	sl, r3
 8003f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f0e:	b10a      	cbz	r2, 8003f14 <_svfiprintf_r+0x60>
 8003f10:	2a25      	cmp	r2, #37	@ 0x25
 8003f12:	d1f9      	bne.n	8003f08 <_svfiprintf_r+0x54>
 8003f14:	ebba 0b04 	subs.w	fp, sl, r4
 8003f18:	d00b      	beq.n	8003f32 <_svfiprintf_r+0x7e>
 8003f1a:	465b      	mov	r3, fp
 8003f1c:	4622      	mov	r2, r4
 8003f1e:	4629      	mov	r1, r5
 8003f20:	4638      	mov	r0, r7
 8003f22:	f7ff ff6b 	bl	8003dfc <__ssputs_r>
 8003f26:	3001      	adds	r0, #1
 8003f28:	f000 80a7 	beq.w	800407a <_svfiprintf_r+0x1c6>
 8003f2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f2e:	445a      	add	r2, fp
 8003f30:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f32:	f89a 3000 	ldrb.w	r3, [sl]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 809f 	beq.w	800407a <_svfiprintf_r+0x1c6>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f46:	f10a 0a01 	add.w	sl, sl, #1
 8003f4a:	9304      	str	r3, [sp, #16]
 8003f4c:	9307      	str	r3, [sp, #28]
 8003f4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f52:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f54:	4654      	mov	r4, sl
 8003f56:	2205      	movs	r2, #5
 8003f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f5c:	484e      	ldr	r0, [pc, #312]	@ (8004098 <_svfiprintf_r+0x1e4>)
 8003f5e:	f000 fa5f 	bl	8004420 <memchr>
 8003f62:	9a04      	ldr	r2, [sp, #16]
 8003f64:	b9d8      	cbnz	r0, 8003f9e <_svfiprintf_r+0xea>
 8003f66:	06d0      	lsls	r0, r2, #27
 8003f68:	bf44      	itt	mi
 8003f6a:	2320      	movmi	r3, #32
 8003f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f70:	0711      	lsls	r1, r2, #28
 8003f72:	bf44      	itt	mi
 8003f74:	232b      	movmi	r3, #43	@ 0x2b
 8003f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8003f7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f80:	d015      	beq.n	8003fae <_svfiprintf_r+0xfa>
 8003f82:	4654      	mov	r4, sl
 8003f84:	2000      	movs	r0, #0
 8003f86:	f04f 0c0a 	mov.w	ip, #10
 8003f8a:	9a07      	ldr	r2, [sp, #28]
 8003f8c:	4621      	mov	r1, r4
 8003f8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f92:	3b30      	subs	r3, #48	@ 0x30
 8003f94:	2b09      	cmp	r3, #9
 8003f96:	d94b      	bls.n	8004030 <_svfiprintf_r+0x17c>
 8003f98:	b1b0      	cbz	r0, 8003fc8 <_svfiprintf_r+0x114>
 8003f9a:	9207      	str	r2, [sp, #28]
 8003f9c:	e014      	b.n	8003fc8 <_svfiprintf_r+0x114>
 8003f9e:	eba0 0308 	sub.w	r3, r0, r8
 8003fa2:	fa09 f303 	lsl.w	r3, r9, r3
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	46a2      	mov	sl, r4
 8003faa:	9304      	str	r3, [sp, #16]
 8003fac:	e7d2      	b.n	8003f54 <_svfiprintf_r+0xa0>
 8003fae:	9b03      	ldr	r3, [sp, #12]
 8003fb0:	1d19      	adds	r1, r3, #4
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	9103      	str	r1, [sp, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	bfbb      	ittet	lt
 8003fba:	425b      	neglt	r3, r3
 8003fbc:	f042 0202 	orrlt.w	r2, r2, #2
 8003fc0:	9307      	strge	r3, [sp, #28]
 8003fc2:	9307      	strlt	r3, [sp, #28]
 8003fc4:	bfb8      	it	lt
 8003fc6:	9204      	strlt	r2, [sp, #16]
 8003fc8:	7823      	ldrb	r3, [r4, #0]
 8003fca:	2b2e      	cmp	r3, #46	@ 0x2e
 8003fcc:	d10a      	bne.n	8003fe4 <_svfiprintf_r+0x130>
 8003fce:	7863      	ldrb	r3, [r4, #1]
 8003fd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fd2:	d132      	bne.n	800403a <_svfiprintf_r+0x186>
 8003fd4:	9b03      	ldr	r3, [sp, #12]
 8003fd6:	3402      	adds	r4, #2
 8003fd8:	1d1a      	adds	r2, r3, #4
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	9203      	str	r2, [sp, #12]
 8003fde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003fe2:	9305      	str	r3, [sp, #20]
 8003fe4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800409c <_svfiprintf_r+0x1e8>
 8003fe8:	2203      	movs	r2, #3
 8003fea:	4650      	mov	r0, sl
 8003fec:	7821      	ldrb	r1, [r4, #0]
 8003fee:	f000 fa17 	bl	8004420 <memchr>
 8003ff2:	b138      	cbz	r0, 8004004 <_svfiprintf_r+0x150>
 8003ff4:	2240      	movs	r2, #64	@ 0x40
 8003ff6:	9b04      	ldr	r3, [sp, #16]
 8003ff8:	eba0 000a 	sub.w	r0, r0, sl
 8003ffc:	4082      	lsls	r2, r0
 8003ffe:	4313      	orrs	r3, r2
 8004000:	3401      	adds	r4, #1
 8004002:	9304      	str	r3, [sp, #16]
 8004004:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004008:	2206      	movs	r2, #6
 800400a:	4825      	ldr	r0, [pc, #148]	@ (80040a0 <_svfiprintf_r+0x1ec>)
 800400c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004010:	f000 fa06 	bl	8004420 <memchr>
 8004014:	2800      	cmp	r0, #0
 8004016:	d036      	beq.n	8004086 <_svfiprintf_r+0x1d2>
 8004018:	4b22      	ldr	r3, [pc, #136]	@ (80040a4 <_svfiprintf_r+0x1f0>)
 800401a:	bb1b      	cbnz	r3, 8004064 <_svfiprintf_r+0x1b0>
 800401c:	9b03      	ldr	r3, [sp, #12]
 800401e:	3307      	adds	r3, #7
 8004020:	f023 0307 	bic.w	r3, r3, #7
 8004024:	3308      	adds	r3, #8
 8004026:	9303      	str	r3, [sp, #12]
 8004028:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800402a:	4433      	add	r3, r6
 800402c:	9309      	str	r3, [sp, #36]	@ 0x24
 800402e:	e76a      	b.n	8003f06 <_svfiprintf_r+0x52>
 8004030:	460c      	mov	r4, r1
 8004032:	2001      	movs	r0, #1
 8004034:	fb0c 3202 	mla	r2, ip, r2, r3
 8004038:	e7a8      	b.n	8003f8c <_svfiprintf_r+0xd8>
 800403a:	2300      	movs	r3, #0
 800403c:	f04f 0c0a 	mov.w	ip, #10
 8004040:	4619      	mov	r1, r3
 8004042:	3401      	adds	r4, #1
 8004044:	9305      	str	r3, [sp, #20]
 8004046:	4620      	mov	r0, r4
 8004048:	f810 2b01 	ldrb.w	r2, [r0], #1
 800404c:	3a30      	subs	r2, #48	@ 0x30
 800404e:	2a09      	cmp	r2, #9
 8004050:	d903      	bls.n	800405a <_svfiprintf_r+0x1a6>
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0c6      	beq.n	8003fe4 <_svfiprintf_r+0x130>
 8004056:	9105      	str	r1, [sp, #20]
 8004058:	e7c4      	b.n	8003fe4 <_svfiprintf_r+0x130>
 800405a:	4604      	mov	r4, r0
 800405c:	2301      	movs	r3, #1
 800405e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004062:	e7f0      	b.n	8004046 <_svfiprintf_r+0x192>
 8004064:	ab03      	add	r3, sp, #12
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	462a      	mov	r2, r5
 800406a:	4638      	mov	r0, r7
 800406c:	4b0e      	ldr	r3, [pc, #56]	@ (80040a8 <_svfiprintf_r+0x1f4>)
 800406e:	a904      	add	r1, sp, #16
 8004070:	f3af 8000 	nop.w
 8004074:	1c42      	adds	r2, r0, #1
 8004076:	4606      	mov	r6, r0
 8004078:	d1d6      	bne.n	8004028 <_svfiprintf_r+0x174>
 800407a:	89ab      	ldrh	r3, [r5, #12]
 800407c:	065b      	lsls	r3, r3, #25
 800407e:	f53f af2d 	bmi.w	8003edc <_svfiprintf_r+0x28>
 8004082:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004084:	e72c      	b.n	8003ee0 <_svfiprintf_r+0x2c>
 8004086:	ab03      	add	r3, sp, #12
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	462a      	mov	r2, r5
 800408c:	4638      	mov	r0, r7
 800408e:	4b06      	ldr	r3, [pc, #24]	@ (80040a8 <_svfiprintf_r+0x1f4>)
 8004090:	a904      	add	r1, sp, #16
 8004092:	f000 f87d 	bl	8004190 <_printf_i>
 8004096:	e7ed      	b.n	8004074 <_svfiprintf_r+0x1c0>
 8004098:	08005a06 	.word	0x08005a06
 800409c:	08005a0c 	.word	0x08005a0c
 80040a0:	08005a10 	.word	0x08005a10
 80040a4:	00000000 	.word	0x00000000
 80040a8:	08003dfd 	.word	0x08003dfd

080040ac <_printf_common>:
 80040ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b0:	4616      	mov	r6, r2
 80040b2:	4698      	mov	r8, r3
 80040b4:	688a      	ldr	r2, [r1, #8]
 80040b6:	690b      	ldr	r3, [r1, #16]
 80040b8:	4607      	mov	r7, r0
 80040ba:	4293      	cmp	r3, r2
 80040bc:	bfb8      	it	lt
 80040be:	4613      	movlt	r3, r2
 80040c0:	6033      	str	r3, [r6, #0]
 80040c2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80040c6:	460c      	mov	r4, r1
 80040c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80040cc:	b10a      	cbz	r2, 80040d2 <_printf_common+0x26>
 80040ce:	3301      	adds	r3, #1
 80040d0:	6033      	str	r3, [r6, #0]
 80040d2:	6823      	ldr	r3, [r4, #0]
 80040d4:	0699      	lsls	r1, r3, #26
 80040d6:	bf42      	ittt	mi
 80040d8:	6833      	ldrmi	r3, [r6, #0]
 80040da:	3302      	addmi	r3, #2
 80040dc:	6033      	strmi	r3, [r6, #0]
 80040de:	6825      	ldr	r5, [r4, #0]
 80040e0:	f015 0506 	ands.w	r5, r5, #6
 80040e4:	d106      	bne.n	80040f4 <_printf_common+0x48>
 80040e6:	f104 0a19 	add.w	sl, r4, #25
 80040ea:	68e3      	ldr	r3, [r4, #12]
 80040ec:	6832      	ldr	r2, [r6, #0]
 80040ee:	1a9b      	subs	r3, r3, r2
 80040f0:	42ab      	cmp	r3, r5
 80040f2:	dc2b      	bgt.n	800414c <_printf_common+0xa0>
 80040f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80040f8:	6822      	ldr	r2, [r4, #0]
 80040fa:	3b00      	subs	r3, #0
 80040fc:	bf18      	it	ne
 80040fe:	2301      	movne	r3, #1
 8004100:	0692      	lsls	r2, r2, #26
 8004102:	d430      	bmi.n	8004166 <_printf_common+0xba>
 8004104:	4641      	mov	r1, r8
 8004106:	4638      	mov	r0, r7
 8004108:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800410c:	47c8      	blx	r9
 800410e:	3001      	adds	r0, #1
 8004110:	d023      	beq.n	800415a <_printf_common+0xae>
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	6922      	ldr	r2, [r4, #16]
 8004116:	f003 0306 	and.w	r3, r3, #6
 800411a:	2b04      	cmp	r3, #4
 800411c:	bf14      	ite	ne
 800411e:	2500      	movne	r5, #0
 8004120:	6833      	ldreq	r3, [r6, #0]
 8004122:	f04f 0600 	mov.w	r6, #0
 8004126:	bf08      	it	eq
 8004128:	68e5      	ldreq	r5, [r4, #12]
 800412a:	f104 041a 	add.w	r4, r4, #26
 800412e:	bf08      	it	eq
 8004130:	1aed      	subeq	r5, r5, r3
 8004132:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004136:	bf08      	it	eq
 8004138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800413c:	4293      	cmp	r3, r2
 800413e:	bfc4      	itt	gt
 8004140:	1a9b      	subgt	r3, r3, r2
 8004142:	18ed      	addgt	r5, r5, r3
 8004144:	42b5      	cmp	r5, r6
 8004146:	d11a      	bne.n	800417e <_printf_common+0xd2>
 8004148:	2000      	movs	r0, #0
 800414a:	e008      	b.n	800415e <_printf_common+0xb2>
 800414c:	2301      	movs	r3, #1
 800414e:	4652      	mov	r2, sl
 8004150:	4641      	mov	r1, r8
 8004152:	4638      	mov	r0, r7
 8004154:	47c8      	blx	r9
 8004156:	3001      	adds	r0, #1
 8004158:	d103      	bne.n	8004162 <_printf_common+0xb6>
 800415a:	f04f 30ff 	mov.w	r0, #4294967295
 800415e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004162:	3501      	adds	r5, #1
 8004164:	e7c1      	b.n	80040ea <_printf_common+0x3e>
 8004166:	2030      	movs	r0, #48	@ 0x30
 8004168:	18e1      	adds	r1, r4, r3
 800416a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004174:	4422      	add	r2, r4
 8004176:	3302      	adds	r3, #2
 8004178:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800417c:	e7c2      	b.n	8004104 <_printf_common+0x58>
 800417e:	2301      	movs	r3, #1
 8004180:	4622      	mov	r2, r4
 8004182:	4641      	mov	r1, r8
 8004184:	4638      	mov	r0, r7
 8004186:	47c8      	blx	r9
 8004188:	3001      	adds	r0, #1
 800418a:	d0e6      	beq.n	800415a <_printf_common+0xae>
 800418c:	3601      	adds	r6, #1
 800418e:	e7d9      	b.n	8004144 <_printf_common+0x98>

08004190 <_printf_i>:
 8004190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004194:	7e0f      	ldrb	r7, [r1, #24]
 8004196:	4691      	mov	r9, r2
 8004198:	2f78      	cmp	r7, #120	@ 0x78
 800419a:	4680      	mov	r8, r0
 800419c:	460c      	mov	r4, r1
 800419e:	469a      	mov	sl, r3
 80041a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041a6:	d807      	bhi.n	80041b8 <_printf_i+0x28>
 80041a8:	2f62      	cmp	r7, #98	@ 0x62
 80041aa:	d80a      	bhi.n	80041c2 <_printf_i+0x32>
 80041ac:	2f00      	cmp	r7, #0
 80041ae:	f000 80d1 	beq.w	8004354 <_printf_i+0x1c4>
 80041b2:	2f58      	cmp	r7, #88	@ 0x58
 80041b4:	f000 80b8 	beq.w	8004328 <_printf_i+0x198>
 80041b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80041c0:	e03a      	b.n	8004238 <_printf_i+0xa8>
 80041c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80041c6:	2b15      	cmp	r3, #21
 80041c8:	d8f6      	bhi.n	80041b8 <_printf_i+0x28>
 80041ca:	a101      	add	r1, pc, #4	@ (adr r1, 80041d0 <_printf_i+0x40>)
 80041cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041d0:	08004229 	.word	0x08004229
 80041d4:	0800423d 	.word	0x0800423d
 80041d8:	080041b9 	.word	0x080041b9
 80041dc:	080041b9 	.word	0x080041b9
 80041e0:	080041b9 	.word	0x080041b9
 80041e4:	080041b9 	.word	0x080041b9
 80041e8:	0800423d 	.word	0x0800423d
 80041ec:	080041b9 	.word	0x080041b9
 80041f0:	080041b9 	.word	0x080041b9
 80041f4:	080041b9 	.word	0x080041b9
 80041f8:	080041b9 	.word	0x080041b9
 80041fc:	0800433b 	.word	0x0800433b
 8004200:	08004267 	.word	0x08004267
 8004204:	080042f5 	.word	0x080042f5
 8004208:	080041b9 	.word	0x080041b9
 800420c:	080041b9 	.word	0x080041b9
 8004210:	0800435d 	.word	0x0800435d
 8004214:	080041b9 	.word	0x080041b9
 8004218:	08004267 	.word	0x08004267
 800421c:	080041b9 	.word	0x080041b9
 8004220:	080041b9 	.word	0x080041b9
 8004224:	080042fd 	.word	0x080042fd
 8004228:	6833      	ldr	r3, [r6, #0]
 800422a:	1d1a      	adds	r2, r3, #4
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6032      	str	r2, [r6, #0]
 8004230:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004234:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004238:	2301      	movs	r3, #1
 800423a:	e09c      	b.n	8004376 <_printf_i+0x1e6>
 800423c:	6833      	ldr	r3, [r6, #0]
 800423e:	6820      	ldr	r0, [r4, #0]
 8004240:	1d19      	adds	r1, r3, #4
 8004242:	6031      	str	r1, [r6, #0]
 8004244:	0606      	lsls	r6, r0, #24
 8004246:	d501      	bpl.n	800424c <_printf_i+0xbc>
 8004248:	681d      	ldr	r5, [r3, #0]
 800424a:	e003      	b.n	8004254 <_printf_i+0xc4>
 800424c:	0645      	lsls	r5, r0, #25
 800424e:	d5fb      	bpl.n	8004248 <_printf_i+0xb8>
 8004250:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004254:	2d00      	cmp	r5, #0
 8004256:	da03      	bge.n	8004260 <_printf_i+0xd0>
 8004258:	232d      	movs	r3, #45	@ 0x2d
 800425a:	426d      	negs	r5, r5
 800425c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004260:	230a      	movs	r3, #10
 8004262:	4858      	ldr	r0, [pc, #352]	@ (80043c4 <_printf_i+0x234>)
 8004264:	e011      	b.n	800428a <_printf_i+0xfa>
 8004266:	6821      	ldr	r1, [r4, #0]
 8004268:	6833      	ldr	r3, [r6, #0]
 800426a:	0608      	lsls	r0, r1, #24
 800426c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004270:	d402      	bmi.n	8004278 <_printf_i+0xe8>
 8004272:	0649      	lsls	r1, r1, #25
 8004274:	bf48      	it	mi
 8004276:	b2ad      	uxthmi	r5, r5
 8004278:	2f6f      	cmp	r7, #111	@ 0x6f
 800427a:	6033      	str	r3, [r6, #0]
 800427c:	bf14      	ite	ne
 800427e:	230a      	movne	r3, #10
 8004280:	2308      	moveq	r3, #8
 8004282:	4850      	ldr	r0, [pc, #320]	@ (80043c4 <_printf_i+0x234>)
 8004284:	2100      	movs	r1, #0
 8004286:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800428a:	6866      	ldr	r6, [r4, #4]
 800428c:	2e00      	cmp	r6, #0
 800428e:	60a6      	str	r6, [r4, #8]
 8004290:	db05      	blt.n	800429e <_printf_i+0x10e>
 8004292:	6821      	ldr	r1, [r4, #0]
 8004294:	432e      	orrs	r6, r5
 8004296:	f021 0104 	bic.w	r1, r1, #4
 800429a:	6021      	str	r1, [r4, #0]
 800429c:	d04b      	beq.n	8004336 <_printf_i+0x1a6>
 800429e:	4616      	mov	r6, r2
 80042a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80042a4:	fb03 5711 	mls	r7, r3, r1, r5
 80042a8:	5dc7      	ldrb	r7, [r0, r7]
 80042aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042ae:	462f      	mov	r7, r5
 80042b0:	42bb      	cmp	r3, r7
 80042b2:	460d      	mov	r5, r1
 80042b4:	d9f4      	bls.n	80042a0 <_printf_i+0x110>
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d10b      	bne.n	80042d2 <_printf_i+0x142>
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	07df      	lsls	r7, r3, #31
 80042be:	d508      	bpl.n	80042d2 <_printf_i+0x142>
 80042c0:	6923      	ldr	r3, [r4, #16]
 80042c2:	6861      	ldr	r1, [r4, #4]
 80042c4:	4299      	cmp	r1, r3
 80042c6:	bfde      	ittt	le
 80042c8:	2330      	movle	r3, #48	@ 0x30
 80042ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042d2:	1b92      	subs	r2, r2, r6
 80042d4:	6122      	str	r2, [r4, #16]
 80042d6:	464b      	mov	r3, r9
 80042d8:	4621      	mov	r1, r4
 80042da:	4640      	mov	r0, r8
 80042dc:	f8cd a000 	str.w	sl, [sp]
 80042e0:	aa03      	add	r2, sp, #12
 80042e2:	f7ff fee3 	bl	80040ac <_printf_common>
 80042e6:	3001      	adds	r0, #1
 80042e8:	d14a      	bne.n	8004380 <_printf_i+0x1f0>
 80042ea:	f04f 30ff 	mov.w	r0, #4294967295
 80042ee:	b004      	add	sp, #16
 80042f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	f043 0320 	orr.w	r3, r3, #32
 80042fa:	6023      	str	r3, [r4, #0]
 80042fc:	2778      	movs	r7, #120	@ 0x78
 80042fe:	4832      	ldr	r0, [pc, #200]	@ (80043c8 <_printf_i+0x238>)
 8004300:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	6831      	ldr	r1, [r6, #0]
 8004308:	061f      	lsls	r7, r3, #24
 800430a:	f851 5b04 	ldr.w	r5, [r1], #4
 800430e:	d402      	bmi.n	8004316 <_printf_i+0x186>
 8004310:	065f      	lsls	r7, r3, #25
 8004312:	bf48      	it	mi
 8004314:	b2ad      	uxthmi	r5, r5
 8004316:	6031      	str	r1, [r6, #0]
 8004318:	07d9      	lsls	r1, r3, #31
 800431a:	bf44      	itt	mi
 800431c:	f043 0320 	orrmi.w	r3, r3, #32
 8004320:	6023      	strmi	r3, [r4, #0]
 8004322:	b11d      	cbz	r5, 800432c <_printf_i+0x19c>
 8004324:	2310      	movs	r3, #16
 8004326:	e7ad      	b.n	8004284 <_printf_i+0xf4>
 8004328:	4826      	ldr	r0, [pc, #152]	@ (80043c4 <_printf_i+0x234>)
 800432a:	e7e9      	b.n	8004300 <_printf_i+0x170>
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	f023 0320 	bic.w	r3, r3, #32
 8004332:	6023      	str	r3, [r4, #0]
 8004334:	e7f6      	b.n	8004324 <_printf_i+0x194>
 8004336:	4616      	mov	r6, r2
 8004338:	e7bd      	b.n	80042b6 <_printf_i+0x126>
 800433a:	6833      	ldr	r3, [r6, #0]
 800433c:	6825      	ldr	r5, [r4, #0]
 800433e:	1d18      	adds	r0, r3, #4
 8004340:	6961      	ldr	r1, [r4, #20]
 8004342:	6030      	str	r0, [r6, #0]
 8004344:	062e      	lsls	r6, r5, #24
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	d501      	bpl.n	800434e <_printf_i+0x1be>
 800434a:	6019      	str	r1, [r3, #0]
 800434c:	e002      	b.n	8004354 <_printf_i+0x1c4>
 800434e:	0668      	lsls	r0, r5, #25
 8004350:	d5fb      	bpl.n	800434a <_printf_i+0x1ba>
 8004352:	8019      	strh	r1, [r3, #0]
 8004354:	2300      	movs	r3, #0
 8004356:	4616      	mov	r6, r2
 8004358:	6123      	str	r3, [r4, #16]
 800435a:	e7bc      	b.n	80042d6 <_printf_i+0x146>
 800435c:	6833      	ldr	r3, [r6, #0]
 800435e:	2100      	movs	r1, #0
 8004360:	1d1a      	adds	r2, r3, #4
 8004362:	6032      	str	r2, [r6, #0]
 8004364:	681e      	ldr	r6, [r3, #0]
 8004366:	6862      	ldr	r2, [r4, #4]
 8004368:	4630      	mov	r0, r6
 800436a:	f000 f859 	bl	8004420 <memchr>
 800436e:	b108      	cbz	r0, 8004374 <_printf_i+0x1e4>
 8004370:	1b80      	subs	r0, r0, r6
 8004372:	6060      	str	r0, [r4, #4]
 8004374:	6863      	ldr	r3, [r4, #4]
 8004376:	6123      	str	r3, [r4, #16]
 8004378:	2300      	movs	r3, #0
 800437a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800437e:	e7aa      	b.n	80042d6 <_printf_i+0x146>
 8004380:	4632      	mov	r2, r6
 8004382:	4649      	mov	r1, r9
 8004384:	4640      	mov	r0, r8
 8004386:	6923      	ldr	r3, [r4, #16]
 8004388:	47d0      	blx	sl
 800438a:	3001      	adds	r0, #1
 800438c:	d0ad      	beq.n	80042ea <_printf_i+0x15a>
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	079b      	lsls	r3, r3, #30
 8004392:	d413      	bmi.n	80043bc <_printf_i+0x22c>
 8004394:	68e0      	ldr	r0, [r4, #12]
 8004396:	9b03      	ldr	r3, [sp, #12]
 8004398:	4298      	cmp	r0, r3
 800439a:	bfb8      	it	lt
 800439c:	4618      	movlt	r0, r3
 800439e:	e7a6      	b.n	80042ee <_printf_i+0x15e>
 80043a0:	2301      	movs	r3, #1
 80043a2:	4632      	mov	r2, r6
 80043a4:	4649      	mov	r1, r9
 80043a6:	4640      	mov	r0, r8
 80043a8:	47d0      	blx	sl
 80043aa:	3001      	adds	r0, #1
 80043ac:	d09d      	beq.n	80042ea <_printf_i+0x15a>
 80043ae:	3501      	adds	r5, #1
 80043b0:	68e3      	ldr	r3, [r4, #12]
 80043b2:	9903      	ldr	r1, [sp, #12]
 80043b4:	1a5b      	subs	r3, r3, r1
 80043b6:	42ab      	cmp	r3, r5
 80043b8:	dcf2      	bgt.n	80043a0 <_printf_i+0x210>
 80043ba:	e7eb      	b.n	8004394 <_printf_i+0x204>
 80043bc:	2500      	movs	r5, #0
 80043be:	f104 0619 	add.w	r6, r4, #25
 80043c2:	e7f5      	b.n	80043b0 <_printf_i+0x220>
 80043c4:	08005a17 	.word	0x08005a17
 80043c8:	08005a28 	.word	0x08005a28

080043cc <memmove>:
 80043cc:	4288      	cmp	r0, r1
 80043ce:	b510      	push	{r4, lr}
 80043d0:	eb01 0402 	add.w	r4, r1, r2
 80043d4:	d902      	bls.n	80043dc <memmove+0x10>
 80043d6:	4284      	cmp	r4, r0
 80043d8:	4623      	mov	r3, r4
 80043da:	d807      	bhi.n	80043ec <memmove+0x20>
 80043dc:	1e43      	subs	r3, r0, #1
 80043de:	42a1      	cmp	r1, r4
 80043e0:	d008      	beq.n	80043f4 <memmove+0x28>
 80043e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043ea:	e7f8      	b.n	80043de <memmove+0x12>
 80043ec:	4601      	mov	r1, r0
 80043ee:	4402      	add	r2, r0
 80043f0:	428a      	cmp	r2, r1
 80043f2:	d100      	bne.n	80043f6 <memmove+0x2a>
 80043f4:	bd10      	pop	{r4, pc}
 80043f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043fe:	e7f7      	b.n	80043f0 <memmove+0x24>

08004400 <_sbrk_r>:
 8004400:	b538      	push	{r3, r4, r5, lr}
 8004402:	2300      	movs	r3, #0
 8004404:	4d05      	ldr	r5, [pc, #20]	@ (800441c <_sbrk_r+0x1c>)
 8004406:	4604      	mov	r4, r0
 8004408:	4608      	mov	r0, r1
 800440a:	602b      	str	r3, [r5, #0]
 800440c:	f7fd fba0 	bl	8001b50 <_sbrk>
 8004410:	1c43      	adds	r3, r0, #1
 8004412:	d102      	bne.n	800441a <_sbrk_r+0x1a>
 8004414:	682b      	ldr	r3, [r5, #0]
 8004416:	b103      	cbz	r3, 800441a <_sbrk_r+0x1a>
 8004418:	6023      	str	r3, [r4, #0]
 800441a:	bd38      	pop	{r3, r4, r5, pc}
 800441c:	200006d8 	.word	0x200006d8

08004420 <memchr>:
 8004420:	4603      	mov	r3, r0
 8004422:	b510      	push	{r4, lr}
 8004424:	b2c9      	uxtb	r1, r1
 8004426:	4402      	add	r2, r0
 8004428:	4293      	cmp	r3, r2
 800442a:	4618      	mov	r0, r3
 800442c:	d101      	bne.n	8004432 <memchr+0x12>
 800442e:	2000      	movs	r0, #0
 8004430:	e003      	b.n	800443a <memchr+0x1a>
 8004432:	7804      	ldrb	r4, [r0, #0]
 8004434:	3301      	adds	r3, #1
 8004436:	428c      	cmp	r4, r1
 8004438:	d1f6      	bne.n	8004428 <memchr+0x8>
 800443a:	bd10      	pop	{r4, pc}

0800443c <memcpy>:
 800443c:	440a      	add	r2, r1
 800443e:	4291      	cmp	r1, r2
 8004440:	f100 33ff 	add.w	r3, r0, #4294967295
 8004444:	d100      	bne.n	8004448 <memcpy+0xc>
 8004446:	4770      	bx	lr
 8004448:	b510      	push	{r4, lr}
 800444a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800444e:	4291      	cmp	r1, r2
 8004450:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004454:	d1f9      	bne.n	800444a <memcpy+0xe>
 8004456:	bd10      	pop	{r4, pc}

08004458 <_realloc_r>:
 8004458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800445c:	4607      	mov	r7, r0
 800445e:	4614      	mov	r4, r2
 8004460:	460d      	mov	r5, r1
 8004462:	b921      	cbnz	r1, 800446e <_realloc_r+0x16>
 8004464:	4611      	mov	r1, r2
 8004466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800446a:	f7ff bc3b 	b.w	8003ce4 <_malloc_r>
 800446e:	b92a      	cbnz	r2, 800447c <_realloc_r+0x24>
 8004470:	f7ff fbce 	bl	8003c10 <_free_r>
 8004474:	4625      	mov	r5, r4
 8004476:	4628      	mov	r0, r5
 8004478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800447c:	f000 f81a 	bl	80044b4 <_malloc_usable_size_r>
 8004480:	4284      	cmp	r4, r0
 8004482:	4606      	mov	r6, r0
 8004484:	d802      	bhi.n	800448c <_realloc_r+0x34>
 8004486:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800448a:	d8f4      	bhi.n	8004476 <_realloc_r+0x1e>
 800448c:	4621      	mov	r1, r4
 800448e:	4638      	mov	r0, r7
 8004490:	f7ff fc28 	bl	8003ce4 <_malloc_r>
 8004494:	4680      	mov	r8, r0
 8004496:	b908      	cbnz	r0, 800449c <_realloc_r+0x44>
 8004498:	4645      	mov	r5, r8
 800449a:	e7ec      	b.n	8004476 <_realloc_r+0x1e>
 800449c:	42b4      	cmp	r4, r6
 800449e:	4622      	mov	r2, r4
 80044a0:	4629      	mov	r1, r5
 80044a2:	bf28      	it	cs
 80044a4:	4632      	movcs	r2, r6
 80044a6:	f7ff ffc9 	bl	800443c <memcpy>
 80044aa:	4629      	mov	r1, r5
 80044ac:	4638      	mov	r0, r7
 80044ae:	f7ff fbaf 	bl	8003c10 <_free_r>
 80044b2:	e7f1      	b.n	8004498 <_realloc_r+0x40>

080044b4 <_malloc_usable_size_r>:
 80044b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044b8:	1f18      	subs	r0, r3, #4
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	bfbc      	itt	lt
 80044be:	580b      	ldrlt	r3, [r1, r0]
 80044c0:	18c0      	addlt	r0, r0, r3
 80044c2:	4770      	bx	lr

080044c4 <_init>:
 80044c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c6:	bf00      	nop
 80044c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ca:	bc08      	pop	{r3}
 80044cc:	469e      	mov	lr, r3
 80044ce:	4770      	bx	lr

080044d0 <_fini>:
 80044d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d2:	bf00      	nop
 80044d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044d6:	bc08      	pop	{r3}
 80044d8:	469e      	mov	lr, r3
 80044da:	4770      	bx	lr
