
bitwise on and off.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000124  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000254  08000254  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000254  08000254  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000254  08000254  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000254  08000254  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000000  08000254  08000254  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000000  08000254  08000254  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000254  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000000  20000004  08000258  00000000  2**0
                  ALLOC
 10 ._user_heap_stack 00000604  20000004  08000258  00002004  2**0
                  ALLOC
 11 .ARM.attributes 00000021  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_line   00000111  00000000  00000000  00002025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000005d  00000000  00000000  00002136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00000055  00000000  00000000  00002193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000038  00000000  00000000  000021e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000048  00000000  00000000  00002220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00000079  00000000  00000000  00002268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000019  00000000  00000000  000022e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <main>:
.equ GPIOB_CRL, 0x40010C00    @ GPIOB Config register low (for pins 0-7)
.equ GPIOB_CRH, 0x40010C04    @ GPIOB Config register high (for pins 8-15)

main:
    @ Enable GPIOB clock
    LDR R0, =RCC_APB2ENR
 8000130:	482e      	ldr	r0, [pc, #184]	@ (80001ec <delay_loop+0x8>)
    LDR R1, [R0]
 8000132:	6801      	ldr	r1, [r0, #0]
    ORR R1, R1, #(1 << 3)     @ Enable GPIOB clock (bit 3)
 8000134:	f041 0108 	orr.w	r1, r1, #8
    STR R1, [R0]
 8000138:	6001      	str	r1, [r0, #0]

    @ Configure PB6, PB7, PB8, PB9 as output (push-pull, max speed 2 MHz)
    LDR R0, =GPIOB_CRL
 800013a:	482d      	ldr	r0, [pc, #180]	@ (80001f0 <delay_loop+0xc>)
    LDR R1, [R0]
 800013c:	6801      	ldr	r1, [r0, #0]
    BIC R1, R1, #0xFF000000    @ Clear bits for PB6 and PB7 (bits 24-31)
 800013e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
    ORR R1, R1, #0x33000000    @ Set PB6 and PB7 to output mode (bits 24-31)
 8000142:	f041 514c 	orr.w	r1, r1, #855638016	@ 0x33000000
    STR R1, [R0]
 8000146:	6001      	str	r1, [r0, #0]

    LDR R0, =GPIOB_CRH
 8000148:	482a      	ldr	r0, [pc, #168]	@ (80001f4 <delay_loop+0x10>)
    LDR R1, [R0]
 800014a:	6801      	ldr	r1, [r0, #0]
    BIC R1, R1, #0x000000FF    @ Clear bits for PB8 and PB9 (bits 0-7)
 800014c:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
    ORR R1, R1, #0x00000033    @ Set PB8 and PB9 to output mode (bits 0-7)
 8000150:	f041 0133 	orr.w	r1, r1, #51	@ 0x33
    STR R1, [R0]
 8000154:	6001      	str	r1, [r0, #0]

    @ Turn on all LEDs initially (set PB6-PB9 HIGH)
    LDR R0, =GPIOB_ODR
 8000156:	4828      	ldr	r0, [pc, #160]	@ (80001f8 <delay_loop+0x14>)
    LDR R1, [R0]
 8000158:	6801      	ldr	r1, [r0, #0]
    ORR R1, R1, #(1 << 6 | 1 << 7 | 1 << 8 | 1 << 9)  @ Set PB6-PB9 HIGH
 800015a:	f441 7170 	orr.w	r1, r1, #960	@ 0x3c0
    STR R1, [R0]
 800015e:	6001      	str	r1, [r0, #0]
    BL delay_300ms
 8000160:	f000 f83f 	bl	80001e2 <delay_300ms>

    @ Load CONTROL_REG address
    LDR R0, =CONTROL_REG
 8000164:	4825      	ldr	r0, [pc, #148]	@ (80001fc <delay_loop+0x18>)
    LDR R1, [R0]
 8000166:	6801      	ldr	r1, [r0, #0]

    @ Task 1: Turn on the living room lights (bit 0) and the heating system (bit 2)
    MOV R2, #0x05              @ Load value 0x05 (binary 00000101) to set bit 0 and bit 2
 8000168:	f04f 0205 	mov.w	r2, #5
    ORR R1, R1, R2
 800016c:	ea41 0102 	orr.w	r1, r1, r2

    @ Turn off LED for Task 1 (PB6 LOW)
    LDR R0, =GPIOB_ODR
 8000170:	4821      	ldr	r0, [pc, #132]	@ (80001f8 <delay_loop+0x14>)
    LDR R2, [R0]
 8000172:	6802      	ldr	r2, [r0, #0]
    BIC R2, R2, #(1 << 6)      @ Clear bit 6 (PB6 LOW)
 8000174:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    STR R2, [R0]
 8000178:	6002      	str	r2, [r0, #0]
    BL delay_300ms              @ Add a delay to visualize the LED
 800017a:	f000 f832 	bl	80001e2 <delay_300ms>

    @ Task 2: Turn off the air conditioning system (bit 3)
    MOV R2, #0x08              @ Load value 0x08 (binary 00001000) to clear bit 3
 800017e:	f04f 0208 	mov.w	r2, #8
    BIC R1, R1, R2
 8000182:	ea21 0102 	bic.w	r1, r1, r2

    @ Turn off LED for Task 2 (PB7 LOW)
    LDR R0, =GPIOB_ODR
 8000186:	481c      	ldr	r0, [pc, #112]	@ (80001f8 <delay_loop+0x14>)
    LDR R2, [R0]
 8000188:	6802      	ldr	r2, [r0, #0]
    BIC R2, R2, #(1 << 7)      @ Clear bit 7 (PB7 LOW)
 800018a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
    STR R2, [R0]
 800018e:	6002      	str	r2, [r0, #0]
    BL delay_300ms              @ Add a delay to visualize the LED
 8000190:	f000 f827 	bl	80001e2 <delay_300ms>

    @ Task 3: Toggle the security alarm (bit 6)
    MOV R2, #0x40              @ Load value 0x40 (binary 01000000) to toggle bit 6
 8000194:	f04f 0240 	mov.w	r2, #64	@ 0x40
    EOR R1, R1, R2
 8000198:	ea81 0102 	eor.w	r1, r1, r2

    @ Turn off LED for Task 3 (PB8 LOW)
    LDR R0, =GPIOB_ODR
 800019c:	4816      	ldr	r0, [pc, #88]	@ (80001f8 <delay_loop+0x14>)
    LDR R2, [R0]
 800019e:	6802      	ldr	r2, [r0, #0]
    BIC R2, R2, #(1 << 8)      @ Clear bit 8 (PB8 LOW)
 80001a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
    STR R2, [R0]
 80001a4:	6002      	str	r2, [r0, #0]
    BL delay_300ms              @ Add a delay to visualize the LED
 80001a6:	f000 f81c 	bl	80001e2 <delay_300ms>

    @ Task 4: Check if the garage door is open (bit 5) and close it if open
    MOV R2, #0x20              @ Load value 0x20 (binary 00100000) to test/clear bit 5
 80001aa:	f04f 0220 	mov.w	r2, #32
    AND R3, R1, R2
 80001ae:	ea01 0302 	and.w	r3, r1, r2
    CMP R3, #0
 80001b2:	2b00      	cmp	r3, #0
    BEQ skipGarageClose
 80001b4:	d005      	beq.n	80001c2 <skipGarageClose>

    MOV R2, #0x20              @ Load value 0x20 (binary 00100000) to clear bit 5
 80001b6:	f04f 0220 	mov.w	r2, #32
    BIC R1, R1, R2
 80001ba:	ea21 0102 	bic.w	r1, r1, r2
    STR R1, [R0]
 80001be:	6001      	str	r1, [r0, #0]
    B END
 80001c0:	e009      	b.n	80001d6 <END>

080001c2 <skipGarageClose>:

skipGarageClose:
    @ Turn off LED for Task 4 (PB9 LOW)
    LDR R0, =GPIOB_ODR
 80001c2:	480d      	ldr	r0, [pc, #52]	@ (80001f8 <delay_loop+0x14>)
    LDR R2, [R0]
 80001c4:	6802      	ldr	r2, [r0, #0]
    BIC R2, R2, #(1 << 9)      @ Clear bit 9 (PB9 LOW)
 80001c6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
    STR R2, [R0]
 80001ca:	6002      	str	r2, [r0, #0]
    BL delay_300ms              @ Add a delay to visualize the LED
 80001cc:	f000 f809 	bl	80001e2 <delay_300ms>

    @ Store the modified value back into CONTROL_REG
    LDR R0, =CONTROL_REG
 80001d0:	480a      	ldr	r0, [pc, #40]	@ (80001fc <delay_loop+0x18>)
    STR R1, [R0]
 80001d2:	6001      	str	r1, [r0, #0]
	B END
 80001d4:	e7ff      	b.n	80001d6 <END>

080001d6 <END>:



END:
	@ Turn on all LEDs (set PB6-PB9 HIGH)
    LDR R0, =GPIOB_ODR
 80001d6:	4808      	ldr	r0, [pc, #32]	@ (80001f8 <delay_loop+0x14>)
    LDR R1, [R0]
 80001d8:	6801      	ldr	r1, [r0, #0]
    ORR R1, R1, #(1 << 6 | 1 << 7 | 1 << 8 | 1 << 9)  @ Set PB6-PB9 HIGH
 80001da:	f441 7170 	orr.w	r1, r1, #960	@ 0x3c0
    STR R1, [R0]  @ Infinite loop to keep the program running
 80001de:	6001      	str	r1, [r0, #0]
    B .
 80001e0:	e7fe      	b.n	80001e0 <END+0xa>

080001e2 <delay_300ms>:

delay_300ms:
    LDR R2, =2400000   @ Delay for 300ms at 8MHz (adjust for other clock speeds)
 80001e2:	4a07      	ldr	r2, [pc, #28]	@ (8000200 <delay_loop+0x1c>)

080001e4 <delay_loop>:
delay_loop:
    SUBS R2, R2, #1
 80001e4:	3a01      	subs	r2, #1
    BNE delay_loop
 80001e6:	d1fd      	bne.n	80001e4 <delay_loop>
    BX LR
 80001e8:	4770      	bx	lr
 80001ea:	0000      	.short	0x0000
    LDR R0, =RCC_APB2ENR
 80001ec:	40021018 	.word	0x40021018
    LDR R0, =GPIOB_CRL
 80001f0:	40010c00 	.word	0x40010c00
    LDR R0, =GPIOB_CRH
 80001f4:	40010c04 	.word	0x40010c04
    LDR R0, =GPIOB_ODR
 80001f8:	40010c0c 	.word	0x40010c0c
    LDR R0, =CONTROL_REG
 80001fc:	20000000 	.word	0x20000000
    LDR R2, =2400000   @ Delay for 300ms at 8MHz (adjust for other clock speeds)
 8000200:	00249f00 	.word	0x00249f00

08000204 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000204:	480c      	ldr	r0, [pc, #48]	@ (8000238 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000206:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000208:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800020c:	480b      	ldr	r0, [pc, #44]	@ (800023c <LoopForever+0x6>)
  ldr r1, =_edata
 800020e:	490c      	ldr	r1, [pc, #48]	@ (8000240 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000210:	4a0c      	ldr	r2, [pc, #48]	@ (8000244 <LoopForever+0xe>)
  movs r3, #0
 8000212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000214:	e002      	b.n	800021c <LoopCopyDataInit>

08000216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800021a:	3304      	adds	r3, #4

0800021c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800021c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800021e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000220:	d3f9      	bcc.n	8000216 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000222:	4a09      	ldr	r2, [pc, #36]	@ (8000248 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000224:	4c09      	ldr	r4, [pc, #36]	@ (800024c <LoopForever+0x16>)
  movs r3, #0
 8000226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000228:	e001      	b.n	800022e <LoopFillZerobss>

0800022a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800022a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800022c:	3204      	adds	r2, #4

0800022e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800022e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000230:	d3fb      	bcc.n	800022a <FillZerobss>

/* Call static constructors */
 // bl __libc_init_array
/* Call the application's entry point.*/
  bl main
 8000232:	f7ff ff7d 	bl	8000130 <main>

08000236 <LoopForever>:

LoopForever:
  b LoopForever
 8000236:	e7fe      	b.n	8000236 <LoopForever>
  ldr   r0, =_estack
 8000238:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800023c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000240:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000244:	08000254 	.word	0x08000254
  ldr r2, =_sbss
 8000248:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800024c:	20000004 	.word	0x20000004

08000250 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000250:	e7fe      	b.n	8000250 <ADC1_2_IRQHandler>
	...
