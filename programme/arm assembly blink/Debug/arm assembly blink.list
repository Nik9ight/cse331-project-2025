
arm assembly blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000000a0  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080001d0  080001d0  000011d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080001d0  080001d0  000011d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080001d0  080001d0  000011d0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080001d0  080001d0  000011d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000000  080001d0  080001d0  000011d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000000  080001d0  080001d0  000011d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000011d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000000  20000000  080001d0  00000000  2**0
                  ALLOC
 10 ._user_heap_stack 00000600  20000000  080001d0  00002000  2**0
                  ALLOC
 11 .ARM.attributes 00000021  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY
 12 .debug_line   000000e2  00000000  00000000  000011f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000005d  00000000  00000000  000012d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00000054  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000038  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000048  00000000  00000000  000013c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00000079  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000019  00000000  00000000  00001481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <main>:
.equ RCC_APB2ENR, 0x40021018  @ RCC APB2 peripheral clock enable register
.equ GPIOC_CRH, 0x40011004    @ GPIOC Config register high

main:
    @ Enable GPIOC clock
    LDR R0, =RCC_APB2ENR
 8000130:	480f      	ldr	r0, [pc, #60]	@ (8000170 <delay_loop+0x8>)
    LDR R1, [R0]
 8000132:	6801      	ldr	r1, [r0, #0]
    ORR R1, R1, #(1 << 4)     @ Enable GPIOC clock (bit 4)
 8000134:	f041 0110 	orr.w	r1, r1, #16
    STR R1, [R0]
 8000138:	6001      	str	r1, [r0, #0]

    @ Configure PC13 as output (push-pull, max speed 2 MHz)
    LDR R0, =GPIOC_CRH
 800013a:	480e      	ldr	r0, [pc, #56]	@ (8000174 <delay_loop+0xc>)
    LDR R1, [R0]
 800013c:	6801      	ldr	r1, [r0, #0]
    BIC R1, R1, #0xF00000      @ Clear bits 23:20 (CNF13 and MODE13)
 800013e:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
    ORR R1, R1, #0x200000      @ Set MODE13 to 0x2 (Output mode, max speed 2 MHz)
 8000142:	f441 1100 	orr.w	r1, r1, #2097152	@ 0x200000
    STR R1, [R0]
 8000146:	6001      	str	r1, [r0, #0]

08000148 <loop>:

loop:
    @ Turn on the LED (set PC13 LOW)
    LDR R0, =GPIOC_ODR
 8000148:	480b      	ldr	r0, [pc, #44]	@ (8000178 <delay_loop+0x10>)
    LDR R1, [R0]
 800014a:	6801      	ldr	r1, [r0, #0]
    BIC R1, R1, #(1 << 13)     @ Clear bit 13 (PC13 LOW)
 800014c:	f421 5100 	bic.w	r1, r1, #8192	@ 0x2000
    STR R1, [R0]
 8000150:	6001      	str	r1, [r0, #0]
    BL delay_300ms              @ Call delay function
 8000152:	f000 f808 	bl	8000166 <delay_300ms>

    @ Turn off the LED (set PC13 HIGH)
    LDR R0, =GPIOC_ODR
 8000156:	4808      	ldr	r0, [pc, #32]	@ (8000178 <delay_loop+0x10>)
    LDR R1, [R0]
 8000158:	6801      	ldr	r1, [r0, #0]
    ORR R1, R1, #(1 << 13)     @ Set bit 13 (PC13 HIGH)
 800015a:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
    STR R1, [R0]
 800015e:	6001      	str	r1, [r0, #0]
    BL delay_300ms              @ Call delay function
 8000160:	f000 f801 	bl	8000166 <delay_300ms>

    B loop  @ Repeat forever
 8000164:	e7f0      	b.n	8000148 <loop>

08000166 <delay_300ms>:

delay_300ms:
    LDR R2, =2400000   @ Delay for 300ms at 8MHz (adjust for other clock speeds)
 8000166:	4a05      	ldr	r2, [pc, #20]	@ (800017c <delay_loop+0x14>)

08000168 <delay_loop>:
delay_loop:
    SUBS R2, R2, #1
 8000168:	3a01      	subs	r2, #1
    BNE delay_loop
 800016a:	d1fd      	bne.n	8000168 <delay_loop>
    BX LR
 800016c:	4770      	bx	lr
 800016e:	0000      	.short	0x0000
    LDR R0, =RCC_APB2ENR
 8000170:	40021018 	.word	0x40021018
    LDR R0, =GPIOC_CRH
 8000174:	40011004 	.word	0x40011004
    LDR R0, =GPIOC_ODR
 8000178:	4001100c 	.word	0x4001100c
    LDR R2, =2400000   @ Delay for 300ms at 8MHz (adjust for other clock speeds)
 800017c:	00249f00 	.word	0x00249f00

08000180 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000180:	480c      	ldr	r0, [pc, #48]	@ (80001b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000182:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000184:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000188:	480b      	ldr	r0, [pc, #44]	@ (80001b8 <LoopForever+0x6>)
  ldr r1, =_edata
 800018a:	490c      	ldr	r1, [pc, #48]	@ (80001bc <LoopForever+0xa>)
  ldr r2, =_sidata
 800018c:	4a0c      	ldr	r2, [pc, #48]	@ (80001c0 <LoopForever+0xe>)
  movs r3, #0
 800018e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000190:	e002      	b.n	8000198 <LoopCopyDataInit>

08000192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000196:	3304      	adds	r3, #4

08000198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800019a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800019c:	d3f9      	bcc.n	8000192 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800019e:	4a09      	ldr	r2, [pc, #36]	@ (80001c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001a0:	4c09      	ldr	r4, [pc, #36]	@ (80001c8 <LoopForever+0x16>)
  movs r3, #0
 80001a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001a4:	e001      	b.n	80001aa <LoopFillZerobss>

080001a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001a8:	3204      	adds	r2, #4

080001aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001ac:	d3fb      	bcc.n	80001a6 <FillZerobss>

/* Call static constructors */
  //bl __libc_init_array
/* Call the application's entry point.*/
  bl main
 80001ae:	f7ff ffbf 	bl	8000130 <main>

080001b2 <LoopForever>:

LoopForever:
  b LoopForever
 80001b2:	e7fe      	b.n	80001b2 <LoopForever>
  ldr   r0, =_estack
 80001b4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80001b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80001c0:	080001d0 	.word	0x080001d0
  ldr r2, =_sbss
 80001c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80001c8:	20000000 	.word	0x20000000

080001cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001cc:	e7fe      	b.n	80001cc <ADC1_2_IRQHandler>
	...
